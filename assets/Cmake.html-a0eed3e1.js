import{_ as t,r as o,o as l,c,a as n,b as s,d as e,e as p}from"./app-f078eaf8.js";const i={},r=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"[课程视频](【从零开始详细介绍CMake】 https://www.bilibili.com/video/BV1vR4y1u77h/?p=3&share_source=copy_web&vd_source=060cd26cc816f7218dcbb7765d5746b4)")],-1),u=n("h1",{id:"cmake",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#cmake","aria-hidden":"true"},"#"),s(" CMake")],-1),d=n("h1",{id:"说明",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#说明","aria-hidden":"true"},"#"),s(" 说明")],-1),k=n("p",null,"cmake的定义是什么 ？-----高级编译配置工具",-1),v=n("p",null,"当多个人用不同的语言或者编译器开发一个项目，最终要输出一个可执行文件或者共享库（dll，so等等）这时候神器就出现了-----CMake！",-1),m=n("p",null,"所有操作都是通过编译CMakeLists.txt来完成的—简单",-1),h={href:"http://www.cmake.org/",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,"学习CMake的目的，为将来处理大型的C/C++/JAVA项目做准备",-1),E=n("h1",{id:"cmake安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#cmake安装","aria-hidden":"true"},"#"),s(" CMake安装")],-1),_=n("p",null,"1、绝大多数的linux系统已经安装了CMake",-1),R={href:"http://www.cmake.org/HTML/Download.html",target:"_blank",rel:"noopener noreferrer"},L=p(`<h1 id="cmake一个helloword" tabindex="-1"><a class="header-anchor" href="#cmake一个helloword" aria-hidden="true">#</a> CMake一个HelloWord</h1><p>1、步骤一，写一个HelloWord</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">main</span><span class="token expression"><span class="token punctuation">.</span>cpp</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span>  <span class="token string">&quot;hello word&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、步骤二，写CMakeLists.txt</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token expression">CMakeLists<span class="token punctuation">.</span>txt</span></span>

<span class="token function">PROJECT</span> <span class="token punctuation">(</span>HELLO<span class="token punctuation">)</span>

<span class="token function">SET</span><span class="token punctuation">(</span>SRC_LIST main<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span>

<span class="token function">MESSAGE</span><span class="token punctuation">(</span>STATUS <span class="token string">&quot;This is BINARY dir &quot;</span> $<span class="token punctuation">{</span>HELLO_BINARY_DIR<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">MESSAGE</span><span class="token punctuation">(</span>STATUS <span class="token string">&quot;This is SOURCE dir &quot;</span>$<span class="token punctuation">{</span>HELLO_SOURCE_DIR<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">ADD_EXECUTABLE</span><span class="token punctuation">(</span>hello $<span class="token punctuation">{</span>SRC_LIST<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、步骤三、使用cmake，生成makefile文件</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>cmake <span class="token punctuation">.</span>

输出：
<span class="token punctuation">[</span>root@localhost cmake<span class="token punctuation">]</span># cmake <span class="token punctuation">.</span>
CMake <span class="token function">Warning</span> <span class="token punctuation">(</span>dev<span class="token punctuation">)</span> in CMakeLists<span class="token punctuation">.</span>txt<span class="token operator">:</span>
  Syntax Warning in cmake code at

    <span class="token operator">/</span>root<span class="token operator">/</span>cmake<span class="token operator">/</span>CMakeLists<span class="token punctuation">.</span>txt<span class="token operator">:</span><span class="token number">7</span><span class="token operator">:</span><span class="token number">37</span>

  Argument <span class="token operator">not</span> separated from preceding token by whitespace<span class="token punctuation">.</span>
This warning is <span class="token keyword">for</span> project developers<span class="token punctuation">.</span>  Use <span class="token operator">-</span>Wno<span class="token operator">-</span>dev to suppress it<span class="token punctuation">.</span>

<span class="token operator">--</span> The C compiler identification is GNU <span class="token number">10.2</span><span class="token punctuation">.</span><span class="token number">1</span>
<span class="token operator">--</span> The CXX compiler identification is GNU <span class="token number">10.2</span><span class="token punctuation">.</span><span class="token number">1</span>
<span class="token operator">--</span> Check <span class="token keyword">for</span> working C compiler<span class="token operator">:</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>cc
<span class="token operator">--</span> Check <span class="token keyword">for</span> working C compiler<span class="token operator">:</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>cc <span class="token operator">--</span> works
<span class="token operator">--</span> Detecting C compiler ABI info
<span class="token operator">--</span> Detecting C compiler ABI info <span class="token operator">-</span> done
<span class="token operator">--</span> Check <span class="token keyword">for</span> working CXX compiler<span class="token operator">:</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>c<span class="token operator">++</span>
<span class="token operator">--</span> Check <span class="token keyword">for</span> working CXX compiler<span class="token operator">:</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>c<span class="token operator">++</span> <span class="token operator">--</span> works
<span class="token operator">--</span> Detecting CXX compiler ABI info
<span class="token operator">--</span> Detecting CXX compiler ABI info <span class="token operator">-</span> done
<span class="token operator">--</span> This is BINARY dir <span class="token operator">/</span>root<span class="token operator">/</span>cmake
<span class="token operator">--</span> This is SOURCE dir <span class="token operator">/</span>root<span class="token operator">/</span>cmake
<span class="token operator">--</span> Configuring done
<span class="token operator">--</span> Generating done
<span class="token operator">--</span> Build files have been written to<span class="token operator">:</span> <span class="token operator">/</span>root<span class="token operator">/</span>cmake
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目录下就生成了这些文件-CMakeFiles, CMakeCache.txt, cmake_install.cmake 等文件，并且生成了Makefile. 现在不需要理会这些文件的作用，以后你也可以不去理会。最关键的是，它自动生成了Makefile.</p><p>4、使用make命令编译</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>root@localhost cmake<span class="token punctuation">]</span># make
Scanning dependencies of target hello
<span class="token punctuation">[</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">]</span> Building CXX object CMakeFiles<span class="token operator">/</span>hello<span class="token punctuation">.</span>dir<span class="token operator">/</span>main<span class="token punctuation">.</span>cpp<span class="token punctuation">.</span>o
Linking CXX executable hello
<span class="token punctuation">[</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">]</span> Built target hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5、最终生成了Hello的可执行程序</p><h1 id="cmake一个helloword-的语法介绍" tabindex="-1"><a class="header-anchor" href="#cmake一个helloword-的语法介绍" aria-hidden="true">#</a> CMake一个HelloWord-的语法介绍</h1><h2 id="project关键字" tabindex="-1"><a class="header-anchor" href="#project关键字" aria-hidden="true">#</a> PROJECT关键字</h2><p>可以用来指定工程的名字和支持的语言，默认支持所有语言</p><p>PROJECT (HELLO) 指定了工程的名字，并且支持所有语言—建议</p><p>PROJECT (HELLO CXX) 指定了工程的名字，并且支持语言是C++</p><p>PROJECT (HELLO C CXX) 指定了工程的名字，并且支持语言是C和C++</p><p>该指定隐式定义了两个CMAKE的变量</p><p><code>&lt;projectname&gt;_BINARY_DIR</code>，本例中是 <code>HELLO_BINARY_DIR</code></p><p><code>&lt;projectname&gt;_SOURCE_DIR</code>，本例中是 <code>HELLO_SOURCE_DIR</code></p><p>MESSAGE关键字就可以直接使用者两个变量，当前都指向当前的工作目录，后面会讲外部编译</p><p>问题：如果改了工程名，这两个变量名也会改变</p><p>解决：又定义两个预定义变量：PROJECT_BINARY_DIR和PROJECT_SOURCE_DIR，这两个变量和HELLO_BINARY_DIR，HELLO_SOURCE_DIR是一致的。所以改了工程名也没有关系</p><h2 id="set关键字" tabindex="-1"><a class="header-anchor" href="#set关键字" aria-hidden="true">#</a> SET关键字</h2><p>用来显示的指定变量的</p><p>SET(SRC_LIST main.cpp) SRC_LIST变量就包含了main.cpp</p><p>也可以 SET(SRC_LIST main.cpp t1.cpp t2.cpp)</p><h2 id="message关键字" tabindex="-1"><a class="header-anchor" href="#message关键字" aria-hidden="true">#</a> MESSAGE关键字</h2><p>向终端输出用户自定义的信息</p><p>主要包含三种信息：</p><ul><li>SEND_ERROR，产生错误，生成过程被跳过。</li><li>SATUS，输出前缀为—的信息。</li><li>FATAL_ERROR，立即终止所有 cmake 过程.</li></ul><h2 id="add-executable关键字" tabindex="-1"><a class="header-anchor" href="#add-executable关键字" aria-hidden="true">#</a> ADD_EXECUTABLE关键字</h2><p>生成可执行文件</p><p>ADD_EXECUTABLE(hello \${SRC_LIST}) 生成的可执行文件名是hello，源文件读取变量SRC_LIST中的内容</p><p>也可以直接写 ADD_EXECUTABLE(hello main.cpp)</p><p>上述例子可以简化的写成</p><p>PROJECT(HELLO) ADD_EXECUTABLE(hello main.cpp)</p><p>注意：工程名的 HELLO 和生成的可执行文件 hello 是没有任何关系的</p><h1 id="语法的基本原则" tabindex="-1"><a class="header-anchor" href="#语法的基本原则" aria-hidden="true">#</a> 语法的基本原则</h1><ul><li><p>变量使用\${}方式取值，但是在 IF 控制语句中是直接使用变量名</p></li><li><p>指令(参数 1 参数 2...) 参数使用括弧括起，参数之间使用空格或分号分开。 以上面的 ADD_EXECUTABLE 指令为例，如果存在另外一个 func.cpp 源文件</p><p>就要写成：ADD_EXECUTABLE(hello main.cpp func.cpp)或者ADD_EXECUTABLE(hello main.cpp;func.cpp)</p></li><li><p>指令是大小写无关的，参数和变量是大小写相关的。但，推荐你全部使用大写指令</p></li></ul><h2 id="语法注意事项" tabindex="-1"><a class="header-anchor" href="#语法注意事项" aria-hidden="true">#</a> 语法注意事项</h2><ul><li>SET(SRC_LIST main.cpp) 可以写成 SET(SRC_LIST “main.cpp”)，如果源文件名中含有空格，就必须要加双引号</li><li>ADD_EXECUTABLE(hello main) 后缀可以不行，他会自动去找.c和.cpp，最好不要这样写，可能会有这两个文件main.cpp和main</li></ul><h1 id="内部构建和外部构建" tabindex="-1"><a class="header-anchor" href="#内部构建和外部构建" aria-hidden="true">#</a> 内部构建和外部构建</h1><ul><li>上述例子就是内部构建，他生产的临时文件特别多，不方便清理</li><li>外部构建，就会把生成的临时文件放在build目录下，不会对源文件有任何影响强烈使用外部构建方式</li></ul><h2 id="外部构建方式举例" tabindex="-1"><a class="header-anchor" href="#外部构建方式举例" aria-hidden="true">#</a> 外部构建方式举例</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//例子目录，CMakeLists.txt和上面例子一致</span>
<span class="token punctuation">[</span>root@localhost cmake<span class="token punctuation">]</span># pwd
<span class="token operator">/</span>root<span class="token operator">/</span>cmake
<span class="token punctuation">[</span>root@localhost cmake<span class="token punctuation">]</span># ll
total <span class="token number">8</span>
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span><span class="token punctuation">.</span> <span class="token number">1</span> root root <span class="token number">198</span> Dec <span class="token number">28</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">59</span> CMakeLists<span class="token punctuation">.</span>txt
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span><span class="token punctuation">.</span> <span class="token number">1</span> root root  <span class="token number">76</span> Dec <span class="token number">28</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">18</span> main<span class="token punctuation">.</span>cpp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1、建立一个build目录，可以在任何地方，建议在当前目录下</p><p>2、进入build，运行cmake .. 当然..表示上一级目录，你可以写CMakeLists.txt所在的绝对路径，生产的文件都在build目录下了</p><p>3、在build目录下，运行make来构建工程</p><p>注意外部构建的两个变量</p><p>1、HELLO_SOURCE_DIR 还是工程路径</p><p>2、HELLO_BINARY_DIR 编译路径 也就是 /root/cmake/bulid</p><h1 id="让hello-world看起来更像一个工程" tabindex="-1"><a class="header-anchor" href="#让hello-world看起来更像一个工程" aria-hidden="true">#</a> 让Hello World看起来更像一个工程</h1>`,53),T=n("li",null,"为工程添加一个子目录 src，用来放置工程源代码",-1),I=n("li",null,"添加一个子目录 doc，用来放置这个工程的文档 hello.txt",-1),C=n("li",null,"在工程目录添加文本文件 COPYRIGHT, README",-1),A={href:"http://runhello.sh/",target:"_blank",rel:"noopener noreferrer"},g=n("li",null,"将构建后的目标文件放入构建目录的 bin 子目录",-1),S=n("li",null,"将 doc 目录 的内容以及 COPYRIGHT/README 安装到/usr/share/doc/cmake/",-1),f=p(`<h2 id="将目标文件放入构建目录的-bin-子目录" tabindex="-1"><a class="header-anchor" href="#将目标文件放入构建目录的-bin-子目录" aria-hidden="true">#</a> 将目标文件放入构建目录的 bin 子目录</h2><p>每个目录下都要有一个CMakeLists.txt说明</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token punctuation">[</span>root@localhost cmake<span class="token punctuation">]</span># tree
<span class="token punctuation">.</span>
├── build
├── CMakeLists<span class="token punctuation">.</span>txt
└── src
    ├── CMakeLists<span class="token punctuation">.</span>txt
    └── main<span class="token punctuation">.</span>cpp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>外层CMakeLists.txt</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">PROJECT</span><span class="token punctuation">(</span>HELLO<span class="token punctuation">)</span>
<span class="token function">ADD_SUBDIRECTORY</span><span class="token punctuation">(</span>src bin<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>src下的CMakeLists.txt</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">ADD_EXECUTABLE</span><span class="token punctuation">(</span>hello main<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="add-subdirectory-指令" tabindex="-1"><a class="header-anchor" href="#add-subdirectory-指令" aria-hidden="true">#</a> ADD_SUBDIRECTORY 指令</h3><p>ADD_SUBDIRECTORY(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</p><ul><li><p>这个指令用于向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置</p></li><li><p>EXCLUDE_FROM_ALL函数是将写的目录从编译中排除，如程序中的example</p></li><li><p>ADD_SUBDIRECTORY(src bin)</p><p>将 src 子目录加入工程并指定编译输出(包含编译中间结果)路径为bin 目录</p><p>如果不进行 bin 目录的指定，那么编译结果(包括中间结果)都将存放在build/src 目录</p></li></ul><h3 id="更改二进制的保存路径" tabindex="-1"><a class="header-anchor" href="#更改二进制的保存路径" aria-hidden="true">#</a> 更改二进制的保存路径</h3><p>SET 指令重新定义 EXECUTABLE_OUTPUT_PATH 和 LIBRARY_OUTPUT_PATH 变量 来指定最终的目标二进制的位置</p><p>SET(EXECUTABLE_OUTPUT_PATH \${PROJECT_BINARY_DIR}/bin) SET(LIBRARY_OUTPUT_PATH \${PROJECT_BINARY_DIR}/lib)</p><p>思考：加载哪个CMakeLists.txt当中</p><p>哪里要改变目标存放路径，就在哪里加入上述的定义，所以应该在src下的CMakeLists.txt下写</p><h1 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h1><ul><li>一种是从代码编译后直接 make install 安装</li><li>一种是打包时的指定 目录安装。 <ul><li>简单的可以这样指定目录：make install DESTDIR=/tmp/test</li><li>稍微复杂一点可以这样指定目录：./configure –prefix=/usr</li></ul></li></ul><h2 id="如何安装helloword" tabindex="-1"><a class="header-anchor" href="#如何安装helloword" aria-hidden="true">#</a> 如何安装HelloWord</h2><p>使用CMAKE一个新的指令：INSTALL</p><p>INSTALL的安装可以包括：二进制、动态库、静态库以及文件、目录、脚本等</p><p>使用CMAKE一个新的变量：CMAKE_INSTALL_PREFIX</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 目录树结构</span>
<span class="token punctuation">[</span>root@localhost cmake<span class="token punctuation">]</span># tree
<span class="token punctuation">.</span>
├── build
├── CMakeLists<span class="token punctuation">.</span>txt
├── COPYRIGHT
├── doc
│   └── hello<span class="token punctuation">.</span>txt
├── README
├── runhello<span class="token punctuation">.</span>sh
└── src
    ├── CMakeLists<span class="token punctuation">.</span>txt
    └── main<span class="token punctuation">.</span>cpp

<span class="token number">3</span> directories<span class="token punctuation">,</span> <span class="token number">7</span> files
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装文件copyright和readme" tabindex="-1"><a class="header-anchor" href="#安装文件copyright和readme" aria-hidden="true">#</a> 安装文件COPYRIGHT和README</h3><p>INSTALL(FILES COPYRIGHT README DESTINATION share/doc/cmake/)</p><p>FILES：文件</p><p>DESTINATION：</p><p>1、写绝对路径</p><p>2、可以写相对路径，相对路径实际路径是：\${CMAKE_INSTALL_PREFIX}/&lt;DESTINATION 定义的路径&gt;</p><p>CMAKE_INSTALL_PREFIX 默认是在 /usr/local/</p><p>cmake -DCMAKE_INSTALL_PREFIX=/usr 在cmake的时候指定CMAKE_INSTALL_PREFIX变量的路径</p><h3 id="安装脚本runhello-sh" tabindex="-1"><a class="header-anchor" href="#安装脚本runhello-sh" aria-hidden="true">#</a> 安装脚本runhello.sh</h3><p>PROGRAMS：非目标文件的可执行程序安装(比如脚本之类)</p><p>INSTALL(PROGRAMS runhello.sh DESTINATION bin)</p><p>说明：实际安装到的是 /usr/bin</p><h3 id="安装-doc-中的-hello-txt" tabindex="-1"><a class="header-anchor" href="#安装-doc-中的-hello-txt" aria-hidden="true">#</a> 安装 doc 中的 hello.txt</h3><ul><li><p>一、是通过在 doc 目录建立CMakeLists.txt ，通过install下的file</p></li><li><p>二、是直接在工程目录通过</p><p>INSTALL(DIRECTORY doc/ DESTINATION share/doc/cmake)</p></li></ul><p>DIRECTORY 后面连接的是所在 Source 目录的相对路径</p><p>注意：abc 和 abc/有很大的区别</p><p>目录名不以/结尾：这个目录将被安装为目标路径下的</p><p>目录名以/结尾：将这个目录中的内容安装到目标路径</p><h3 id="安装过程" tabindex="-1"><a class="header-anchor" href="#安装过程" aria-hidden="true">#</a> 安装过程</h3><p>cmake ..</p><p>make</p><p>make install</p><h1 id="静态库和动态库的构建" tabindex="-1"><a class="header-anchor" href="#静态库和动态库的构建" aria-hidden="true">#</a> 静态库和动态库的构建</h1><p>任务：</p><p>１，建立一个静态库和动态库，提供 HelloFunc 函数供其他程序编程使用，HelloFunc 向终端输出 Hello World 字符串。</p><p>２，安装头文件与共享库。</p><p>静态库和动态库的区别</p><ul><li>静态库的扩展名一般为“.a”或“.lib”；动态库的扩展名一般为“.so”或“.dll”。</li><li>静态库在编译时会直接整合到目标程序中，编译成功的可执行文件可独立运行</li><li>动态库在编译时不会放到连接的目标程序中，即可执行文件无法单独运行。</li></ul><h2 id="构建实例" tabindex="-1"><a class="header-anchor" href="#构建实例" aria-hidden="true">#</a> 构建实例</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token punctuation">[</span>root@localhost cmake2<span class="token punctuation">]</span># tree
<span class="token punctuation">.</span>
├── build
├── CMakeLists<span class="token punctuation">.</span>txt
└── lib
    ├── CMakeLists<span class="token punctuation">.</span>txt
    ├── hello<span class="token punctuation">.</span>cpp
    └── hello<span class="token punctuation">.</span>h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>hello.h中的内容</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">HELLO_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Hello_H</span></span>

<span class="token keyword">void</span> <span class="token function">HelloFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>hello.cpp中的内容</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hello.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">HelloFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hello World&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>项目中的cmake内容</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">PROJECT</span><span class="token punctuation">(</span>HELLO<span class="token punctuation">)</span>
<span class="token function">ADD_SUBDIRECTORY</span><span class="token punctuation">(</span>lib bin<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>lib中CMakeLists.txt中的内容</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">SET</span><span class="token punctuation">(</span>LIBHELLO_SRC hello<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span>
<span class="token function">ADD_LIBRARY</span><span class="token punctuation">(</span>hello SHARED $<span class="token punctuation">{</span>LIBHELLO_SRC<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="add-library" tabindex="-1"><a class="header-anchor" href="#add-library" aria-hidden="true">#</a> ADD_LIBRARY</h3><p>ADD_LIBRARY(hello SHARED \${LIBHELLO_SRC})</p><ul><li>hello：就是正常的库名，生成的名字前面会加上lib，最终产生的文件是libhello.so</li><li>SHARED，动态库 STATIC，静态库</li><li>\${LIBHELLO_SRC} ：源文件</li></ul><h3 id="同时构建静态和动态库" tabindex="-1"><a class="header-anchor" href="#同时构建静态和动态库" aria-hidden="true">#</a> 同时构建静态和动态库</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 如果用这种方式，只会构建一个动态库，不会构建出静态库，虽然静态库的后缀是.a</span>
<span class="token function">ADD_LIBRARY</span><span class="token punctuation">(</span>hello SHARED $<span class="token punctuation">{</span>LIBHELLO_SRC<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">ADD_LIBRARY</span><span class="token punctuation">(</span>hello STATIC $<span class="token punctuation">{</span>LIBHELLO_SRC<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 修改静态库的名字，这样是可以的，但是我们往往希望他们的名字是相同的，只是后缀不同而已</span>
<span class="token function">ADD_LIBRARY</span><span class="token punctuation">(</span>hello SHARED $<span class="token punctuation">{</span>LIBHELLO_SRC<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">ADD_LIBRARY</span><span class="token punctuation">(</span>hello_static STATIC $<span class="token punctuation">{</span>LIBHELLO_SRC<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="set-target-properties" tabindex="-1"><a class="header-anchor" href="#set-target-properties" aria-hidden="true">#</a> SET_TARGET_PROPERTIES</h3><p>这条指令可以用来设置输出的名称，对于动态库，还可以用来指定动态库版本和 API 版本</p><p>同时构建静态和动态库</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">SET</span><span class="token punctuation">(</span>LIBHELLO_SRC hello<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span>

<span class="token function">ADD_LIBRARY</span><span class="token punctuation">(</span>hello_static STATIC $<span class="token punctuation">{</span>LIBHELLO_SRC<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//对hello_static的重名为hello</span>
<span class="token function">SET_TARGET_PROPERTIES</span><span class="token punctuation">(</span>hello_static PROPERTIES  OUTPUT_NAME <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//cmake 在构建一个新的target 时，会尝试清理掉其他使用这个名字的库，因为，在构建 libhello.so 时， 就会清理掉 libhello.a</span>
<span class="token function">SET_TARGET_PROPERTIES</span><span class="token punctuation">(</span>hello_static PROPERTIES CLEAN_DIRECT_OUTPUT <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token function">ADD_LIBRARY</span><span class="token punctuation">(</span>hello SHARED $<span class="token punctuation">{</span>LIBHELLO_SRC<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">SET_TARGET_PROPERTIES</span><span class="token punctuation">(</span>hello PROPERTIES  OUTPUT_NAME <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
<span class="token function">SET_TARGET_PROPERTIES</span><span class="token punctuation">(</span>hello PROPERTIES CLEAN_DIRECT_OUTPUT <span class="token number">1</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动态库的版本号" tabindex="-1"><a class="header-anchor" href="#动态库的版本号" aria-hidden="true">#</a> 动态库的版本号</h3><p>一般动态库都有一个版本号的关联</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>libhello<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">1.2</span>
libhello<span class="token punctuation">.</span>so <span class="token operator">-&gt;</span>libhello<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">1</span>
libhello<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-&gt;</span>libhello<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">1.2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CMakeLists.txt 插入如下</p><p><code>SET_TARGET_PROPERTIES(hello PROPERTIES VERSION 1.2 SOVERSION 1)</code></p><p>VERSION 指代动态库版本，SOVERSION 指代 API 版本。</p><h3 id="安装共享库和头文件" tabindex="-1"><a class="header-anchor" href="#安装共享库和头文件" aria-hidden="true">#</a> 安装共享库和头文件</h3><p>本例中我们将 hello 的共享库安装到 <code>&lt;prefix&gt;/lib</code> 目录，</p><p>将 <code>hello.h</code> 安装到 <code>&lt;prefix&gt;/include/hello</code> 目录</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//文件放到该目录下</span>
<span class="token function">INSTALL</span><span class="token punctuation">(</span>FILES hello<span class="token punctuation">.</span>h DESTINATION include<span class="token operator">/</span>hello<span class="token punctuation">)</span>

<span class="token comment">//二进制，静态库，动态库安装都用TARGETS</span>
<span class="token comment">//ARCHIVE 特指静态库，LIBRARY 特指动态库，RUNTIME 特指可执行目标二进制。</span>
<span class="token function">INSTALL</span><span class="token punctuation">(</span>TARGETS hello hello_static LIBRARY DESTINATION lib ARCHIVE DESTINATION lib<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><p>安装的时候，指定一下路径，放到系统下</p><p><code>cmake -DCMAKE_INSTALL_PREFIX=/usr ..</code></p><h3 id="使用外部共享库和头文件" tabindex="-1"><a class="header-anchor" href="#使用外部共享库和头文件" aria-hidden="true">#</a> 使用外部共享库和头文件</h3><p>准备工作，新建一个目录来使用外部共享库和头文件</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token punctuation">[</span>root@MiWiFi<span class="token operator">-</span>R4CM<span class="token operator">-</span>srv cmake3<span class="token punctuation">]</span># tree
<span class="token punctuation">.</span>
├── build
├── CMakeLists<span class="token punctuation">.</span>txt
└── src
    ├── CMakeLists<span class="token punctuation">.</span>txt
    └── main<span class="token punctuation">.</span>cpp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main.cpp</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hello.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token function">HelloFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解决-make后头文件找不到的问题" tabindex="-1"><a class="header-anchor" href="#解决-make后头文件找不到的问题" aria-hidden="true">#</a> 解决：make后头文件找不到的问题</h3><p>PS：include &lt;hello/hello.h&gt; 这样include是可以，这么做的话，就没啥好讲的了</p><p>关键字：INCLUDE_DIRECTORIES 这条指令可以用来向工程添加多个特定的头文件搜索路径，路径之间用空格分割</p><p>在CMakeLists.txt中加入头文件搜索路径</p><p>INCLUDE_DIRECTORIES(/usr/include/hello)</p><p>感谢：</p><p>网友：zcc720的提醒</p><h3 id="解决-找到引用的函数问题" tabindex="-1"><a class="header-anchor" href="#解决-找到引用的函数问题" aria-hidden="true">#</a> 解决：找到引用的函数问题</h3><p>报错信息：undefined reference to \`HelloFunc()&#39;</p><p>关键字：LINK_DIRECTORIES 添加非标准的共享库搜索路径</p><p>指定第三方库所在路径，LINK_DIRECTORIES(/home/myproject/libs)</p><p>关键字：TARGET_LINK_LIBRARIES 添加需要链接的共享库</p><p>TARGET_LINK_LIBRARIES的时候，只需要给出动态链接库的名字就行了。</p><p>在CMakeLists.txt中插入链接共享库，主要要插在executable的后面</p><p>查看main的链接情况</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token punctuation">[</span>root@MiWiFi<span class="token operator">-</span>R4CM<span class="token operator">-</span>srv bin<span class="token punctuation">]</span># ldd main 
	linux<span class="token operator">-</span>vdso<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">1</span> <span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token punctuation">(</span><span class="token number">0x00007ffedfda4000</span><span class="token punctuation">)</span>
	libhello<span class="token punctuation">.</span>so <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">/</span>lib64<span class="token operator">/</span>libhello<span class="token punctuation">.</span><span class="token function">so</span> <span class="token punctuation">(</span><span class="token number">0x00007f41c0d8f000</span><span class="token punctuation">)</span>
	libstdc<span class="token operator">++</span><span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">6</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">/</span>lib64<span class="token operator">/</span>libstdc<span class="token operator">++</span><span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">6</span> <span class="token punctuation">(</span><span class="token number">0x00007f41c0874000</span><span class="token punctuation">)</span>
	libm<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">6</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">/</span>lib64<span class="token operator">/</span>libm<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">6</span> <span class="token punctuation">(</span><span class="token number">0x00007f41c0572000</span><span class="token punctuation">)</span>
	libgcc_s<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">1</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">/</span>lib64<span class="token operator">/</span>libgcc_s<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">1</span> <span class="token punctuation">(</span><span class="token number">0x00007f41c035c000</span><span class="token punctuation">)</span>
	libc<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">6</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">/</span>lib64<span class="token operator">/</span>libc<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">6</span> <span class="token punctuation">(</span><span class="token number">0x00007f41bff8e000</span><span class="token punctuation">)</span>
	<span class="token operator">/</span>lib64<span class="token operator">/</span>ld<span class="token operator">-</span>linux<span class="token operator">-</span>x86<span class="token operator">-</span><span class="token number">64.</span>so<span class="token punctuation">.</span><span class="token number">2</span> <span class="token punctuation">(</span><span class="token number">0x00007f41c0b7c000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>链接静态库</p><p><code>TARGET_LINK_LIBRARIES(main libhello.a)</code></p><h3 id="特殊的环境变量-cmake-include-path-和-cmake-library-path" tabindex="-1"><a class="header-anchor" href="#特殊的环境变量-cmake-include-path-和-cmake-library-path" aria-hidden="true">#</a> 特殊的环境变量 CMAKE_INCLUDE_PATH 和 CMAKE_LIBRARY_PATH</h3><p>注意：这两个是环境变量而不是 cmake 变量，可以在linux的bash中进行设置</p><p>我们上面例子中使用了绝对路径INCLUDE_DIRECTORIES(/usr/include/hello)来指明include路径的位置</p><p>我们还可以使用另外一种方式，使用环境变量export CMAKE_INCLUDE_PATH=/usr/include/hello</p><p>补充：生产debug版本的方法： cmake .. -DCMAKE_BUILD_TYPE=debug</p>`,110);function x(D,O){const a=o("ExternalLinkIcon");return l(),c("div",null,[r,u,d,k,v,m,n("p",null,[s("官 方网站是 "),n("a",h,[s("www.cmake.org"),e(a)]),s("，可以通过访问官方网站获得更多关于 cmake 的信息")]),b,E,_,n("p",null,[s("2、Windows或某些没有安装过的linux系统，去"),n("a",R,[s("http://www.cmake.org/HTML/Download.htm"),e(a)]),s("l 可以下载安装")]),L,n("ul",null,[T,I,C,n("li",null,[s("在工程目录添加一个 "),n("a",A,[s("runhello.sh"),e(a)]),s(" 脚本，用来调用 hello 二进制")]),g,S]),f])}const B=t(i,[["render",x],["__file","Cmake.html.vue"]]);export{B as default};
