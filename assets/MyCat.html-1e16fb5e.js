import{_ as p,r as o,o as i,c,a,b as n,d as e,e as t}from"./app-f078eaf8.js";const l={},r={class:"custom-container tip"},d=a("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[a("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[a("circle",{cx:"12",cy:"12",r:"9"}),a("path",{d:"M12 8h.01"}),a("path",{d:"M11 12h1v4h1"})])],-1),u=a("p",{class:"custom-container-title"},"TIP",-1),h={href:"https://ke.qq.com/course/1741064",target:"_blank",rel:"noopener noreferrer"},m=t('<h1 id="mycat" tabindex="-1"><a class="header-anchor" href="#mycat" aria-hidden="true">#</a> MyCat</h1><h1 id="_01【熟悉】mycat简介" tabindex="-1"><a class="header-anchor" href="#_01【熟悉】mycat简介" aria-hidden="true">#</a> 01【熟悉】mycat简介</h1><h2 id="_1-什么是mycat" tabindex="-1"><a class="header-anchor" href="#_1-什么是mycat" aria-hidden="true">#</a> <strong>1，什么是MyCat</strong></h2><p>MyCat是目前最流行的分布式数据库中间插件，是一个开源的分布式数据库系统，是一个实现了MySQL协议的服务器，前端用户可以把它看作是一个数据库代理，用MySQL客户端工具和命令行访问，而其后端可以用MySQL原生协议与多个MySQL服务器通信，也可以用JDBC协议与大多数主流数据库服务器通信，其核心功能是分表分库，即将一个大表水平分割为N个小表，存储在后端MySQL服务器里或者其他数据库里。</p><p>MyCat发展到目前的版本，已经不是一个单纯的MySQL代理了，它的后端可以支持MySQL、SQL Server、Oracle、DB2、PostgreSQL等主流数据库，也支持MongoDB这种新型NoSQL方式的存储，未来还会支持更多类型的存储。而在最终用户看来，无论是那种存储方式，在MyCat里，都是一个传统的数据库表，支持标准的SQL语句进行数据的操作，这样一来，对前端业务系统来说，可以大幅降低开发难度，提升开发速度</p><p><img src="https://picgo.xingenhi.cn//typoraclip_image0021c0ba04b-dc68-4d98-a75d-0e250e62ddbf.png" alt="image"></p>',6),k={href:"http://www.mycat.io/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/MyCATApache/Mycat-Server",target:"_blank",rel:"noopener noreferrer"},v=a("p",null,[a("img",{src:"https://picgo.xingenhi.cn//typoraclip_image003ad9c09d1-53c0-48f8-a9a9-03ab7e502953.png",alt:"image"})],-1),b=a("h2",{id:"_2-为什么使用mycat",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_2-为什么使用mycat","aria-hidden":"true"},"#"),n(),a("strong",null,"2，为什么使用MyCat")],-1),y=a("p",null,[a("img",{src:"https://picgo.xingenhi.cn//typoraclip_image005540c72d6-734d-4171-b599-eee2a4794fae.jpg",alt:"image"})],-1),_=a("p",null,"如今随着互联网的发展，数据的量级也是撑指数的增长，从GB到TB到PB。对数据的各种操作也是愈加的困难，传统的关系性数据库已经无法满足快速查询与插入数据的需求。这个时候NoSQL的出现暂时解决了这一危机。它通过降低数据的安全性，减少对事务的支持，减少对复杂查询的支持，来获取性能上的提升。但是，在有些场合NoSQL一些折衷是无法满足使用场景的，就比如有些使用场景是绝对要有事务与安全指标的。这个时候NoSQL肯定是无法满足的，所以还是需要使用关系性数据库。如何使用关系型数据库解决海量存储的问题呢？此时就需要做数据库集群，为了提高查询性能将一个数据库的数据分散到不同的数据库中存储，为应对此问题就出现了——MyCat",-1),x=a("p",null,"综上所述：Mycat作用为：能满足数据库数据大量存储；提高了查询性能;实现读写分离，分库分表，如下",-1),f=a("p",null,"1：解决表的容量问题",-1),q=a("p",null,"Mysql的表最大存储多少数据？500w条",-1),w={href:"https://www.cnblogs.com/glzgc/p/10831877.html",target:"_blank",rel:"noopener noreferrer"},I=t(`<p>我的表里面的数据非常多，导致我查询很慢？</p><p>3：解决表的DML的性能问题？</p><p>2000条/s</p><p>4：解决mysql 挂了的问题</p><h2 id="_3-mycat解决问题的思路" tabindex="-1"><a class="header-anchor" href="#_3-mycat解决问题的思路" aria-hidden="true">#</a> <strong>3，MyCat解决问题的思路</strong></h2><p><strong>1：容量</strong></p><p><img src="https://picgo.xingenhi.cn//typoraclip_image00789684d25-0641-4d88-ac2d-5968c7274695.png" alt="image"></p><p><strong>2：查询速度</strong></p><p>最快也是Log(n),你加什么索引都不行</p><p><img src="https://picgo.xingenhi.cn//typoraclip_image009a7661059-8fc3-4426-a616-607c96722d63.png" alt="image"></p><p><strong>3：写入问题</strong></p><p><img src="https://picgo.xingenhi.cn//typoraclip_image011c14df348-5a4f-403e-a649-cc38f4eba4d1.png" alt="image"></p><hr><h2 id="_4-mycat和mysql的区别" tabindex="-1"><a class="header-anchor" href="#_4-mycat和mysql的区别" aria-hidden="true">#</a> <strong>4，Mycat和MySQL的区别</strong></h2><pre><code>    我们可以把上层看作是对下层的抽象，例如操作系统是对各类计算机硬件的抽象。那么我们什么时候需要抽象？假如只有一种硬件的时候，我们需要开发一个操作系统吗？再比如一个项目只需要一个人完成的时候不需要leader，但是当需要几十人完成时，就应该有一个管理者，发挥沟通协调等作用，而这个管理者对于他的上层来说就是对项目组的抽象。同样的，当我们的应用只需要一台数据库服务器的时候我们并不需要Mycat，而如果你需要分库甚至分表，这时候应用要面对很多个数据库的时候，这个时候就需要对数据库层做一个抽象，来管理这些数据库，而最上面的应用只需要面对一个数据库层的抽象或者说数据库中间件就好了，这就是Mycat的核心作用。所以可以这样理解：数据库是对底层存储文件的抽象，而Mycat是对数据库的抽象。
</code></pre><hr><h2 id="_5-支持的数据库" tabindex="-1"><a class="header-anchor" href="#_5-支持的数据库" aria-hidden="true">#</a> <strong>5，支持的数据库</strong></h2><p>mysql，sqlserver，mongoDB等</p><p><img src="https://picgo.xingenhi.cn//typoraclip_image0137a84a3d8-5252-4abe-a21c-e095bdbd364b.jpg" alt="image"></p><hr><h2 id="_6-架构" tabindex="-1"><a class="header-anchor" href="#_6-架构" aria-hidden="true">#</a> <strong>6，架构</strong></h2><p>前端用户可以把mycat看作是一个数据库代理，用mysql客户端工具（如Navicat）和命令访问，而后端支持mysql，sqlserver，oracle等主流数据库，用mysql native 协议和多个mysql服务器通信，也可用JDBC协议与大多数主流数据库服务器通信，其核心功能就是分库分表，即将一个大表水平分割为N个小表，真正的存储在后端Mysql服务器中或其它数据库中</p><p><img src="https://picgo.xingenhi.cn//typoraclip_image014fd0cf4c8-5c29-4448-8396-e05ee1b468e1.png" alt="image"></p><p>mycat原理：可以用“拦截”一词形容，它拦截了用户发送过来的SQL语句，首先对SQL语句做了一些特定的分析，如分片分析，路由分析，读写分离分析，缓存分析等，然后将此sql发往后端的真实数据库，并将返回的结果做适当处理，最终返回给用户</p><h1 id="_02【熟悉】mysql主从搭建" tabindex="-1"><a class="header-anchor" href="#_02【熟悉】mysql主从搭建" aria-hidden="true">#</a> 02【熟悉】mysql主从搭建</h1><p>因为mycat只能路由，分布，不能把主多个数据库里面的数据进行同步，所以要数据同步必做还要使用mysql的读写分离，主从复制</p><p><img src="https://picgo.xingenhi.cn//typora0.4806261626651609.png" alt="image"></p><h2 id="_1-概述主从介绍" tabindex="-1"><a class="header-anchor" href="#_1-概述主从介绍" aria-hidden="true">#</a> <strong>1，概述主从介绍</strong></h2><p>Mysql主从又叫Replication、AB复制。简单讲就是A与B两台机器做主从后，在A上写数据，另外一台B也会跟着写数据，实现数据实时同步</p><p>mysql主从是基于binlog，主上需开启binlog才能进行主从</p><p>主从过程大概有3个步骤</p><p>主将更改操作记录到binlog里</p><p>从将主的binlog事件（sql语句） 同步本机上并记录在relaylog里</p><p>从根据relaylog里面的sql语句按顺序执行</p><h2 id="_2-主从作用" tabindex="-1"><a class="header-anchor" href="#_2-主从作用" aria-hidden="true">#</a> <strong>2，主从作用</strong></h2><p><strong>实时灾备，用于故障切换</strong></p><p><strong>读写分离，提供查询服务</strong></p><p><strong>备份，避免影响业务</strong></p><p>主从形式</p><p><img src="https://picgo.xingenhi.cn//typora0.37766097344561955.png" alt="image"></p><p>* 一主一从</p><p>* 主主复制</p><p>* 一主多从---扩展系统读取的性能，因为读是在从库读取的</p><p>* 多主一从---5.7版本开始支持</p><p>* 联级复制</p><h2 id="_3-主从复制原理" tabindex="-1"><a class="header-anchor" href="#_3-主从复制原理" aria-hidden="true">#</a> <strong>3，主从复制原理</strong></h2><p><img src="https://picgo.xingenhi.cn//typora0.06606147502441254.png" alt="image"></p><h2 id="_4-主从复制步骤" tabindex="-1"><a class="header-anchor" href="#_4-主从复制步骤" aria-hidden="true">#</a> <strong>4，主从复制步骤</strong></h2><p>主库将所有的写操作记录在binlog日志中，并生成log dump线程，将binlog日志传给从库的I/O线程</p><p>从库生成两个线程，一个是I/O线程，另一个是SQL线程</p><p>I/O线程去请求主库的binlog日志，并将binlog日志中的文件写入relay log（中继日志）中</p><p>SQL线程会读取relay loy中的内容，并解析成具体的操作，来实现主从的操作一致，达到最终数据一致的目的</p><h2 id="_5-主从复制配置步骤" tabindex="-1"><a class="header-anchor" href="#_5-主从复制配置步骤" aria-hidden="true">#</a> <strong>5，主从复制配置步骤</strong></h2><p>确保从数据库与主数据库里的数据一致</p><p>在主数据库里创建一个同步账户授权给从数据库使用</p><p>配置主数据库（修改配置文件）</p><p>配置从数据库（修改配置文件）</p><p>需求</p><p>搭建两台MYSQL服务器，一台作为主服务器，一台作为从服务器，主服务器进行写操作，从服务器进行读操作</p><h2 id="_6-环境说明【使用docker启动两个】" tabindex="-1"><a class="header-anchor" href="#_6-环境说明【使用docker启动两个】" aria-hidden="true">#</a> <strong>6，环境说明【使用docker启动两个】</strong></h2><table><thead><tr><th>名称</th><th>Ip</th><th>Port</th></tr></thead><tbody><tr><td>M1</td><td>192.168.149.128</td><td>3307</td></tr><tr><td>M1S1</td><td>192.168.149.128</td><td>3308</td></tr></tbody></table><p><img src="https://picgo.xingenhi.cn//typora0.7395512603317652.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.8588476706745156.png" alt="image"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>docker run <span class="token operator">--</span>name <span class="token constant">M1</span> <span class="token operator">-</span>p <span class="token number">3307</span><span class="token operator">:</span><span class="token number">3306</span> <span class="token operator">-</span>e <span class="token constant">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token operator">-</span>d mysql<span class="token operator">:</span><span class="token number">5.7</span>

docker run <span class="token operator">--</span>name <span class="token constant">M1S1</span> <span class="token operator">-</span>p <span class="token number">3308</span><span class="token operator">:</span><span class="token number">3306</span> <span class="token operator">-</span>e <span class="token constant">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token operator">-</span>d mysql<span class="token operator">:</span><span class="token number">5.7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意开放阿里云的端口(本地注意关闭防方墙并重启docker)</strong></p><h2 id="_7-修改配置文件" tabindex="-1"><a class="header-anchor" href="#_7-修改配置文件" aria-hidden="true">#</a> <strong>7，修改配置文件</strong></h2><p>将容器里面的配置文件复制出来,主要修改服务器的配置</p><p>在root目录下创建一个mysqlms的目录存放从docker容器里面复制过来的配置文件</p><p><img src="https://picgo.xingenhi.cn//typora0.21040211119328234.png" alt="image"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>docker cp <span class="token constant">M1</span><span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span>docker<span class="token punctuation">.</span>cnf m1<span class="token punctuation">.</span>cnf 

docker cp <span class="token constant">M1S1</span><span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span>docker<span class="token punctuation">.</span>cnf m1s1<span class="token punctuation">.</span>cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.26499326133452117.png" alt="image"></p><h3 id="_7-1-主机的配置m1-cnf" tabindex="-1"><a class="header-anchor" href="#_7-1-主机的配置m1-cnf" aria-hidden="true">#</a> <strong>7.1，主机的配置m1.cnf</strong></h3><p>主机里面要记录sql 语句，以后从机会把该sql 语句传过去</p><p><img src="https://picgo.xingenhi.cn//typora0.4325510035256349.png" alt="image"></p><h3 id="_7-2-从机的配置m1s1-cnf" tabindex="-1"><a class="header-anchor" href="#_7-2-从机的配置m1s1-cnf" aria-hidden="true">#</a> <strong>7.2，从机的配置m1s1.cnf</strong></h3><p><img src="https://picgo.xingenhi.cn//typora0.28457013215089727.png" alt="image"></p><h3 id="_7-3-配置文件修改后-复制到容器里面" tabindex="-1"><a class="header-anchor" href="#_7-3-配置文件修改后-复制到容器里面" aria-hidden="true">#</a> <strong>7.3，配置文件修改后，复制到容器里面</strong></h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>docker cp m1<span class="token punctuation">.</span>cnf <span class="token constant">M1</span><span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span>docker<span class="token punctuation">.</span>cnf
docker cp m1s1<span class="token punctuation">.</span>cnf <span class="token constant">M1S1</span><span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span>docker<span class="token punctuation">.</span>cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.7812145023701692.png" alt="image"></p><p>重启mysql（m1,m1s1）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>docker restart <span class="token constant">M1</span> <span class="token constant">M1S1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.05111582461573406.png" alt="image"></p><p>测试连接</p><p><img src="https://picgo.xingenhi.cn//typora0.8596742196522817.png" alt="image"></p><h2 id="_8-执行sql语句" tabindex="-1"><a class="header-anchor" href="#_8-执行sql语句" aria-hidden="true">#</a> <strong>8，执行sql语句</strong></h2><h3 id="_8-1进入主机里面执行相关配置" tabindex="-1"><a class="header-anchor" href="#_8-1进入主机里面执行相关配置" aria-hidden="true">#</a> <strong>8.1进入主机里面执行相关配置</strong></h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>docker exec <span class="token operator">-</span>it <span class="token constant">M1</span> bash
mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p123456
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.10714206935954006.png" alt="image"></p><p>创建用户</p><p>create user &#39;rep&#39;@&#39;%&#39; identified by &#39;123456&#39;;</p><p><img src="https://picgo.xingenhi.cn//typora0.8628973259282477.png" alt="image"></p><p>给该用户授予权限：</p><p>grant replication slave on *.* to &#39;rep&#39;@&#39;%&#39;;</p><p><img src="https://picgo.xingenhi.cn//typora0.6740125023317728.png" alt="image"></p><p>刷新权限</p><p>flush privileges;</p><p><img src="https://picgo.xingenhi.cn//typora0.18367872119971157.png" alt="image"></p><p>至此：M1 里面已经创建了一个用户：rep 123456 拥有所以库，所有表replication slave</p><p>尝试使用M1 里面的rep 用户登录：</p><p><img src="https://picgo.xingenhi.cn//typora0.03180696672271245.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.8470219162432874.png" alt="image"></p><h3 id="_8-2进入从机里面执行相关配置" tabindex="-1"><a class="header-anchor" href="#_8-2进入从机里面执行相关配置" aria-hidden="true">#</a> <strong>8.2进入从机里面执行相关配置</strong></h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>docker exec <span class="token operator">-</span>it <span class="token constant">M1S1</span> bash
mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p123456
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.6189962351073682.png" alt="image"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>change master <span class="token keyword">to</span> <span class="token namespace">master_host</span><span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>master_port<span class="token operator">=</span><span class="token punctuation">,</span>master_user<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>master_password<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>master_log_file<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>master_log_pos<span class="token operator">=</span>
    例如：
change master <span class="token keyword">to</span> <span class="token namespace">master_host</span><span class="token operator">=</span><span class="token string">&quot;192.168.40.137&quot;</span><span class="token punctuation">,</span>master_port<span class="token operator">=</span><span class="token number">3307</span><span class="token punctuation">,</span>master_user<span class="token operator">=</span><span class="token string">&quot;rep&quot;</span><span class="token punctuation">,</span>master_password<span class="token operator">=</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>master_log_file<span class="token operator">=</span><span class="token string">&quot;master.000001&quot;</span><span class="token punctuation">,</span>master_log_pos<span class="token operator">=</span><span class="token number">745</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>master_log_file：该文件具体叫什么名称，需要从主机里面去看看：</p><p>进入M1 里面使用root 用户登录M1，执行下面的sql：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>show master status<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.9063216815325372.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.7379790097039313.png" alt="image"></p><p>修改上面的SQL执行</p><p><img src="https://picgo.xingenhi.cn//typora0.4277668399918005.png" alt="image"></p><p>change master to master_host=&quot;47.97.173.181&quot;,master_port=3307,master_user=&quot;rep&quot;,master_password=&quot;123456&quot;,master_log_file=&quot;master.000001&quot;,master_log_pos=745;</p><p><strong>启动主从：（在M1S1里面执行）</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>start slave <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.1584604849875016.png" alt="image"></p><p><strong>查询主从的状态（M1S1）</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>show slave status \\<span class="token class-name">G</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.4398235396161213.png" alt="image"></p><p><strong>成功的标志：</strong></p><p><img src="https://picgo.xingenhi.cn//typora0.9136079448983989.png" alt="image"></p><h2 id="_9-搭建失败的原因" tabindex="-1"><a class="header-anchor" href="#_9-搭建失败的原因" aria-hidden="true">#</a> <strong>9，搭建失败的原因</strong></h2><h3 id="_9-1-第一个不是yes-是connecting" tabindex="-1"><a class="header-anchor" href="#_9-1-第一个不是yes-是connecting" aria-hidden="true">#</a> <strong>9.1，第一个不是yes,是connecting</strong></h3><p>是因为从机使用你配置的主机信息没有登陆到主机里面！</p><p>修改(从机里面)</p><p>stop slave;</p><p>change master to master_host=&quot;192.168.149.128&quot;,master_port=3307,master_user=&quot;rep&quot;,master_password=&quot;123456&quot;,master_log_file=&quot;master.000001&quot;,master_log_pos=745;</p><p>start slave;</p><h3 id="_9-2-第二个不是yes-是no" tabindex="-1"><a class="header-anchor" href="#_9-2-第二个不是yes-是no" aria-hidden="true">#</a> <strong>9.2，第二个不是yes ，是no</strong></h3><p><img src="https://picgo.xingenhi.cn//typora0.7457650686491548.png" alt="image"></p><p>从机会复制主机里面的sql 语句，来自己执行！</p><p>实验时先把从机里面的db3 删除</p><p>再把主机里面的db3 删除-&gt;从机里面复制该删除的命令-&gt;从机执行删除的命令（db3），事务无法提交，将一直阻塞！</p><p><img src="https://picgo.xingenhi.cn//typora0.0432153771807631.png" alt="image"></p><p>现在从机里面要删除db3 ，但是没有db3，导致一直阻塞，以后的主从复制不会进行了</p><p>解决：在从机新建一个db3：</p><p>然后停止主从，启动主从：</p><p><img src="https://picgo.xingenhi.cn//typora0.6994262129897993.png" alt="image"></p><h3 id="_9-3-第一个不是yes-是no" tabindex="-1"><a class="header-anchor" href="#_9-3-第一个不是yes-是no" aria-hidden="true">#</a> <strong>9.3，第一个不是yes，是no</strong></h3><p>就是你的server-id 没有配置成功的原因，需要重新修改配置文件，复制配置文件到容器里面，然后重启就ok</p><h3 id="_9-4-mysql主从的操作规范" tabindex="-1"><a class="header-anchor" href="#_9-4-mysql主从的操作规范" aria-hidden="true">#</a> <strong>9.4，mysql主从的操作规范</strong></h3><p>1 只能在主机里面执行DML 语句，<strong>不能在从机里面执行DML语句【会破坏主从】</strong></p><p>2 在从机里面可以执行查询语句</p><p>3 主机只有一台，但是从机可以有多台</p><h2 id="_10-测试" tabindex="-1"><a class="header-anchor" href="#_10-测试" aria-hidden="true">#</a> <strong>10，测试</strong></h2><p>在M1 里面创建数据库</p><p>看M1S1 有没有复制过去</p><p><img src="https://picgo.xingenhi.cn//typora0.7234187338068592.png" alt="image"></p><h1 id="_03【掌握】mysql的集群搭建" tabindex="-1"><a class="header-anchor" href="#_03【掌握】mysql的集群搭建" aria-hidden="true">#</a> 03【掌握】mysql的集群搭建</h1><h2 id="_1-集群搭建概述" tabindex="-1"><a class="header-anchor" href="#_1-集群搭建概述" aria-hidden="true">#</a> 1，集群搭建概述</h2><h3 id="_1-1-是什么" tabindex="-1"><a class="header-anchor" href="#_1-1-是什么" aria-hidden="true">#</a> 1.1，是什么</h3><p>集群（cluster）技术是一种较新的技术，通过集群技术，可以在付出较低成本的情况下获得在性能、可靠性、灵活性方面的相对较高的收益，其任务调度则是集群系统中的核心技术。</p><pre><code>    MySQL集群技术在分布式系统中为MySQL数据提供了冗余特性，增强了安全性，使得单个MySQL服务器故障不会对系统产生巨大的负面效应，系统的稳定性得到保障。
</code></pre><h3 id="_1-2-优点" tabindex="-1"><a class="header-anchor" href="#_1-2-优点" aria-hidden="true">#</a> 1.2，优点</h3><p>高可伸缩性：服务器集群具有很强的可伸缩性。 随着需求和负荷的增长，可以向集群系统添加更多的服务器。在这样的配置中，可以有多台服务器执行相同的应用和数据库操作。</p><p>高可用性：在不需要操作者干预的情况下，防止系统发生故障或从故障中自动恢复的能力。通过把故障服务器上的应用程序转移到备份服务器上运行，集群系统能够把正常运行时间提高到大于99.9%，大大减少服务器和应用程序的停机时间。</p><h3 id="_1-3-缺点" tabindex="-1"><a class="header-anchor" href="#_1-3-缺点" aria-hidden="true">#</a> 1.3，缺点</h3><pre><code>    我们知道集群中的应用只在一台服务器上运行，如果这个应用出现故障，其它的某台服务器会重新启动这个应用，接管位于共享磁盘柜上的数据区，进而使应用重新正常运转。我们知道整个应用的接管过程大体需要三个步骤：侦测并确认故障、后备服务器重新启动该应用、接管共享的数据区。因此在切换的过程中需要花费一定的时间，原则上根据应用的大小不同切换的时间也会不同，越大的应用切换的时间越长。
</code></pre><hr><h2 id="_2-搭建思路图" tabindex="-1"><a class="header-anchor" href="#_2-搭建思路图" aria-hidden="true">#</a> 2，搭建思路图</h2><p><img src="https://picgo.xingenhi.cn//typora0.2895285977250957.png" alt="image"></p><hr><h2 id="_3-搭建准备工作" tabindex="-1"><a class="header-anchor" href="#_3-搭建准备工作" aria-hidden="true">#</a> 3，搭建准备工作</h2><h3 id="_3-1-使用docker启动5台mysql-至少要5台哦" tabindex="-1"><a class="header-anchor" href="#_3-1-使用docker启动5台mysql-至少要5台哦" aria-hidden="true">#</a> 3.1，使用docker启动5台Mysql[至少要5台哦]</h3><table><thead><tr><th>名称</th><th>Ip</th><th>Port</th></tr></thead><tbody><tr><td>M1</td><td>192.168.149.128</td><td>3307</td></tr><tr><td>M1S1</td><td>192.168.149.128</td><td>3308</td></tr><tr><td>M1S2</td><td>192.168.149.128</td><td>3309</td></tr><tr><td>M2</td><td>192.168.149.128</td><td>3310</td></tr><tr><td>M2S1</td><td>192.168.149.128</td><td>3311</td></tr></tbody></table><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>前面主从已启动了两个，所以只用启动三个就够了
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#docker run <span class="token operator">--</span>name <span class="token constant">M1</span> <span class="token operator">-</span>p <span class="token number">3307</span><span class="token operator">:</span><span class="token number">3306</span> <span class="token operator">-</span>e <span class="token constant">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span>  <span class="token operator">-</span>d mysql<span class="token operator">:</span><span class="token number">5.7</span>
#docker run <span class="token operator">--</span>name <span class="token constant">M1S1</span> <span class="token operator">-</span>p <span class="token number">3308</span><span class="token operator">:</span><span class="token number">3306</span> <span class="token operator">-</span>e <span class="token constant">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span>  <span class="token operator">-</span>d mysql<span class="token operator">:</span><span class="token number">5.7</span>
docker run <span class="token operator">--</span>name <span class="token constant">M1S2</span> <span class="token operator">-</span>p <span class="token number">3309</span><span class="token operator">:</span><span class="token number">3306</span> <span class="token operator">-</span>e <span class="token constant">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span>  <span class="token operator">-</span>d mysql<span class="token operator">:</span><span class="token number">5.7</span>
docker run <span class="token operator">--</span>name <span class="token constant">M2</span> <span class="token operator">-</span>p <span class="token number">3310</span><span class="token operator">:</span><span class="token number">3306</span> <span class="token operator">-</span>e <span class="token constant">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span>  <span class="token operator">-</span>d mysql<span class="token operator">:</span><span class="token number">5.7</span>
docker run <span class="token operator">--</span>name <span class="token constant">M2S1</span> <span class="token operator">-</span>p <span class="token number">3311</span><span class="token operator">:</span><span class="token number">3306</span> <span class="token operator">-</span>e <span class="token constant">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span>  <span class="token operator">-</span>d mysql<span class="token operator">:</span><span class="token number">5.7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.2363060177009007.png" alt="image"></p><h3 id="_3-2-配置文件的修改" tabindex="-1"><a class="header-anchor" href="#_3-2-配置文件的修改" aria-hidden="true">#</a> 3.2，配置文件的修改</h3><p>先准备5 个配置文件</p><p><img src="https://picgo.xingenhi.cn//typora0.6285332384111901.png" alt="image"></p><p>分别修改 因为在上面的主从里面已有两个配置文件，所以只用创建三个就够了m1s2.cnf m2.cnf m2s1.cnf</p><p>M2 需要添加一个配置项：</p><p>M2 会从M1 复制数据，但是M2 从M1复制的数据，不会记录下来，则M2S1 里面没有数据！</p><p>我们需要打开M2的级联复制功能，让M2 也能记录从M1 里面复制的数据</p><p>最后结果</p><p><img src="https://picgo.xingenhi.cn//typora0.6929581440654712.png" alt="image"></p><p>配置文件修改好了后，复制到容器里面，并且重启容器！</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>docker cp m1<span class="token punctuation">.</span>cnf <span class="token constant">M1</span><span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span>docker<span class="token punctuation">.</span>cnf
docker cp m1s1<span class="token punctuation">.</span>cnf <span class="token constant">M1S1</span><span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span>docker<span class="token punctuation">.</span>cnf
docker cp m1s2<span class="token punctuation">.</span>cnf <span class="token constant">M1S2</span><span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span>docker<span class="token punctuation">.</span>cnf
docker cp m2<span class="token punctuation">.</span>cnf <span class="token constant">M2</span><span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span>docker<span class="token punctuation">.</span>cnf
docker cp m2s1<span class="token punctuation">.</span>cnf <span class="token constant">M2S1</span><span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span>docker<span class="token punctuation">.</span>cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-重启新建的三个容器" tabindex="-1"><a class="header-anchor" href="#_3-3-重启新建的三个容器" aria-hidden="true">#</a> 3.3，重启新建的三个容器</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>docker restart <span class="token constant">M1S2</span> <span class="token constant">M2</span> <span class="token constant">M2S1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-进入容器执行sql" tabindex="-1"><a class="header-anchor" href="#_4-进入容器执行sql" aria-hidden="true">#</a> 4，进入容器执行SQL</h2><p>在搭建mysql的集群时，先清空所有机器里面的数据</p><p>现在有数据的时：M1 M1S1,只需要清空M1的数据，就都没有了</p><p>将之前新建的db1 db2 删除就ok</p><p><img src="https://picgo.xingenhi.cn//typora0.06904232996576617.png" alt="image"></p><h3 id="_4-1-m1修改" tabindex="-1"><a class="header-anchor" href="#_4-1-m1修改" aria-hidden="true">#</a> 4.1，M1修改</h3><p>不动</p><h3 id="_4-2-m1s1修改" tabindex="-1"><a class="header-anchor" href="#_4-2-m1s1修改" aria-hidden="true">#</a> 4.2，M1S1修改</h3><p>不动</p><h3 id="_4-3-m1s2修改-从机" tabindex="-1"><a class="header-anchor" href="#_4-3-m1s2修改-从机" aria-hidden="true">#</a> 4.3，M1S2修改（从机）</h3><p>给他设置一个主机就ok</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>docker exec <span class="token operator">-</span>it <span class="token constant">M1S2</span> bash
mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p123456
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.04159863084515866.png" alt="image"></p><p>关联主机</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>change master <span class="token keyword">to</span> <span class="token namespace">master_host</span><span class="token operator">=</span><span class="token string">&quot;192.168.40.137&quot;</span><span class="token punctuation">,</span>master_port<span class="token operator">=</span><span class="token number">3307</span><span class="token punctuation">,</span>master_user<span class="token operator">=</span><span class="token string">&quot;rep&quot;</span><span class="token punctuation">,</span>master_password<span class="token operator">=</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>master_log_file<span class="token operator">=</span><span class="token string">&quot;master.000001&quot;</span><span class="token punctuation">,</span>master_log_pos<span class="token operator">=</span><span class="token number">1308</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>启动主从</p><p>start slave ;</p><p>查看状态</p><p>show slave status \\G;</p><p><img src="https://picgo.xingenhi.cn//typora0.9342383124363877.png" alt="image"></p><h3 id="_4-4-m2修改" tabindex="-1"><a class="header-anchor" href="#_4-4-m2修改" aria-hidden="true">#</a> 4.4，M2修改</h3><p>进入M2使用Root登陆</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>docker exec -it M2 bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>mysql -uroot -p123456
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1 新建用户</p><p>create user &#39;rep1&#39;@&#39;%&#39; identified by &#39;123456&#39;;</p><p>2 给用户授权</p><p>grant replication slave on *.* to &#39;rep1&#39;@&#39;%&#39;;</p><p>3 刷新权限</p><p>flush privileges;</p><p>4 使用新的用户尝试登录</p><p><img src="https://picgo.xingenhi.cn//typora0.9723233128316344.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.4689781186359879.png" alt="image"></p><p>M2 做为M1的从机需要执行的sql：（登录m2时要使用root用户）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>change master <span class="token keyword">to</span> <span class="token namespace">master_host</span><span class="token operator">=</span><span class="token string">&quot;192.168.40.137&quot;</span><span class="token punctuation">,</span>master_port<span class="token operator">=</span><span class="token number">3307</span><span class="token punctuation">,</span>master_user<span class="token operator">=</span><span class="token string">&quot;rep&quot;</span><span class="token punctuation">,</span>master_password<span class="token operator">=</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>master_log_file<span class="token operator">=</span><span class="token string">&quot;master.000001&quot;</span><span class="token punctuation">,</span>master_log_pos<span class="token operator">=</span><span class="token number">1308</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>start slave ;</p><p>show slave status \\G;</p><p><img src="https://picgo.xingenhi.cn//typora0.5016470373821135.png" alt="image"></p><h3 id="_4-5-m2s1修改" tabindex="-1"><a class="header-anchor" href="#_4-5-m2s1修改" aria-hidden="true">#</a> 4.5，M2S1修改</h3><p>进入容器</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>docker exec -it M2S1 bash
mysql -uroot -p123456
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.7141887041544202.png" alt="image"></p><p>M2S1 是M2的从机，执行的sql</p><p>进入M2查看pos</p><p><img src="https://picgo.xingenhi.cn//typora0.237508877357906.png" alt="image"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>change master <span class="token keyword">to</span> <span class="token namespace">master_host</span><span class="token operator">=</span><span class="token string">&quot;192.168.40.137&quot;</span><span class="token punctuation">,</span>master_port<span class="token operator">=</span><span class="token number">3310</span><span class="token punctuation">,</span>master_user<span class="token operator">=</span><span class="token string">&quot;rep1&quot;</span><span class="token punctuation">,</span>master_password<span class="token operator">=</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>master_log_file<span class="token operator">=</span><span class="token string">&quot;master.000001&quot;</span><span class="token punctuation">,</span>master_log_pos<span class="token operator">=</span><span class="token number">747</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>start slave ;</p><p><img src="https://picgo.xingenhi.cn//typora0.04283926043040295.png" alt="image"></p><p>show slave status \\G;</p><p><img src="https://picgo.xingenhi.cn//typora0.5344167669733009.png" alt="image"></p><h2 id="_5-验证集群是否成功" tabindex="-1"><a class="header-anchor" href="#_5-验证集群是否成功" aria-hidden="true">#</a> 5，验证集群是否成功</h2><p>使用工具连接上所有的mysql</p><p><img src="https://picgo.xingenhi.cn//typora0.6791155451708132.png" alt="image"></p><p>往M1 写数据 看 M2S1</p><p>在M1 新建数据库</p><p>观察M2S1</p><p>往M1 写数据，看M1S1</p><p><img src="https://picgo.xingenhi.cn//typora0.668947383987694.png" alt="image"></p><h1 id="_04【掌握】mycat的安装" tabindex="-1"><a class="header-anchor" href="#_04【掌握】mycat的安装" aria-hidden="true">#</a> 04【掌握】mycat的安装</h1><h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1，前言</h2><p>使用mycat要安装JDK.不会的去看Linux里面的安装JDK的知识点，这是不再做说明</p><p>也可以直接使用yum install java-1.7.0-openjdk 因为mycat 基于jdk1.7开发的，所有最好安装jdk1.7的版本</p>`,244),M=a("strong",null,"重要说明",-1),S={href:"http://dl.mycat.io/1.6-RELEASE/",target:"_blank",rel:"noopener noreferrer"},L=a("strong",null,"的版本是基于jdk1.7开发的，所在要安装JDK1.7",-1),E={href:"http://dl.mycat.io/1.6.7.1/",target:"_blank",rel:"noopener noreferrer"},D=a("strong",null,"更新成了JDK1.8所以要安装JDK1.8下面的教程是使用JDK1.8",-1),T=a("h2",{id:"_2-下载压缩包或者使用wget命令",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_2-下载压缩包或者使用wget命令","aria-hidden":"true"},"#"),n(" 2，下载压缩包或者使用wget命令")],-1),R={href:"http://www.mycat.io/",target:"_blank",rel:"noopener noreferrer"},A=t('<p><img src="https://picgo.xingenhi.cn//typora0.24249844657676659.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.6522645046139941.png" alt="image"></p><h2 id="_3-上传到linux并解压压缩包" tabindex="-1"><a class="header-anchor" href="#_3-上传到linux并解压压缩包" aria-hidden="true">#</a> 3，上传到Linux并解压压缩包</h2><p>在linux里面创建目录</p><p><img src="https://picgo.xingenhi.cn//typora0.060887073663296064.png" alt="image"></p><p>使用命令下载【我这里选择直接上传】</p>',6),j={href:"http://dl.mycat.io/1.6.7.1/Mycat-server-1.6.7.1-release-20190627191042-linux.tar.gz",target:"_blank",rel:"noopener noreferrer"},N=t(`<p><img src="https://picgo.xingenhi.cn//typora0.8740863154107305.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.15368168031073914.png" alt="image"></p><p>解压</p><p><img src="https://picgo.xingenhi.cn//typora0.4709211945618103.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.7680221767727071.png" alt="image"></p><p>移动到usr/local/</p><p><img src="https://picgo.xingenhi.cn//typora0.7026963016466825.png" alt="image"></p><hr><h2 id="_4-mycat的目录结构" tabindex="-1"><a class="header-anchor" href="#_4-mycat的目录结构" aria-hidden="true">#</a> 4，Mycat的目录结构</h2><p><img src="https://picgo.xingenhi.cn//typora0.3028752832863012.png" alt="image"></p><p>bin 执行命令的目录</p><p>conf 配置文件</p><p>lib 依赖包</p><p>logs 日志包</p><h2 id="_5-启动mycat" tabindex="-1"><a class="header-anchor" href="#_5-启动mycat" aria-hidden="true">#</a> 5，启动Mycat</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>cd bin <span class="token punctuation">.</span>/mycat start<span class="token operator">|</span>restart<span class="token operator">|</span>stop<span class="token operator">|</span>status<span class="token operator">|</span>console
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.5436247831561174.png" alt="image"></p><p>如果启动不了查看自己的JDK是不是1.8的</p><p>查看logs/wrapper.log文档看错</p><p><img src="https://picgo.xingenhi.cn//typora0.16067391901379544.png" alt="image"></p><p>以上的内存不足的问修改conf/wrapper.conf</p><p><img src="https://picgo.xingenhi.cn//typora0.15610061114947033.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.22555118956988804.png" alt="image"></p><p>如果换成512M还不行，请换成256再启动</p><h2 id="_6-连接mycat" tabindex="-1"><a class="header-anchor" href="#_6-连接mycat" aria-hidden="true">#</a> 6，连接Mycat</h2><p>我们在外面看Mycat，认为Mycat 就是一个Mysql，怎么连接Mysql？</p><p>1 Navicat for MySQL 对Mycat的支持查询</p><p>2 SqlYog 较好</p><p><img src="https://picgo.xingenhi.cn//typora0.6114648609565642.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.24842823925035926.png" alt="image"></p><p>这是因为Mycat没有正常启动</p><p>如果后面的error:138 是因为8066的端口没有放行</p><p>修改/etc/my.conf</p><p><img src="https://picgo.xingenhi.cn//typora0.29596963106925944.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.46316993437761517.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.3100093651493266.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.2528738390540868.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.010559549440678523.png" alt="image"></p><p>用户名为root</p><p>密码为123456</p><p>可以上conf/server.xml里面设置</p><h1 id="_05【掌握】mycat名词解释" tabindex="-1"><a class="header-anchor" href="#_05【掌握】mycat名词解释" aria-hidden="true">#</a> 05【掌握】mycat名词解释</h1><h3 id="_1-逻辑库" tabindex="-1"><a class="header-anchor" href="#_1-逻辑库" aria-hidden="true">#</a> 1，逻辑库</h3><p>对实际应用来说，并不需要知道中间件的存在，业务开发人员只需要知道数据库的概念，所以数据库中间件可以被看做是一个或多个数据库集群构成的逻辑库。</p><p>如图一中，在MYCAT服务区中的TESTDB库，只是逻辑上存在的数据库，真正的数据来源还是来源MYSQL服务区中的两台实际的Mysql db实例。</p><p>在Mycat中逻辑库在{MYCAT_HOME}/conf/schema.xml 用 标签定义。如图：</p><p><img src="https://picgo.xingenhi.cn//typora0.812002525220575.png" alt="image"></p><hr><h2 id="_2-逻辑表" tabindex="-1"><a class="header-anchor" href="#_2-逻辑表" aria-hidden="true">#</a> 2，逻辑表</h2><p>既然有逻辑库，肯定将会存在逻辑表，分布式数据库中，对应用来说，读写数据的表就是逻辑表。</p><p>逻辑表的数据来源，可以是数据进行切分后，分布在一个或多个分片库中，针对不同的数据分布和管理特点，我们将逻辑表又分为分片表、全局表、全局表、ER表、非分片表五种逻辑表类型。在schema.xml使用标签对逻辑表进行定义。如图</p><p><img src="https://picgo.xingenhi.cn//typora0.5828847621713665.png" alt="image"></p><hr><h2 id="_3-分片表" tabindex="-1"><a class="header-anchor" href="#_3-分片表" aria-hidden="true">#</a> 3，分片表</h2><pre><code>    是指那些原有的很大数据的表，需要切分到多个表，这样，每个分片都有表的一部分数据，所有分片数据的合集构成了完整的表数据，如图一种中MYCAT服务区的users表即是分片表，通过userID字段取模的方式进行数据的水平切分。
</code></pre><p>如图中用户（company）表：</p><p><img src="https://picgo.xingenhi.cn//typora0.32510189195259875.png" alt="image"></p><h2 id="_4-分片规则" tabindex="-1"><a class="header-anchor" href="#_4-分片规则" aria-hidden="true">#</a> 4，分片规则</h2><p>将大数据的表，切分到多个数据分片的策略。如图三中rule=&quot;mod-userID-long&quot;,名字为mod-userID-long引用的详细规则，将在MYCAT的rule.xml中（{MYCAT_HOME}/conf/rule.xml）中进行定义，具体定义规则如图：</p><p><img src="https://picgo.xingenhi.cn//typora0.6444517354481981.png" alt="image"></p><p>分片规则Mycat中内置了很多种，比如按时间、按自定义数字范围、十进制取模、程序指定，字符串Hash，一致性Hash等等，总体可将这些分片规则分为离散型和连续型两种分片规则。</p><p>离散型分片规则数据分布均衡，对数据的处理并发能力强，但是对于分片的扩缩容存在较大的挑战。连续性分片数据分布较集中，更符合业务特性，但是对数据的处理并发能力受限数据的分布，分片的扩缩容有更好的支持。</p><h2 id="_5-全局表" tabindex="-1"><a class="header-anchor" href="#_5-全局表" aria-hidden="true">#</a> 5，全局表</h2><p>一个真实的业务系统中，往往存在大量的类似数据字典表的表，数据字典表具有以下几个特性：</p><p>• 数据变动不频繁；</p><p>• 数据规模不大，数据量在十万以内；</p><p>• 存在跟其他表（特别是分片表）有一点的关联查询要求。</p><p>为了解决表与表的join查询，Mycat提倡大家将具有上诉特点的表通过数据冗余的方式（全局表的定义）进行解决，即所有的分片都有一份数据的拷贝。通过MYCAT对这样的表进行数据的操作时，数据的修改，新增，删除时，所有的分片数据都将受到影响。</p><p>设置方式非常简单如下图</p><p><img src="https://picgo.xingenhi.cn//typora0.47923650485997377.png" alt="image"></p><h2 id="_6-er表-一对多-多对一" tabindex="-1"><a class="header-anchor" href="#_6-er表-一对多-多对一" aria-hidden="true">#</a> 6，ER表(一对多，多对一)</h2><p>关系型数据库是基于实体关系模型（Entity-Relationship Model)之上，通过其描述了真实世界中事物与关系，Mycat 中的 ER 表即是来源于此。</p><p>根据这一思路，提出了基于 E-R 关系的数据分片策略，子表的记录与所关联的父表记录存放在同一个数据分片上，即子表依赖于父表，通过表分组（Table Group）保证数据 Join 不会跨库操作。</p><p>这样一种表分组的设计方式是解决跨分片数据 join 的一种很好的思路，也是数据切分规划的重要一条规则。ER表中在schema.xml中使用标签进行描述和定义</p><p>如图</p><p><img src="https://picgo.xingenhi.cn//typora0.4320070368333737.png" alt="image"></p><h2 id="_7-非分片表" tabindex="-1"><a class="header-anchor" href="#_7-非分片表" aria-hidden="true">#</a> 7，非分片表</h2><p>一个数据库中并不是所有的表都很大，某些表是可以不用进行切分的，非分片是相对分片表来说的，就是那些不需要进行数据切分的表。在schema.xml中具体的定义，可参见图七：</p><p><img src="https://picgo.xingenhi.cn//typora0.5745741577526841.png" alt="image"></p><h2 id="_8-分片节点" tabindex="-1"><a class="header-anchor" href="#_8-分片节点" aria-hidden="true">#</a> 8，分片节点</h2><p>大数据表进行数据切分后，每个表分片所在的数据库就是分片节点，狭义的理解可以认为一个DB实例就是一个节点，在schema.xml中使用进行分片节点的定义如图八：</p><p><img src="https://picgo.xingenhi.cn//typora0.6480819790713366.png" alt="image"></p><h2 id="_9-节点主机" tabindex="-1"><a class="header-anchor" href="#_9-节点主机" aria-hidden="true">#</a> 9，节点主机</h2><p>数据切分后，每个分片节点（dataNode）不一定都会独占一台机器，同一机器上面可以有多个分片数据库，这样一个或多个分片节点（dataNode）所在的机器就是节点主机,为了规避单节点主机并发数限制。</p><p>尽量将读写压力高的分片节点（dataNode）均衡的放在不同的节点主机，在schema.xml中使用进行分片节点的定义如图</p><p><img src="https://picgo.xingenhi.cn//typora0.5670265335030783.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.6914969518053568.png" alt="image"></p><h1 id="_06【掌握】mycat-server-xml配置" tabindex="-1"><a class="header-anchor" href="#_06【掌握】mycat-server-xml配置" aria-hidden="true">#</a> 06【掌握】mycat server.xml配置</h1><h2 id="_1-找到conf-server-xml" tabindex="-1"><a class="header-anchor" href="#_1-找到conf-server-xml" aria-hidden="true">#</a> 1，找到conf/server.xml</h2><p><img src="https://picgo.xingenhi.cn//typora0.013707951690725754.png" alt="image"></p><h2 id="_2-访问端口的配置" tabindex="-1"><a class="header-anchor" href="#_2-访问端口的配置" aria-hidden="true">#</a> 2，访问端口的配置</h2><p><img src="https://picgo.xingenhi.cn//typora0.15281246308099924.png" alt="image"></p><h2 id="_3-黑白名单的配置" tabindex="-1"><a class="header-anchor" href="#_3-黑白名单的配置" aria-hidden="true">#</a> 3，黑白名单的配置</h2><p><img src="https://picgo.xingenhi.cn//typora0.3211462819120763.png" alt="image"></p><h2 id="_4-默认账号的配置" tabindex="-1"><a class="header-anchor" href="#_4-默认账号的配置" aria-hidden="true">#</a> 4，默认账号的配置</h2><p><img src="https://picgo.xingenhi.cn//typora0.9819594634998581.png" alt="image"></p><h2 id="_5-自定义账号的配置" tabindex="-1"><a class="header-anchor" href="#_5-自定义账号的配置" aria-hidden="true">#</a> 5，自定义账号的配置</h2><p><img src="https://picgo.xingenhi.cn//typora0.3928855923374207.png" alt="image"></p><h1 id="_07【掌握】mycat简单配置之schema" tabindex="-1"><a class="header-anchor" href="#_07【掌握】mycat简单配置之schema" aria-hidden="true">#</a> 07【掌握】mycat简单配置之schema</h1><h2 id="_1-找到conf-schema-xml并备份" tabindex="-1"><a class="header-anchor" href="#_1-找到conf-schema-xml并备份" aria-hidden="true">#</a> 1，找到conf/schema.xml并备份</h2><p><img src="https://picgo.xingenhi.cn//typora0.318982044676872.png" alt="image"></p><h2 id="_2-配置虚拟表table-在schema里面" tabindex="-1"><a class="header-anchor" href="#_2-配置虚拟表table-在schema里面" aria-hidden="true">#</a> 2，配置虚拟表table[在schema里面]</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>schema name<span class="token operator">=</span><span class="token string">&quot;TESTDB&quot;</span> checkSQLschema<span class="token operator">=</span><span class="token string">&quot;false&quot;</span> sqlMaxLimit<span class="token operator">=</span><span class="token string">&quot;100&quot;</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>table name<span class="token operator">=</span><span class="token string">&quot;sys_user&quot;</span> primaryKey<span class="token operator">=</span><span class="token string">&quot;ID&quot;</span> dataNode<span class="token operator">=</span><span class="token string">&quot;dn1,dn2,dn3&quot;</span> rule<span class="token operator">=</span><span class="token string">&quot;sharding-by-intfile&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>schema<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-配置数据节点datanode" tabindex="-1"><a class="header-anchor" href="#_3-配置数据节点datanode" aria-hidden="true">#</a> 3，配置数据节点dataNode</h2><p><img src="https://picgo.xingenhi.cn//typora0.45740967211703715.png" alt="image"></p><p>name 节点名称</p><p>dataHost 主机名</p><p>database 数据库名</p><h2 id="_4-配置节点主机datahost" tabindex="-1"><a class="header-anchor" href="#_4-配置节点主机datahost" aria-hidden="true">#</a> 4，配置节点主机dataHost</h2><p><img src="https://picgo.xingenhi.cn//typora0.7930755629669117.png" alt="image"></p><p>dataHost属性说明</p><p><img src="https://picgo.xingenhi.cn//typora0.7108078119831579.png" alt="image"></p><ol><li>name 唯一标识dataHost 标签，供上层的标签使用。</li><li>maxCon 指定每个读写实例连接池的最大连接。也就是说，标签内嵌套的 writeHost、readHost标签都会使用这个属性的值来实例化出连接池的最大连接数。</li><li>minCon 指定每个读写实例连接池的最小连接，初始化连接池的大小。</li><li>balance 查看文档</li><li>writeType 查看文档</li><li>dbType 查看文档</li><li>dbDriver 查看文档</li></ol><h2 id="_5-修改conf-partition-hash-int-txt" tabindex="-1"><a class="header-anchor" href="#_5-修改conf-partition-hash-int-txt" aria-hidden="true">#</a> 5，修改conf/partition-hash-int.txt</h2><p><img src="https://picgo.xingenhi.cn//typora0.2793396496628809.png" alt="image"></p><h2 id="_6-使用昨天上面配置的1主二从" tabindex="-1"><a class="header-anchor" href="#_6-使用昨天上面配置的1主二从" aria-hidden="true">#</a> 6，使用昨天上面配置的1主二从</h2><p><img src="https://picgo.xingenhi.cn//typora0.46985687874154025.png" alt="image"></p><h2 id="_7-在m1上创建三个数据库db1-db2-db3" tabindex="-1"><a class="header-anchor" href="#_7-在m1上创建三个数据库db1-db2-db3" aria-hidden="true">#</a> 7，在M1上创建三个数据库db1 db2 db3</h2><p><img src="https://picgo.xingenhi.cn//typora0.3773425422140021.png" alt="image"></p><h2 id="_8-启动mycat" tabindex="-1"><a class="header-anchor" href="#_8-启动mycat" aria-hidden="true">#</a> 8，启动mycat</h2><p><img src="https://picgo.xingenhi.cn//typora0.5504326584466032.png" alt="image"></p><p>此时发现表不能查看数据</p><p>这是因为真实的mysql上还没有表</p><h2 id="_9-使用工具连接mycat创建表" tabindex="-1"><a class="header-anchor" href="#_9-使用工具连接mycat创建表" aria-hidden="true">#</a> 9，使用工具连接mycat创建表</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> sys_user<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sharding_id <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.1809860311542897.png" alt="image"></p><h2 id="_10-查看mysql里面的表已经帮我们创建好了" tabindex="-1"><a class="header-anchor" href="#_10-查看mysql里面的表已经帮我们创建好了" aria-hidden="true">#</a> 10，查看mysql里面的表已经帮我们创建好了</h2><p><img src="https://picgo.xingenhi.cn//typora0.6134662862191308.png" alt="image"></p><h2 id="_11-做添加修改删除" tabindex="-1"><a class="header-anchor" href="#_11-做添加修改删除" aria-hidden="true">#</a> 11，做添加修改删除</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">INSERT</span> <span class="token class-name">INTO</span> <span class="token function">sys_user</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>address<span class="token punctuation">,</span>sharding_id<span class="token punctuation">)</span> <span class="token constant">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>&#39;xiaoming<span class="token char">&#39;,&#39;</span>wuhan&#39;<span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">EXPLAIN</span> <span class="token constant">INSERT</span> <span class="token class-name">INTO</span> <span class="token function">sys_user</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>address<span class="token punctuation">,</span>sharding_id<span class="token punctuation">)</span> <span class="token constant">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>&#39;xiaoming<span class="token char">&#39;,&#39;</span>wuhan&#39;<span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token class-name">FROM</span> sys_user<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-相关错" tabindex="-1"><a class="header-anchor" href="#_12-相关错" aria-hidden="true">#</a> 12，相关错</h2><p><img src="https://picgo.xingenhi.cn//typora0.39962958539261356.png" alt="image"></p><p>因为修改了partition-hash-int.txt文件内容之后没有重启动mycat</p><h1 id="_08【掌握】分片详解之枚举" tabindex="-1"><a class="header-anchor" href="#_08【掌握】分片详解之枚举" aria-hidden="true">#</a> 08【掌握】分片详解之枚举</h1><h3 id="分片思路" tabindex="-1"><a class="header-anchor" href="#分片思路" aria-hidden="true">#</a> 分片思路</h3><p>Sys_user -àruleàsharding-by-intfile</p><pre><code>|---rule.xml

       |---
</code></pre><p><img src="https://picgo.xingenhi.cn//typora0.5987459503520465.png" alt="image"></p><p>Columns:代表数据库里面的字段名</p><p>Algorithm：分片算法</p><p>找到</p><p><img src="https://picgo.xingenhi.cn//typora0.09642353856844373.png" alt="image"></p><p>找到partition-hash-int.txt</p><p><img src="https://picgo.xingenhi.cn//typora0.924040367742034.png" alt="image"></p><h3 id="整体逻辑" tabindex="-1"><a class="header-anchor" href="#整体逻辑" aria-hidden="true">#</a> 整体逻辑</h3><p><img src="https://picgo.xingenhi.cn//typora0.2630809092957089.png" alt="image"></p><h2 id="_2-找到conf-rule-xml并备份" tabindex="-1"><a class="header-anchor" href="#_2-找到conf-rule-xml并备份" aria-hidden="true">#</a> 2，找到conf/rule.xml并备份</h2><p><img src="https://picgo.xingenhi.cn//typora0.32154661679786556.png" alt="image"></p><h2 id="_3-枚举路由规则" tabindex="-1"><a class="header-anchor" href="#_3-枚举路由规则" aria-hidden="true">#</a> 3， 枚举路由规则</h2><p>通过在配置文件中配置可能的枚举id，自己配置分片，本规则适用于特定的场景，比如有些业务需要按照省 份或区县来做保存，而全国省份区县固定的，这类业务使用本条规则，配置如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tableRule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sharding-by-intfile<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span><span class="token punctuation">&gt;</span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>columns</span><span class="token punctuation">&gt;</span></span>user_id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>columns</span><span class="token punctuation">&gt;</span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>algorithm</span><span class="token punctuation">&gt;</span></span>hash-int<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>algorithm</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tableRule</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hash-int<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>io.mycat.route.function.PartitionByFileMap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mapFile<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>partition-hash-int.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>type<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>defaultNode<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-partition-hash-int-txt-配置" tabindex="-1"><a class="header-anchor" href="#_4-partition-hash-int-txt-配置" aria-hidden="true">#</a> 4，partition-hash-int.txt 配置：</h2><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>10000=0 
10010=1 
DEFAULT_NODE=1 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面columns 标识将要分片的表字段，algorithm 分片函数， 其中分片函数配置中，mapFile标识配置文件名称，type默认值为0，0 表示Integer，非零表示String， 所有的节点配置都是从0开始，及 0代表节点1</p><p>defaultNode 默认节点:小于 0表示不设置默认节点，大于等于 0表示设置默认节点</p><p>默认节点的作用：枚举分片时，如果碰到不识别的枚举值，就让它路由到默认节点</p><p>如果不配置默认节点（defaultNode值小于0 表示不配置默认节点），碰到 不识别的枚举值就会报错， * like this：can’t find datanode for shardin</p><p>添加数据时给sharding_id字 段值为10000会插入到db1数据库 10010会到db2数据库 以此类推</p><h1 id="_09【掌握】分片详解之取模" tabindex="-1"><a class="header-anchor" href="#_09【掌握】分片详解之取模" aria-hidden="true">#</a> 09【掌握】分片详解之取模</h1><h2 id="_1-找到conf-schema-xml修改" tabindex="-1"><a class="header-anchor" href="#_1-找到conf-schema-xml修改" aria-hidden="true">#</a> 1，找到conf/schema.xml修改</h2><p><img src="https://picgo.xingenhi.cn//typora0.5911581594321814.png" alt="image"></p><h2 id="_2-找到conf-rule-xml并备份-1" tabindex="-1"><a class="header-anchor" href="#_2-找到conf-rule-xml并备份-1" aria-hidden="true">#</a> 2，找到conf/rule.xml并备份</h2><p><img src="https://picgo.xingenhi.cn//typora0.6002655507980406.png" alt="image"></p><h2 id="_3-取模的路由规则" tabindex="-1"><a class="header-anchor" href="#_3-取模的路由规则" aria-hidden="true">#</a> 3， 取模的路由规则</h2><p>和轮询一样，取模有什么好处，有什么坏处？</p><p>优点：利用的写的负载均衡效果，写入速度很快</p><p><strong>缺点：批量写入，失败后事务的回滚有难度！代表写都成功，或都失败</strong></p><p><strong>批量写入：100</strong></p><p><strong>第99 条失败了，执行数据的回滚！</strong></p><p><strong>db1 db2 db3 (跨数据库的回滚，非常难，很耗费性能）</strong></p><p>此规则为对分片字段求摸运算。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tableRule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>leige-mo-rule<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span><span class="token punctuation">&gt;</span></span>
                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>columns</span><span class="token punctuation">&gt;</span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>columns</span><span class="token punctuation">&gt;</span></span>
                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>algorithm</span><span class="token punctuation">&gt;</span></span>leige-mo-rule-hash<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>algorithm</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tableRule</span><span class="token punctuation">&gt;</span></span>

       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>leige-mo-rule-hash<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>io.mycat.route.function.PartitionByMod<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
       <span class="token comment">&lt;!-- 有多个少datanode就配置几 --&gt;</span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置说明： 上面columns 标识将要分片的表字段，algorithm 分片函数， 此种配置非常明确即根据id进行十进制求模预算，相比固定分片hash，此种在批量插入时可能存在批量插入单 事务插入多数据分片，增大事务一致性难度</p><h2 id="_4-测试" tabindex="-1"><a class="header-anchor" href="#_4-测试" aria-hidden="true">#</a> 4， 测试</h2><h3 id="创建表" tabindex="-1"><a class="header-anchor" href="#创建表" aria-hidden="true">#</a> 创建表</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>CREATE TABLE sys_dept(
  id INT PRIMARY KEY ,
deptname VARCHAR(20) NOT NULL
);
EXPLAIN INSERT INTO sys_dept(id,deptname) VALUES(2,&#39;开发3部&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="插入数据测试" tabindex="-1"><a class="header-anchor" href="#插入数据测试" aria-hidden="true">#</a> 插入数据测试</h3><p>当id=1 时 1%3=1 所以数据到db2</p><p>当id=2 时 2%3=2 所以数据到db3</p><p>当id=3 时 3%3=0 所以数据到db1</p><h1 id="_10【掌握】分片详解之auto-sharding-long" tabindex="-1"><a class="header-anchor" href="#_10【掌握】分片详解之auto-sharding-long" aria-hidden="true">#</a> 10【掌握】分片详解之auto-sharding-long</h1><h2 id="_1-找到conf-schema-xml并备份-1" tabindex="-1"><a class="header-anchor" href="#_1-找到conf-schema-xml并备份-1" aria-hidden="true">#</a> 1，找到conf/schema.xml并备份</h2><p><img src="https://picgo.xingenhi.cn//typora0.2894084948408545.png" alt="image"></p><h2 id="_2-找到conf-rule-xml并备份-2" tabindex="-1"><a class="header-anchor" href="#_2-找到conf-rule-xml并备份-2" aria-hidden="true">#</a> 2，找到conf/rule.xml并备份</h2><p><img src="https://picgo.xingenhi.cn//typora0.996695271564526.png" alt="image"></p><hr><h2 id="_3-auto-sharding-long的分区算法" tabindex="-1"><a class="header-anchor" href="#_3-auto-sharding-long的分区算法" aria-hidden="true">#</a> 3，auto-sharding-long的分区算法</h2><p>当数据达到500w 时，才进行分库分表</p><p>db1 的表里面，写满500w，才进第二个里面写数据</p><p>缺点：没有里面写的负载均衡效果</p><p>优点：没有跨区回滚事务的风险</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tableRule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>auto-sharding-long<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>columns</span><span class="token punctuation">&gt;</span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>columns</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>algorithm</span><span class="token punctuation">&gt;</span></span>rang-long<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>algorithm</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tableRule</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rang-long<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>io.mycat.route.function.AutoPartitionByLong<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mapFile<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>autopartition-long.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>autopartition-long.txt文件内容
# range start-end ,data node index
# K=1000,M=10000.
0-500M=0      #0-500W条数据在第一分区 下面依次
500M-1000M=1
1000M-1500M=2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_11【掌握】分片详解之固定分片hash算法" tabindex="-1"><a class="header-anchor" href="#_11【掌握】分片详解之固定分片hash算法" aria-hidden="true">#</a> 11【掌握】分片详解之固定分片hash算法</h1><h2 id="_1-找到conf-schema-xml并备份-2" tabindex="-1"><a class="header-anchor" href="#_1-找到conf-schema-xml并备份-2" aria-hidden="true">#</a> 1，找到conf/schema.xml并备份</h2><p><img src="https://picgo.xingenhi.cn//typora0.6609449760413968.png" alt="image"></p><h2 id="_2-找到conf-rule-xml并备份-3" tabindex="-1"><a class="header-anchor" href="#_2-找到conf-rule-xml并备份-3" aria-hidden="true">#</a> 2，找到conf/rule.xml并备份</h2><p><img src="https://picgo.xingenhi.cn//typora0.806100727905125.png" alt="image"></p><h2 id="_2-固定分片hash算法" tabindex="-1"><a class="header-anchor" href="#_2-固定分片hash算法" aria-hidden="true">#</a> 2，固定分片hash算法</h2><p>本条规则类似于十进制的求模运算，区别在于是二进制的操作,是取id的二进制低10位，即id二进制 。 此算法的优点在于如果按照 10进制取模运算，在连续插入1-10 时候1-10会被分到1-10个分片，增 大了插入的事务控制难度，而此算法根据二进制则可能会分到连续的分片，减少插入事务事务控制难度。</p><p>配置说明： 上面columns 标识将要分片的表字段，algorithm 分片函数， partitionCount 分片个数列表，partitionLength 分片范围列表 分区长度:默认为最大2^n=1024 ,即最大支持1024分区 约束 : count,length两个数组的长度必须是一致的。 1024 = sum((count[i]*length[i])). count 和length两个向量的点积恒等于1024</p><p>用法例子： 本例的分区策略：希望将数据水平分成3 份，前两份各占25%，第三份占50%。（</p><p>故本例非均匀分区） // |&lt;———————1024———————————&gt;|</p><p>/ |&lt;—-256—&gt;|&lt;—-256—&gt;|&lt;———-512————-&gt;|</p><p>| partition0 | partition1 | partition2 | // | 共2份,故count[0]=2 | 共1份，故count[1]=1 | int[] count = new int[] { 2, 1 }; int[] length = new int[] { 256, 512 };</p><p><img src="https://picgo.xingenhi.cn//typora0.017928166367668252.png" alt="image"></p><p>partitionCount分别的数量级</p><p>partitionLength 分别数量级的长度</p><p>以上的配置是2*256+1*512=1024 那么1024就是分区的模 必须有（2+1）个datanode节点</p><h2 id="_3-测试" tabindex="-1"><a class="header-anchor" href="#_3-测试" aria-hidden="true">#</a> 3， 测试</h2><p>将sys_customer 表设计出来，然后把它的分片规则修改为区间内轮询的概念</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> sys_test2<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">,</span>
    testname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插入测试—第一圈</p><p>1-255 dn1</p><p>256-511 dn2</p><p>512-1023 dn3</p><p>插入测试—第二圈</p><p>(1024)-(1024+255) dn1</p><p>(1024+256)-(1024+511) dn2</p><p>(1024+512)-(2047) dn3</p><h1 id="_12【了解】分片详解之字符串id处理" tabindex="-1"><a class="header-anchor" href="#_12【了解】分片详解之字符串id处理" aria-hidden="true">#</a> 12【了解】分片详解之字符串ID处理</h1><h3 id="_1-找到conf-schema-xml并备份-3" tabindex="-1"><a class="header-anchor" href="#_1-找到conf-schema-xml并备份-3" aria-hidden="true">#</a> 1，找到conf/schema.xml并备份</h3><p><img src="https://picgo.xingenhi.cn//typora0.26390225804765244.png" alt="image"></p><h2 id="_2-找到conf-rule-xml并备份-4" tabindex="-1"><a class="header-anchor" href="#_2-找到conf-rule-xml并备份-4" aria-hidden="true">#</a> 2，找到conf/rule.xml并备份</h2><p><img src="https://picgo.xingenhi.cn//typora0.8410055585118495.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.2826025608342971.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.3933322061323828.png" alt="image"></p><h2 id="_3-字符串的id怎么玩" tabindex="-1"><a class="header-anchor" href="#_3-字符串的id怎么玩" aria-hidden="true">#</a> 3，字符串的id怎么玩？</h2><p>只有是字符串，就使用JCH</p><p>将给key 分配给n 个buckets。</p><p>jump Consistent hash：零内存消耗，均匀，快速，简洁，来自Google的一致性哈希算法</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tableRule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jch<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>columns</span><span class="token punctuation">&gt;</span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>columns</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>algorithm</span><span class="token punctuation">&gt;</span></span>jump-consistent-hash<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>algorithm</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tableRule</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.7579543215031549.png" alt="image"></p><p>Hash 算法</p><p>将一个值映射一个区间的某个值上面！</p><p>将很多的字符串我可以平均的分配到 4 个buckets 里面就ok</p><p>Rehash 的过程，所有在选择容器存储时，我们需要预估该容器里面最大的容量值，并且使用负载因子来确定 容器的size。这样的话，我们可以减少rehash的过程</p><p>总结：</p><p>以后只要使用到字符串的id 类型，就使用jch的算法就ok 了</p><h2 id="_4-测试-1" tabindex="-1"><a class="header-anchor" href="#_4-测试-1" aria-hidden="true">#</a> 4，测试</h2><p>注意表的ID必须为字符串</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>#sys_test3
CREATE TABLE sys_test3(
  id VARCHAR(30) PRIMARY KEY ,
testname VARCHAR(20) NOT NULL
);
EXPLAIN INSERT INTO sys_test3(id,testname) VALUES(&#39;aaaaaaaaaaa&#39;,&#39;1111&#39;);
EXPLAIN INSERT INTO sys_test3(id,testname) VALUES(&#39;aa&#39;,&#39;1111&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.6710726956473642.png" alt="image"></p><h1 id="_13【掌握】分片详解之自然月分片" tabindex="-1"><a class="header-anchor" href="#_13【掌握】分片详解之自然月分片" aria-hidden="true">#</a> 13【掌握】分片详解之自然月分片</h1><h2 id="_1-找到conf-rule-xml并备份" tabindex="-1"><a class="header-anchor" href="#_1-找到conf-rule-xml并备份" aria-hidden="true">#</a> 1，找到conf/rule.xml并备份</h2><p><img src="https://picgo.xingenhi.cn//typora0.1481745394647286.png" alt="image"></p><h2 id="_2-配置方法" tabindex="-1"><a class="header-anchor" href="#_2-配置方法" aria-hidden="true">#</a> 2，配置方法</h2><p>按月份列分区 ，每个自然月一个分片，格式 between操作解析的范例。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tableRule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sharding-by-month<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span><span class="token punctuation">&gt;</span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>columns</span><span class="token punctuation">&gt;</span></span>create_time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>columns</span><span class="token punctuation">&gt;</span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>algorithm</span><span class="token punctuation">&gt;</span></span>sharding-by-month<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>algorithm</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tableRule</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sharding-by-month<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.opencloudb.route.function.PartitionByMonth<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dateFormat<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>yyyy-MM-dd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sBeginDate<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2014-01-01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置说明： columns： 分片字段，字符串类型 dateFormat ： 日期字符串格式 sBeginDate ： 开始日期</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>PartitionByMonth partition = new PartitionByMonth();
partition.setDateFormat(&quot;yyyy-MM-dd&quot;); 
partition.setsBeginDate(&quot;2014-01-01&quot;); 
partition.init(); 
Assert.assertEquals(true, 0 == partition.calculate(&quot;2014-01-01&quot;));
Assert.assertEquals(true, 0 == partition.calculate(&quot;2014-01-10&quot;)); 
Assert.assertEquals(true, 0 == partition.calculate(&quot;2014-01-31&quot;)); 
Assert.assertEquals(true, 1 == partition.calculate(&quot;2014-02-01&quot;)); 
Assert.assertEquals(true, 1 == partition.calculate(&quot;2014-02-28&quot;)); 
Assert.assertEquals(true, 2 == partition.calculate(&quot;2014-03-1&quot;)); 
Assert.assertEquals(true, 11 == partition.calculate(&quot;2014-12-31&quot;)); 
Assert.assertEquals(true, 12 == partition.calculate(&quot;2015-01-31&quot;)); 
Assert.assertEquals(true, 23 == partition.calculate(&quot;2015-12-31&quot;)); 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_14【掌握】全局表和普通表的配置和测试" tabindex="-1"><a class="header-anchor" href="#_14【掌握】全局表和普通表的配置和测试" aria-hidden="true">#</a> 14【掌握】全局表和普通表的配置和测试</h1><h2 id="_1-全局表概述" tabindex="-1"><a class="header-anchor" href="#_1-全局表概述" aria-hidden="true">#</a> 1，全局表概述</h2><p>一个真实的业务系统中，往往存在大量的类似字典表的表格，它们与业务表之间可能有关系，这种关系，可以理解为“标签”，而不应理解为通常的“主从关系”，这些表基本上很少变动，可以根据主键 ID进行缓存，下面这张图说明了一个典型的“标签关系”图：</p><p><img src="https://picgo.xingenhi.cn//typoraclip_image0029739d043-0711-4a5b-a536-a315bd4ba832.jpg" alt="image"></p><p>在分片的情况下，当业务表因为规模而进行分片以后，业务表与这些附属的字典表之间的关联，就成了比较棘手的问题，考虑到字典表具有以下几个特性：</p><p>• 变动不频繁</p><p>• 数据量总体变化不大</p><p>• 数据规模不大，很少有超过数十万条记录。</p><p>鉴于此，MyCAT定义了一种特殊的表，称之为“全局表”，全局表具有以下特性：</p><p>• 全局表的插入、更新操作会实时在所有节点上执行，保持各个分片的数据一致性</p><p>• 全局表的查询操作，只从一个节点获取</p><p>• 全局表可以跟任何一个表进行 JOIN操作</p><p>将字典表或者符合字典表特性的一些表定义为全局表，则从另外一个方面，很好的解决了数据 JOIN的难题。</p><p>通过全局表+基于E-R关系的分片策略，MyCAT可以满足80%以上的企业应用开发。</p><h2 id="_2-配置方式" tabindex="-1"><a class="header-anchor" href="#_2-配置方式" aria-hidden="true">#</a> 2，配置方式</h2><p>全局表配置比较简单，不用写Rule规则，如下配置即可：</p><h3 id="修改schema-xml" tabindex="-1"><a class="header-anchor" href="#修改schema-xml" aria-hidden="true">#</a> 修改schema.xml</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>company<span class="token punctuation">&quot;</span></span> <span class="token attr-name">primaryKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ID<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>global<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn1,dn2,dn3<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要注意的是，全局表每个分片节点上都要有运行创建表的 DDL语句。</p><p><img src="https://picgo.xingenhi.cn//typoraclip_image0045ed3b0dd-9951-405b-80fe-616aa3462696.jpg" alt="image"></p><p>测试</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#全局表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> sys_global<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>code<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>
    codename <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">EXPLAIN</span> <span class="token keyword">INSERT</span>   <span class="token keyword">INTO</span> sys_global<span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>code<span class="token punctuation">\`</span></span><span class="token punctuation">,</span>codename<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;sex:1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">INSERT</span>   <span class="token keyword">INTO</span> sys_global<span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>code<span class="token punctuation">\`</span></span><span class="token punctuation">,</span>codename<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;sex:0&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">EXPLAIN</span> <span class="token keyword">UPDATE</span> sys_global <span class="token keyword">SET</span> <span class="token identifier"><span class="token punctuation">\`</span>codename<span class="token punctuation">\`</span></span><span class="token operator">=</span><span class="token string">&#39;汉子&#39;</span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">\`</span>code<span class="token punctuation">\`</span></span><span class="token operator">=</span><span class="token string">&#39;sex:1&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">UPDATE</span> sys_global <span class="token keyword">SET</span> <span class="token identifier"><span class="token punctuation">\`</span>codename<span class="token punctuation">\`</span></span><span class="token operator">=</span><span class="token string">&#39;妹子&#39;</span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">\`</span>code<span class="token punctuation">\`</span></span><span class="token operator">=</span><span class="token string">&#39;sex:0&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sys_global<span class="token punctuation">;</span> <span class="token comment">#全局表的查询是轮询</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>普通表</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sys_global2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">primaryKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ID<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn1,dn2,dn3<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> sys_global2<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>code<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>
    codename <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">INSERT</span>   <span class="token keyword">INTO</span> sys_global2<span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>code<span class="token punctuation">\`</span></span><span class="token punctuation">,</span>codename<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;sex:1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">INSERT</span>   <span class="token keyword">INTO</span> sys_global2<span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>code<span class="token punctuation">\`</span></span><span class="token punctuation">,</span>codename<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;sex:0&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#好像不加全局表，不写路由，好像和全局表是样？</span>
 <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sys_global2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typoraclip_image00603634a1b-1d6a-4e89-b26d-f16005b22d6d.jpg" alt="image"></p><p>说明</p><p>如查一个逻辑表不设置全局，也不设置路由规则，那么默认所有节点都会存数据</p><p>查询时会所以的节点数据全查询出，再汇总，会出现重复数据。</p><h1 id="_15【了解】er表的配置和测试" tabindex="-1"><a class="header-anchor" href="#_15【了解】er表的配置和测试" aria-hidden="true">#</a> 15【了解】ER表的配置和测试</h1><h2 id="_1-er表概述-一对多-多对一" tabindex="-1"><a class="header-anchor" href="#_1-er表概述-一对多-多对一" aria-hidden="true">#</a> 1，ER表概述(一对多，多对一)</h2><p>关系型数据库是基于实体关系模型（Entity-Relationship Model)之上，通过其描述了真实世界中事物与关系，Mycat 中的 ER 表即是来源于此。</p><p>根据这一思路，提出了基于 E-R 关系的数据分片策略，子表的记录与所关联的父表记录存放在同一个数据分片上，即子表依赖于父表，通过表分组（Table Group）保证数据 Join 不会跨库操作。</p><p>这样一种表分组的设计方式是解决跨分片数据 join 的一种很好的思路，也是数据切分规划的重要一条规则。ER表中在schema.xml中使用标签进行描述和定义</p><p>如图</p><p><img src="https://picgo.xingenhi.cn//typoraclip_image002c73835e2-b8e9-403f-ae8d-fbbffc64520c.png" alt="image"></p><h2 id="_1-以上说明" tabindex="-1"><a class="header-anchor" href="#_1-以上说明" aria-hidden="true">#</a> 1， 以上说明</h2><p>Customer 主键id</p><pre><code>|--orders  主键id  customer\\_id映射customer表里面id 

    |--order\\_items  无主键  order\\_id映射orders 里面的主键id
</code></pre><h1 id="_16【掌握】全局id的概述" tabindex="-1"><a class="header-anchor" href="#_16【掌握】全局id的概述" aria-hidden="true">#</a> 16【掌握】全局ID的概述</h1><h2 id="_1-面试题引入" tabindex="-1"><a class="header-anchor" href="#_1-面试题引入" aria-hidden="true">#</a> 1，面试题引入</h2><p>在集群高并发情况下如何保证分布式唯一全局ID生成？</p><hr><h2 id="_2-为什么要全局分布式id" tabindex="-1"><a class="header-anchor" href="#_2-为什么要全局分布式id" aria-hidden="true">#</a> 2，为什么要全局分布式ID</h2><p>在复杂的分布式系统中，需要对大量的数据和消息进行唯一标识</p><p>如在阿里，淘宝，支付，等系统中，数据日渐增长，对数据分库分表后需要有一个唯一ID来标识一条数据或消息;</p><p>还有如美团和饿了吗的骑手ID 商家ID 优惠券ID等等</p><p>从以上可以从出，一个能够生成全局唯一ID的系统是非常必要的</p><hr><h2 id="_3-id生成规则部分硬性要求" tabindex="-1"><a class="header-anchor" href="#_3-id生成规则部分硬性要求" aria-hidden="true">#</a> 3，ID生成规则部分硬性要求</h2><h3 id="_3-1-全局唯一" tabindex="-1"><a class="header-anchor" href="#_3-1-全局唯一" aria-hidden="true">#</a> 3.1，全局唯一：</h3><p>不能出现重复的ID号，这个是最基础的要求</p><h3 id="_3-2-趋势递增" tabindex="-1"><a class="header-anchor" href="#_3-2-趋势递增" aria-hidden="true">#</a> 3.2，趋势递增：</h3><p>在Mysql的InnoDb引擎中使用的是聚集索引，由于多数据的RDBMS使用的是Btree的数据结构来存储索引数据，在主键的选择上面我们应该尽量敷衍有序的主键保存写入性能。</p><h3 id="_3-3-单调递增" tabindex="-1"><a class="header-anchor" href="#_3-3-单调递增" aria-hidden="true">#</a> 3.3，单调递增：</h3><p>保证下一个ID一定大于上一个ID。</p><h3 id="_3-4-信息安全" tabindex="-1"><a class="header-anchor" href="#_3-4-信息安全" aria-hidden="true">#</a> 3.4，信息安全：</h3><p>如果ID是连续的，恶意用户的扒取工作就很容易了，直接按顺序下载指定的URL就行，如果订单号就更危险了，竞争对手可以直接知道我们一天的单量。所以在一些应用场景下，需要ID无规则不规则，让竞争对手不好猜。</p><h3 id="_3-5-含时间戳" tabindex="-1"><a class="header-anchor" href="#_3-5-含时间戳" aria-hidden="true">#</a> 3.5，含时间戳：</h3><p>就可以知道这个分布式 ID在什么时候生成的。</p><hr><h2 id="_4-id生成系统的可用性要求" tabindex="-1"><a class="header-anchor" href="#_4-id生成系统的可用性要求" aria-hidden="true">#</a> 4，ID生成系统的可用性要求</h2><p>1，高可用：发一个获取分布式ID的请求同，服务器要保证100%的情况下给我们创建一个唯一的分布式ID</p><p>2，低延时：毫秒级的生成，如，一毫秒生成4096个</p><p>3，高QPS（Queries-per-second每秒查询率）：</p><hr><h2 id="_5-通用的解决方案" tabindex="-1"><a class="header-anchor" href="#_5-通用的解决方案" aria-hidden="true">#</a> 5，通用的解决方案</h2><h3 id="_5-1-自增id-auto-increment" tabindex="-1"><a class="header-anchor" href="#_5-1-自增id-auto-increment" aria-hidden="true">#</a> 5.1，自增ID-auto_increment</h3><p>使用数据库的自动增长（auto_increment），是比较简单和常见的ID生成方案，数据库内部可以确保生成id的唯一性。</p><p><strong>优点：</strong></p><p>1、数据库自动编号，速度快，而且是增量增长，聚集型主键按顺序存放，对于检索非常有利。</p><p>2、 数字型，占用空间小，易排序，在程序中传递方便。</p><p><strong>缺点：</strong></p><p>1、不支持水平分片架构，水平分片的设计当中，这种方法显然不能保证全局唯一。</p><p>2、对数据库有依赖，每种数据库可能实现不一样，数据库切换时候，涉及到代码的修改，不利于扩展</p><p><strong>结论：</strong></p><p>自增id做主键适用于非分布式架构。</p><hr><h3 id="_5-2-数据库自增主键-replace-into" tabindex="-1"><a class="header-anchor" href="#_5-2-数据库自增主键-replace-into" aria-hidden="true">#</a> 5.2，数据库自增主键-replace into</h3><p>的分布式里面，数据库的自增ID机制的主要原理是：数据库自增ID和mysql数据库的replace into实现。</p><p>replace into跟insert功能类似，不同点在于，replace into首先尝试插入数据列表中，如果发现表中已级的此行数据(根据主键或唯一索引判断)则先删除，再插入。否则直接插入新数据。</p><p>REPLACE INTO 的含义是插入一行记录，如查表中唯一索引的值遇到冲突，则替换老数据。</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>CREATE TABLE t_test(
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>    id BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>    stub CHAR(1) NOT NULL DEFAULT &#39;&#39;,
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>    UNIQUE KEY stub (stub)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>REPLACE INTO t_test(stub) values(&#39;x);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>SELECT LAST_INSERT_ID();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>缺点：单机性能不够，集群添加机器扩容非常麻烦【一句化，并发量大了mysql扛不住】</p><hr><h3 id="_5-3-uuid" tabindex="-1"><a class="header-anchor" href="#_5-3-uuid" aria-hidden="true">#</a> 5.3，UUID</h3><p>UUID（Universally Unique Identifier）的标准形式包含32个16进制的数字，以连字号分为5段，形式为8-4-4-4-12个字符，</p><p>如：941e3b9a-a6a8-43fd-8b74-d0627f12323f</p><p><strong>优点</strong></p><p>性能非常高：本地生成，没有网络消耗</p><p><strong>缺点</strong></p><p>1、不易于存储：UUID太长，16字节128位，通常以36长度的字符串表示，很多场景不适用。</p><p>2、信息不安全：基于MAC地址生成UUID的算法可能会造成MAC地址泄露，这个漏洞曾被用于寻找梅丽莎病毒的制作者位置。</p><p>3、ID作为主键时在特定的环境会存在一些问题，比如需要排序的时候——UUID是无序的。</p><p>4、MySQL官方有明确的建议主键要尽量越短越好，36个字符长度的UUID不符合要求。</p><p>5、对MySQL索引不利：作为数据库主键，在InnoDB引擎下，UUID的无序性可能会引起数据位置频繁变动，严重影响性能。</p><hr><h3 id="_5-4-基于redis生成全局主键" tabindex="-1"><a class="header-anchor" href="#_5-4-基于redis生成全局主键" aria-hidden="true">#</a> 5.4，基于Redis生成全局主键</h3><p>因为Redis是单线程原子操作可以使用incr和incrby来实现</p><p><strong>优点</strong>：并发能力起来了，有点NB了</p><p><strong>缺点</strong>：</p><p>1，代价太大</p><p>2，redis集群扩容会出现ID不连续的问题(步长不好设置)</p><hr><h3 id="_5-5-基于zookeeper生成全局主键" tabindex="-1"><a class="header-anchor" href="#_5-5-基于zookeeper生成全局主键" aria-hidden="true">#</a> 5.5，基于zookeeper生成全局主键</h3><p>原理，使用数据的版本号</p><p>缺点：代价太大</p><hr><h1 id="_17【掌握】mycat全局主键的生成方式" tabindex="-1"><a class="header-anchor" href="#_17【掌握】mycat全局主键的生成方式" aria-hidden="true">#</a> 17【掌握】mycat全局主键的生成方式</h1><h2 id="_1-mycat全局主键方式" tabindex="-1"><a class="header-anchor" href="#_1-mycat全局主键方式" aria-hidden="true">#</a> 1， Mycat全局主键方式</h2><p>Mycat提供的全局主键方式如下：</p><p>1. 本地文件方式：使用服务器本地磁盘文件的方式</p><p>2. 数据库方式：使用数据库的方式【不推荐。要写数据库函数】</p><p>3. 本地时间戳方式：使用时间戳方式</p><p>4. 分布式zookeeper生成ID</p><h2 id="_2-本地文件方式" tabindex="-1"><a class="header-anchor" href="#_2-本地文件方式" aria-hidden="true">#</a> 2，本地文件方式</h2><h3 id="修改conf-server-xml" tabindex="-1"><a class="header-anchor" href="#修改conf-server-xml" aria-hidden="true">#</a> 修改conf/server.xml</h3><p><img src="https://picgo.xingenhi.cn//typoraclip_image00207eb9244-a8da-4b70-808c-c255b5848c77.jpg" alt="image"></p><h3 id="修改conf-schema-xml" tabindex="-1"><a class="header-anchor" href="#修改conf-schema-xml" aria-hidden="true">#</a> 修改conf/schema.xml</h3><p><img src="https://picgo.xingenhi.cn//typoraclip_image0048ee0a617-4b0c-4844-9fe7-b05e9a9ea3b5.jpg" alt="image"></p><h3 id="修改sequence-conf-properties注意名字" tabindex="-1"><a class="header-anchor" href="#修改sequence-conf-properties注意名字" aria-hidden="true">#</a> 修改sequence_conf.properties注意名字</h3><p><img src="https://picgo.xingenhi.cn//typoraclip_image0060fc2f9ea-885d-4e44-b644-cbe1514e045d.jpg" alt="image"></p><h3 id="配置覆盖重启创建表插入测试" tabindex="-1"><a class="header-anchor" href="#配置覆盖重启创建表插入测试" aria-hidden="true">#</a> 配置覆盖重启创建表插入测试</h3><p><img src="https://picgo.xingenhi.cn//typoraclip_image0081339ffd5-abf3-4871-8653-771073dfca27.jpg" alt="image"></p><p>存在问题</p><p>创建表进行数据插入</p><p>优点：本地加载，读取速度较快，配置简单；</p><p>缺点：mycat重新发布时，seq文件需要替换，集群部署无法使用此方式，路由到不同的mycat上无法保证id唯一，使mycat变成了有状态的中间件。</p><hr><h2 id="_3-本地时间戳方式-还行" tabindex="-1"><a class="header-anchor" href="#_3-本地时间戳方式-还行" aria-hidden="true">#</a> 3，本地时间戳方式[还行]</h2><h3 id="修改conf-server-xml-1" tabindex="-1"><a class="header-anchor" href="#修改conf-server-xml-1" aria-hidden="true">#</a> 修改conf/server.xml</h3><p><img src="https://picgo.xingenhi.cn//typoraclip_image01009921a81-b464-4ab8-9dc0-cde081a8c3da.jpg" alt="image"></p><h3 id="修改conf-schema-xml-1" tabindex="-1"><a class="header-anchor" href="#修改conf-schema-xml-1" aria-hidden="true">#</a> 修改conf/schema.xml</h3><p><img src="https://picgo.xingenhi.cn//typoraclip_image01298dc3c56-350b-47f2-af0f-a360c88b15bf.jpg" alt="image"></p><h3 id="修改conf-sequence-time-conf-properties" tabindex="-1"><a class="header-anchor" href="#修改conf-sequence-time-conf-properties" aria-hidden="true">#</a> 修改conf/sequence_time_conf.properties</h3><p>不改</p><h3 id="配置覆盖重启创建表插入测试-1" tabindex="-1"><a class="header-anchor" href="#配置覆盖重启创建表插入测试-1" aria-hidden="true">#</a> 配置覆盖重启创建表插入测试</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> sys_id_local_time<span class="token punctuation">(</span>
  id <span class="token keyword">BIGINT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">,</span>
username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> sys_id_local_time<span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sys_id_local_time<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typoraclip_image014c610b4c2-c082-4bbc-96a4-ddf0fe23ec33.jpg" alt="image"></p><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点" aria-hidden="true">#</a> 优缺点</h3><p>本地时间戳计算方式</p><p>ID=64位二进制（42（毫秒）+5（机器 ID）+5（业务编码）+12（重复累加））</p><p>长度18位，因此下面提示非常重要。</p><p>注意：表字段长度必须大于等于18位</p><p>优点：不存在mycat重新发布影响seq的问题，</p><p>缺点：如果有时间有波动有问题。</p><hr><h2 id="_4-zookeeper方式" tabindex="-1"><a class="header-anchor" href="#_4-zookeeper方式" aria-hidden="true">#</a> 4，zookeeper方式</h2><h3 id="修改conf-server-xml-2" tabindex="-1"><a class="header-anchor" href="#修改conf-server-xml-2" aria-hidden="true">#</a> 修改conf/server.xml</h3><p><img src="https://picgo.xingenhi.cn//typoraclip_image01630989e4c-a475-4272-b5af-601ebeae0282.jpg" alt="image"></p><h3 id="修改conf-schema-xml-2" tabindex="-1"><a class="header-anchor" href="#修改conf-schema-xml-2" aria-hidden="true">#</a> 修改conf/schema.xml</h3><p><img src="https://picgo.xingenhi.cn//typoraclip_image018e0b83624-fa18-48bf-b4af-5fc31df9dcfa.jpg" alt="image"></p><h3 id="启动zookeeper" tabindex="-1"><a class="header-anchor" href="#启动zookeeper" aria-hidden="true">#</a> 启动zookeeper</h3><p><img src="https://picgo.xingenhi.cn//typoraclip_image0206792f30a-0d5e-42d7-8859-ff37921a2153.jpg" alt="image"></p><h3 id="修改conf-myid-properties" tabindex="-1"><a class="header-anchor" href="#修改conf-myid-properties" aria-hidden="true">#</a> 修改conf/myid.properties</h3><p><img src="https://picgo.xingenhi.cn//typoraclip_image022e8813db6-53d7-4dee-89ef-7a0cdd2dc188.jpg" alt="image"></p><h3 id="修改conf-sequence-distributed-conf-properties" tabindex="-1"><a class="header-anchor" href="#修改conf-sequence-distributed-conf-properties" aria-hidden="true">#</a> 修改conf/ sequence_distributed_conf.properties</h3><p><img src="https://picgo.xingenhi.cn//typoraclip_image0245cac2ef7-bccb-419b-9304-26cef4fbbbee.jpg" alt="image"></p><p>INSTANCEID=ZK #代表使用zk</p><p>CLUSTERID=mycat-cluster-1 #与myid.properties中的CLUSTERID设置的值相同</p><h3 id="配置需要使用自增id的sequence-修改sequence-conf-properties文件" tabindex="-1"><a class="header-anchor" href="#配置需要使用自增id的sequence-修改sequence-conf-properties文件" aria-hidden="true">#</a> 配置需要使用自增ID的sequence，修改sequence_conf.properties文件</h3><p>增加一段自己的配置</p><p># self define sequence</p><p>SYS_ZK.HISIDS= #可以不填写</p><p>SYS_ZK.MINID=1 #某线程当前区间内最小值</p><p>SYS_ZK.MAXID=2000 #某线程当前区间内最大值</p><p>SYS_ZK.CURID=0 #某线程当前区间内当前值</p><p><img src="https://picgo.xingenhi.cn//typoraclip_image0262abd7531-a378-4396-a84f-aec209ede60b.jpg" alt="image"></p><h3 id="配置覆盖重启" tabindex="-1"><a class="header-anchor" href="#配置覆盖重启" aria-hidden="true">#</a> 配置覆盖重启</h3><p><img src="https://picgo.xingenhi.cn//typoraclip_image0289b19c80c-7c2a-4b5f-bef7-f848f43260dc.jpg" alt="image"></p><h3 id="创建表插入测试" tabindex="-1"><a class="header-anchor" href="#创建表插入测试" aria-hidden="true">#</a> 创建表插入测试</h3><p><img src="https://picgo.xingenhi.cn//typoraclip_image030c6f839cf-e04f-47fc-9a18-637acfd97384.jpg" alt="image"></p><h1 id="_18【面试】全局主键生成方式-雪花算法" tabindex="-1"><a class="header-anchor" href="#_18【面试】全局主键生成方式-雪花算法" aria-hidden="true">#</a> 18【面试】全局主键生成方式-雪花算法</h1><h2 id="_1-snowflake算法【雪花算法】概述" tabindex="-1"><a class="header-anchor" href="#_1-snowflake算法【雪花算法】概述" aria-hidden="true">#</a> 1，snowflake算法【雪花算法】概述</h2><p>twitter开源分布式生成id算法。</p><p>优点：基本解决了所有问题</p><p>缺点：每个节点时间可能不同，生成id是整体趋势递增的</p><hr><h2 id="_2-算法原理" tabindex="-1"><a class="header-anchor" href="#_2-算法原理" aria-hidden="true">#</a> 2，算法原理</h2><p>snowflake的结构如下(每部分用-分开):</p><p><img src="https://picgo.xingenhi.cn//typoraclip_image0020c369539-7a1e-4820-bc6d-9a1b021563e3.png" alt="image"></p><p>第一位未使用，因为二进制中最高位是符号位同，1表示负数，0表示正数。ID不可能为负数。</p><p>时间戳：41位，最后为2的41次方 大概69.73年</p><p>然后是5位datacenterId和5位workerId(10位的长度最多支持部署1024个节点） [<strong>也可以是3位datacenterid和7位workerid</strong>]</p><p>最后12位是毫秒内的计数（12位的计数顺序号支持每个节点每毫秒产生4096个ID序号）每秒生成409.6万个【可怕】</p><p>一共加起来刚好64位，为一个Long型。(转换成字符串长度为18)</p>`,444),P={href:"https://tool.oschina.net/hexconvert/",target:"_blank",rel:"noopener noreferrer"},C=t(`<p><strong>优点</strong>：</p><p>1、毫秒数在高位，自增序列在低位，整个ID都是趋势递增的。</p><p>2、 不依赖数据库等第三方系统，以服务的方式部署，稳定性更高，生成ID的性能也是非常高的。</p><p>3、可以根据自身业务特性分配bit位，非常灵活。</p><p><strong>缺点</strong>：</p><p>强依赖机器时钟，如果机器上时钟回拨，会导致发号重复或者服务会处于不可用状态。</p><p><strong>结论</strong>：</p><p>适用于大规模分布式架构</p><hr><h2 id="_3-源码" tabindex="-1"><a class="header-anchor" href="#_3-源码" aria-hidden="true">#</a> 3，源码</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/**
 * Twitter_Snowflake&lt;br&gt;
 * SnowFlake的结构如下(每部分用-分开):&lt;br&gt;
 * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 &lt;br&gt;
 * 1位标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0&lt;br&gt;
 * 41位时间截(毫秒级)，注意，41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截)
 * 得到的值），这里的的开始时间截，一般是我们的id生成器开始使用的时间，由我们程序来指定的（如下下面程序IdWorker类的startTime属性）。
 * 41位的时间截，可以使用69年，年T = (1L &lt;&lt; 41) / (1000L * 60 * 60 * 24 * 365) = 69&lt;br&gt;
 * 10位的数据机器位，可以部署在1024个节点，包括5位datacenterId和5位workerId&lt;br&gt;
 * 12位序列，毫秒内的计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生4096个ID序号&lt;br&gt;
 * 加起来刚好64位，为一个Long型。&lt;br&gt;
 * SnowFlake的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞(由数据中心ID和机器ID作区分)，并且效率较高，
 * 经测试，SnowFlake每秒能够产生26万ID左右。
 */</span>
<span class="token keyword">public</span> class SnowflakeIdWorker {

    <span class="token comment">// ==============================Fields===========================================</span>
    <span class="token comment">/** 开始时间截 (2015-01-01) */</span>
    private final long twepoch <span class="token operator">=</span> <span class="token number">1420041600000</span>L<span class="token punctuation">;</span>

    <span class="token comment">/** 机器id所占的位数 */</span>
    private final long workerIdBits <span class="token operator">=</span> <span class="token number">5</span>L<span class="token punctuation">;</span>

    <span class="token comment">/** 数据标识id所占的位数 */</span>
    private final long datacenterIdBits <span class="token operator">=</span> <span class="token number">5</span>L<span class="token punctuation">;</span>

    <span class="token comment">/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span>
    private final long maxWorkerId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span>L <span class="token operator">&lt;&lt;</span> workerIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/** 支持的最大数据标识id，结果是31 */</span>
    private final long maxDatacenterId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span>L <span class="token operator">&lt;&lt;</span> datacenterIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/** 序列在id中占的位数 */</span>
    private final long sequenceBits <span class="token operator">=</span> <span class="token number">12</span>L<span class="token punctuation">;</span>

    <span class="token comment">/** 机器ID向左移12位 */</span>
    private final long workerIdShift <span class="token operator">=</span> sequenceBits<span class="token punctuation">;</span>

    <span class="token comment">/** 数据标识id向左移17位(12+5) */</span>
    private final long datacenterIdShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits<span class="token punctuation">;</span>

    <span class="token comment">/** 时间截向左移22位(5+5+12) */</span>
    private final long timestampLeftShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits <span class="token operator">+</span> datacenterIdBits<span class="token punctuation">;</span>

    <span class="token comment">/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */</span>
    private final long sequenceMask <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span>L <span class="token operator">&lt;&lt;</span> sequenceBits<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/** 工作机器ID(0~31) */</span>
    private long workerId<span class="token punctuation">;</span>

    <span class="token comment">/** 数据中心ID(0~31) */</span>
    private long datacenterId<span class="token punctuation">;</span>

    <span class="token comment">/** 毫秒内序列(0~4095) */</span>
    private long sequence <span class="token operator">=</span> <span class="token number">0</span>L<span class="token punctuation">;</span>

    <span class="token comment">/** 上次生成ID的时间截 */</span>
    private long lastTimestamp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>L<span class="token punctuation">;</span>

    <span class="token comment">//==============================Constructors=====================================</span>
    <span class="token comment">/**
     * 构造函数
     * @param workerId 工作ID (0~31)
     * @param datacenterId 数据中心ID (0~31)
     */</span>
    <span class="token keyword">public</span> SnowflakeIdWorker<span class="token punctuation">(</span>long workerId<span class="token punctuation">,</span> long datacenterId<span class="token punctuation">)</span> {
        <span class="token keyword">if</span> <span class="token punctuation">(</span>workerId <span class="token operator">&gt;</span> maxWorkerId <span class="token operator">||</span> workerId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> {
            throw new IllegalArgumentException<span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;worker Id can&#39;t be greater than %d or less than 0&quot;</span><span class="token punctuation">,</span> maxWorkerId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        }
        <span class="token keyword">if</span> <span class="token punctuation">(</span>datacenterId <span class="token operator">&gt;</span> maxDatacenterId <span class="token operator">||</span> datacenterId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> {
            throw new IllegalArgumentException<span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;datacenter Id can&#39;t be greater than %d or less than 0&quot;</span><span class="token punctuation">,</span> maxDatacenterId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        }
        this<span class="token punctuation">.</span>workerId <span class="token operator">=</span> workerId<span class="token punctuation">;</span>
        this<span class="token punctuation">.</span>datacenterId <span class="token operator">=</span> datacenterId<span class="token punctuation">;</span>
    }

    <span class="token comment">// ==============================Methods==========================================</span>
    <span class="token comment">/**
     * 获得下一个ID (该方法是线程安全的)
     * @return SnowflakeId
     */</span>
    <span class="token keyword">public</span> synchronized long nextId<span class="token punctuation">(</span><span class="token punctuation">)</span> {
        long <span class="token keyword">timestamp</span> <span class="token operator">=</span> timeGen<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">timestamp</span> <span class="token operator">&lt;</span> lastTimestamp<span class="token punctuation">)</span> {
            throw new RuntimeException<span class="token punctuation">(</span>
                    String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span><span class="token punctuation">,</span> lastTimestamp <span class="token operator">-</span> <span class="token keyword">timestamp</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        }

        <span class="token comment">//如果是同一时间生成的，则进行毫秒内序列</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTimestamp <span class="token operator">=</span><span class="token operator">=</span> <span class="token keyword">timestamp</span><span class="token punctuation">)</span> {
            sequence <span class="token operator">=</span> <span class="token punctuation">(</span>sequence <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> sequenceMask<span class="token punctuation">;</span>
            <span class="token comment">//毫秒内序列溢出</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence <span class="token operator">=</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> {
                <span class="token comment">//阻塞到下一个毫秒,获得新的时间戳</span>
                <span class="token keyword">timestamp</span> <span class="token operator">=</span> tilNextMillis<span class="token punctuation">(</span>lastTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            }
        }
        <span class="token comment">//时间戳改变，毫秒内序列重置</span>
        <span class="token keyword">else</span> {
            sequence <span class="token operator">=</span> <span class="token number">0</span>L<span class="token punctuation">;</span>
        }

        <span class="token comment">//上次生成ID的时间截</span>
        lastTimestamp <span class="token operator">=</span> <span class="token keyword">timestamp</span><span class="token punctuation">;</span>

        <span class="token comment">//移位并通过或运算拼到一起组成64位的ID</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">timestamp</span> <span class="token operator">-</span> twepoch<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> timestampLeftShift<span class="token punctuation">)</span> <span class="token comment">//</span>
                <span class="token operator">|</span> <span class="token punctuation">(</span>datacenterId <span class="token operator">&lt;&lt;</span> datacenterIdShift<span class="token punctuation">)</span> <span class="token comment">//</span>
                <span class="token operator">|</span> <span class="token punctuation">(</span>workerId <span class="token operator">&lt;&lt;</span> workerIdShift<span class="token punctuation">)</span> <span class="token comment">//</span>
                <span class="token operator">|</span> sequence<span class="token punctuation">;</span>
    }

    <span class="token comment">/**
     * 阻塞到下一个毫秒，直到获得新的时间戳
     * @param lastTimestamp 上次生成ID的时间截
     * @return 当前时间戳
     */</span>
    protected long tilNextMillis<span class="token punctuation">(</span>long lastTimestamp<span class="token punctuation">)</span> {
        long <span class="token keyword">timestamp</span> <span class="token operator">=</span> timeGen<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">timestamp</span> <span class="token operator">&lt;=</span> lastTimestamp<span class="token punctuation">)</span> {
            <span class="token keyword">timestamp</span> <span class="token operator">=</span> timeGen<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        }
        <span class="token keyword">return</span> <span class="token keyword">timestamp</span><span class="token punctuation">;</span>
    }

    <span class="token comment">/**
     * 返回以毫秒为单位的当前时间
     * @return 当前时间(毫秒)
     */</span>
    protected long timeGen<span class="token punctuation">(</span><span class="token punctuation">)</span> {
        <span class="token keyword">return</span> System<span class="token punctuation">.</span>currentTimeMillis<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    }

    <span class="token comment">//==============================Test=============================================</span>
    <span class="token comment">/** 测试 */</span>
    <span class="token keyword">public</span> static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> {
        SnowflakeIdWorker idWorker <span class="token operator">=</span> new SnowflakeIdWorker<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span> {
            long id <span class="token operator">=</span> idWorker<span class="token punctuation">.</span>nextId<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span><span class="token keyword">out</span><span class="token punctuation">.</span>println<span class="token punctuation">(</span>Long<span class="token punctuation">.</span>toBinaryString<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span><span class="token keyword">out</span><span class="token punctuation">.</span>println<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_4-使用hutool封装" tabindex="-1"><a class="header-anchor" href="#_4-使用hutool封装" aria-hidden="true">#</a> 4，使用Hutool封装</h2>`,13),O={href:"https://github.com/looly/hutool",target:"_blank",rel:"noopener noreferrer"},B=t(`<h3 id="_4-1-引入pom-xml" tabindex="-1"><a class="header-anchor" href="#_4-1-引入pom-xml" aria-hidden="true">#</a> 4.1，引入pom.xml</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code> <span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>cn<span class="token punctuation">.</span>hutool<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>hutool<span class="token operator">-</span><span class="token keyword">all</span><span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token number">5.2</span><span class="token number">.4</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-创建封装类" tabindex="-1"><a class="header-anchor" href="#_4-2-创建封装类" aria-hidden="true">#</a> 4.2，创建封装类</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code> <span class="token comment">/**
 * @program: activemq-code
 * @author: 雷哥
 * @create: 2020-03-25 02:14
 **/</span>
<span class="token variable">@Component</span>
<span class="token variable">@Log4j</span>
<span class="token keyword">public</span> class IdGeneratorSnowflake {
    private long workId<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    private long datacenterId<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    private Snowflake snowflake<span class="token operator">=</span> IdUtil<span class="token punctuation">.</span>createSnowflake<span class="token punctuation">(</span>workId<span class="token punctuation">,</span>datacenterId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">@PostConstruct</span><span class="token comment">//启动项目时加载</span>
    <span class="token keyword">public</span> void init<span class="token punctuation">(</span><span class="token punctuation">)</span>{
        try {
            workId<span class="token operator">=</span> NetUtil<span class="token punctuation">.</span>ipv4ToLong<span class="token punctuation">(</span>NetUtil<span class="token punctuation">.</span>getLocalhostStr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&quot;当前机工的workdId:&quot;</span><span class="token operator">+</span>workId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        }catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span>{
            e<span class="token punctuation">.</span>printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span>warn<span class="token punctuation">(</span><span class="token string">&quot;当前机器的workID获取失败&quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            workId<span class="token operator">=</span>NetUtil<span class="token punctuation">.</span>getLocalhostStr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hashCode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        }
    }
    <span class="token comment">/**
     * 生成Id
     * @return
     */</span>
    <span class="token keyword">public</span> synchronized  long snowflakeId<span class="token punctuation">(</span><span class="token punctuation">)</span>{
        <span class="token keyword">return</span> snowflake<span class="token punctuation">.</span>nextId<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_19【总结】mycat使用总结" tabindex="-1"><a class="header-anchor" href="#_19【总结】mycat使用总结" aria-hidden="true">#</a> 19【总结】mycat使用总结</h1><h2 id="如何使用java连接" tabindex="-1"><a class="header-anchor" href="#如何使用java连接" aria-hidden="true">#</a> 如何使用java连接</h2><p>=============</p><p>配置好mycat这后用法和以前java连接mysql是一样的</p><h2 id="为什么还要使用mysql集群和主从" tabindex="-1"><a class="header-anchor" href="#为什么还要使用mysql集群和主从" aria-hidden="true">#</a> 为什么还要使用mysql集群和主从</h2><p><img src="https://picgo.xingenhi.cn//typoraclip_image0029cac4a2d-7fb6-43b8-8a04-cebfd3fc7ec7.jpg" alt="image"></p>`,10);function U(Q,Y){const s=o("ExternalLinkIcon");return i(),c("div",null,[a("div",r,[d,u,a("p",null,[a("a",h,[n("视频链接"),e(s)])])]),m,a("p",null,[n("更多解释见官网："),a("a",k,[n("http://www.mycat.io/"),e(s)])]),a("p",null,[n("项目地址："),a("a",g,[n("https://github.com/MyCATApache/Mycat-Server"),e(s)])]),v,b,y,_,x,f,q,a("p",null,[n("2：解决表查询的性能问题？log(n)"),a("a",w,[n("https://www.cnblogs.com/glzgc/p/10831877.html"),e(s)])]),I,a("p",null,[M,a("a",S,[n("Mycat-server-1.6-release 版本发布"),e(s)]),L]),a("p",null,[a("a",E,[n("Mycat-server-1.6.7.1-release 版本发布"),e(s)]),n(),D]),T,a("p",null,[a("a",R,[n("http://www.mycat.io/"),e(s)])]),A,a("p",null,[n("wget "),a("a",j,[n("http://dl.mycat.io/1.6.7.1/Mycat-server-1.6.7.1-release-20190627191042-linux.tar.gz"),e(s)])]),N,a("p",null,[a("a",P,[n("https://tool.oschina.net/hexconvert/"),e(s)]),n("可以使用这个进制转化工具测试")]),C,a("p",null,[a("a",O,[n("https://github.com/looly/hutool"),e(s)])]),B])}const K=p(l,[["render",U],["__file","MyCat.html.vue"]]);export{K as default};
