import{_ as s,r,o as t,c as d,a as e,b as i,d as n,e as l}from"./app-f078eaf8.js";const c={},o=l('<h1 id="_01-为什么需要链路追踪" tabindex="-1"><a class="header-anchor" href="#_01-为什么需要链路追踪" aria-hidden="true">#</a> 01-为什么需要链路追踪</h1><h1 id="为什么需要链路追踪" tabindex="-1"><a class="header-anchor" href="#为什么需要链路追踪" aria-hidden="true">#</a> 为什么需要链路追踪</h1><h2 id="本节视频" tabindex="-1"><a class="header-anchor" href="#本节视频" aria-hidden="true">#</a> 本节视频</h2>',3),g={href:"https://www.bilibili.com/video/av40796154/",target:"_blank",rel:"noopener noreferrer"},h=l('<h2 id="什么是链路追踪" tabindex="-1"><a class="header-anchor" href="#什么是链路追踪" aria-hidden="true">#</a> 什么是链路追踪</h2><p>微服务架构是通过业务来划分服务的，使用 REST 调用。对外暴露的一个接口，可能需要很多个服务协同才能完成这个接口功能，如果链路上任何一个服务出现问题或者网络超时，都会形成导致接口调用失败。随着业务的不断扩张，服务之间互相调用会越来越复杂。</p><p><img src="https://picgo.xingenhi.cn//typora2279594-dd72907e82f89fd6.png" alt="image"></p><p>随着服务的越来越多，对调用链的分析会越来越复杂。它们之间的调用关系也许如下：</p><p><img src="https://picgo.xingenhi.cn//typora2279594-4b7d1b6abe595390.png" alt="image"></p><p>面对以上情况，我们就需要一些可以帮助理解系统行为、用于分析性能问题的工具，以便发生故障的时候，能够快速定位和解决问题，这就是所谓的 APM（应用性能管理）。</p><h2 id="什么是-skywalking" tabindex="-1"><a class="header-anchor" href="#什么是-skywalking" aria-hidden="true">#</a> 什么是 SkyWalking</h2><p>目前主要的一些 APM 工具有: Cat、Zipkin、Pinpoint、SkyWalking；Apache SkyWalking 是观察性分析平台和应用性能管理系统。提供分布式追踪、服务网格遥测分析、度量聚合和可视化一体化解决方案。</p><p><img src="https://picgo.xingenhi.cn//typoraLusifer_2019011401370001.jpg" alt="image"></p><ul><li><strong>Skywalking Agent：</strong> 使用 JavaAgent 做字节码植入，无侵入式的收集，并通过 HTTP 或者 gRPC 方式发送数据到 SkyWalking Collector。</li><li><strong>SkyWalking Collector：</strong> 链路数据收集器，对 agent 传过来的数据进行整合分析处理并落入相关的数据存储中。</li><li><strong>Storage：</strong> SkyWalking 的存储，时间更迭，SW 已经开发迭代到了 6.x 版本，在 6.x 版本中支持以 ElasticSearch(支持 6.x)、Mysql、TiDB、H2、作为存储介质进行数据存储。</li><li><strong>UI：</strong> Web 可视化平台，用来展示落地的数据。</li></ul><h2 id="skywalking-功能特性" tabindex="-1"><a class="header-anchor" href="#skywalking-功能特性" aria-hidden="true">#</a> SkyWalking 功能特性</h2><ul><li>多种监控手段，语言探针和服务网格(Service Mesh)</li><li>多语言自动探针，Java，.NET Core 和 Node.JS</li><li>轻量高效，不需要大数据</li><li>模块化，UI、存储、集群管理多种机制可选</li><li>支持告警</li><li>优秀的可视化方案</li></ul><h1 id="_02-skywalking-服务端配置" tabindex="-1"><a class="header-anchor" href="#_02-skywalking-服务端配置" aria-hidden="true">#</a> 02-SkyWalking 服务端配置</h1><h1 id="skywalking-服务端配置" tabindex="-1"><a class="header-anchor" href="#skywalking-服务端配置" aria-hidden="true">#</a> SkyWalking 服务端配置</h1><h2 id="本节视频-1" tabindex="-1"><a class="header-anchor" href="#本节视频-1" aria-hidden="true">#</a> 本节视频</h2>',15),p={href:"https://www.bilibili.com/video/av40796620/",target:"_blank",rel:"noopener noreferrer"},u=l(`<h2 id="基于-docker-安装-elasticsearch" tabindex="-1"><a class="header-anchor" href="#基于-docker-安装-elasticsearch" aria-hidden="true">#</a> 基于 Docker 安装 ElasticSearch</h2><p>在 <strong>为什么需要链路追踪</strong> 章节中介绍过 SkyWalking 存储方案有多种，官方推荐的方案是 ElasticSearch ，所以我们需要先安装 ElasticSearch。</p><h3 id="docker-compose-yml" tabindex="-1"><a class="header-anchor" href="#docker-compose-yml" aria-hidden="true">#</a> docker-compose.yml</h3><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>version: &#39;3.3&#39;
services:
  elasticsearch:
    image: wutang/elasticsearch-shanghai-zone:6.3.2
    container_name: elasticsearch
    restart: always
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      cluster.name: elasticsearch

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>9200</code> 端口号为 SkyWalking 配置 ElasticSearch 所需端口号，<code>cluster.name</code> 为 SkyWalking 配置 ElasticSearch 集群的名称</p><h3 id="测试是否启动成功" tabindex="-1"><a class="header-anchor" href="#测试是否启动成功" aria-hidden="true">#</a> 测试是否启动成功</h3><p>浏览器访问 http://elasticsearchIP:9200/ ，浏览器返回如下信息即表示成功启动</p><p><img src="https://picgo.xingenhi.cn//typoraLusifer_20190114024609.png" alt="image"></p><h2 id="下载并启动-skywalking" tabindex="-1"><a class="header-anchor" href="#下载并启动-skywalking" aria-hidden="true">#</a> 下载并启动 SkyWalking</h2>`,9),v={href:"http://skywalking.apache.org/downloads/",target:"_blank",rel:"noopener noreferrer"},m=l('<p><img src="https://picgo.xingenhi.cn//typoraLusifer_20190114025523.png" alt="image"></p><h3 id="配置-skywalking" tabindex="-1"><a class="header-anchor" href="#配置-skywalking" aria-hidden="true">#</a> 配置 SkyWalking</h3><p>下载完成后解压缩，进入 <code>apache-skywalking-apm-incubating/config</code> 目录并修改 <code>application.yml</code> 配置文件</p><p><img src="https://picgo.xingenhi.cn//typoraLusifer_20190114030006.png" alt="image"></p><p>这里需要做三件事：</p><ul><li>注释 H2 存储方案</li><li>启用 ElasticSearch 存储方案</li><li>修改 ElasticSearch 服务器地址</li></ul><h3 id="启动-skywalking" tabindex="-1"><a class="header-anchor" href="#启动-skywalking" aria-hidden="true">#</a> 启动 SkyWalking</h3><p>修改完配置后，进入 <code>apache-skywalking-apm-incubating\\bin</code> 目录，运行 <code>startup.bat</code> 启动服务端</p><p><img src="https://picgo.xingenhi.cn//typoraLusifer_20190114030813.png" alt="image"></p><p>通过浏览器访问 http://localhost:8080 出现如下界面即表示启动成功</p><p><img src="https://picgo.xingenhi.cn//typoraLusifer_20190114030930.png" alt="image"></p><p>默认的用户名密码为：admin/admin，登录成功后，效果如下图</p><p><img src="https://picgo.xingenhi.cn//typoraLusifer_20190114031040.png" alt="image"></p><h1 id="_03-skywalking-客户端配置" tabindex="-1"><a class="header-anchor" href="#_03-skywalking-客户端配置" aria-hidden="true">#</a> 03-SkyWalking 客户端配置</h1><h2 id="本节视频-2" tabindex="-1"><a class="header-anchor" href="#本节视频-2" aria-hidden="true">#</a> 本节视频</h2>',15),b={href:"https://www.bilibili.com/video/av40797693/",target:"_blank",rel:"noopener noreferrer"},k=e("h2",{id:"java-agent-服务器探针",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#java-agent-服务器探针","aria-hidden":"true"},"#"),i(" Java Agent 服务器探针")],-1),y={href:"https://github.com/apache/incubator-skywalking/blob/master/docs/en/setup/service-agent/java-agent/README.md",target:"_blank",rel:"noopener noreferrer"},f=l(`<ul><li>IDEA 部署探针</li><li>Java 启动方式部署探针（我们是 Spring Boot 应用程序，需要使用 <code>java -jar</code> 的方式启动应用）</li><li>Docker 启动方式部署探针（需要做到一次构建到处运行的持续集成效果，本章节暂不提供解决方案，到后面的实战环节再实现）</li></ul><p>探针文件在 <code>apache-skywalking-apm-incubating/agent</code> 目录下</p><p><img src="https://picgo.xingenhi.cn//typoraLusifer_20190114033410.png" alt="image"></p><h2 id="idea-部署探针" tabindex="-1"><a class="header-anchor" href="#idea-部署探针" aria-hidden="true">#</a> IDEA 部署探针</h2><p>继续之前的案例项目，创建一个名为 <code>hello-spring-cloud-external-skywalking</code> 的目录，并将 <code>agent</code> 整个目录拷贝进来</p><p><img src="https://picgo.xingenhi.cn//typoraLusifer_20190114034146.png" alt="image"></p><p>修改项目的 VM 运行参数，点击菜单栏中的 <code>Run</code> -&gt; <code>EditConfigurations...</code>，此处我们以 <code>nacos-provider</code> 项目为例，修改参数如下</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>-javaagent:D:\\Workspace\\Others\\hello-spring-cloud-alibaba\\hello-spring-cloud-external-skywalking\\agent\\skywalking-agent.jar
-Dskywalking.agent.service_name=nacos-provider
-Dskywalking.collector.backend_service=localhost:11800

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typoraLusifer_20190114034730.png" alt="image"></p><ul><li><code>-javaagent</code>：用于指定探针路径</li><li><code>-Dskywalking.agent.service_name</code>：用于重写 <code>agent/config/agent.config</code> 配置文件中的服务名</li><li><code>-Dskywalking.collector.backend_service</code>：用于重写 <code>agent/config/agent.config</code> 配置文件中的服务地址</li></ul><h2 id="java-启动方式" tabindex="-1"><a class="header-anchor" href="#java-启动方式" aria-hidden="true">#</a> Java 启动方式</h2><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>java -javaagent:/path/to/skywalking-agent/skywalking-agent.jar -Dskywalking.agent.service_name=nacos-provider -Dskywalking.collector.backend_service=localhost:11800 -jar yourApp.jar

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="测试监控" tabindex="-1"><a class="header-anchor" href="#测试监控" aria-hidden="true">#</a> 测试监控</h2><p>启动 <code>nacos-provider</code> 项目，通过观察日志可以发现，已经成功加载探针</p><p><img src="https://picgo.xingenhi.cn//typoraLusifer_20190114035643.png" alt="image"></p><p>访问之前写好的接口 http://localhost:8081/echo/hi 之后再刷新 SkyWalking Web UI，你会发现 Service 与 Endpoint 已经成功检测到了</p><p><img src="https://picgo.xingenhi.cn//typoraLusifer_20190114035917.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typoraLusifer_20190114040024.png" alt="image"></p><p>至此，表示 SkyWalking 链路追踪配置成功</p><h2 id="skywalking-trace-监控" tabindex="-1"><a class="header-anchor" href="#skywalking-trace-监控" aria-hidden="true">#</a> SkyWalking Trace 监控</h2><p>SkyWalking 通过业务调用监控进行依赖分析，提供给我们了服务之间的服务调用拓扑关系、以及针对每个 Endpoint 的 Trace 记录。</p><h3 id="调用链路监控" tabindex="-1"><a class="header-anchor" href="#调用链路监控" aria-hidden="true">#</a> 调用链路监控</h3><p>点击 <code>Trace</code> 菜单，进入追踪页</p><p><img src="https://picgo.xingenhi.cn//typoraLusifer_20190114040606.png" alt="image"></p><p>点击 <code>Trace ID</code> 展开详细信息</p><p><img src="https://picgo.xingenhi.cn//typoraLusifer_20190114040953.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typoraLusifer_20190114041036.png" alt="image"></p><p>上图展示了一次正常的响应，总响应时间为 <code>185ms</code> 共有一个 Span（基本工作单元，表示一次完整的请求，包含响应，即请求并响应）</p><p>Span <code>/echo/{message}</code> 说明如下：</p><ul><li>Duration：响应时间 185 毫秒</li><li>component：组件类型为 SpringMVC</li><li>url：请求地址</li><li>http.method：请求类型</li></ul><h3 id="服务性能指标监控" tabindex="-1"><a class="header-anchor" href="#服务性能指标监控" aria-hidden="true">#</a> 服务性能指标监控</h3><p>点击 <code>Service</code> 菜单，进入服务性能指标监控页</p><p>选择希望监控的服务</p><ul><li><strong>Avg SLA：</strong> 服务可用性（主要是通过请求成功与失败次数来计算）</li><li><strong>CPM：</strong> 每分钟调用次数</li><li><strong>Avg Response Time：</strong> 平均响应时间</li></ul><p>点击 <code>More Server Details...</code> 还可以查看详细信息</p><p><img src="https://picgo.xingenhi.cn//typoraLusifer_20190114043403.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typoraLusifer_2019011404350001.png" alt="image"></p><p>上图中展示了服务在一定时间范围内的相关数据，包括：</p><ul><li>服务可用性指标 SLA</li><li>每分钟平均响应数</li><li>平均响应时间</li><li>服务进程 PID</li><li>服务所在物理机的 IP、Host、OS</li><li>运行时 CPU 使用率</li><li>运行时堆内存使用率</li><li>运行时非堆内存使用率</li><li>GC 情况</li></ul><h1 id="_04-附-maven-assembly-插件" tabindex="-1"><a class="header-anchor" href="#_04-附-maven-assembly-插件" aria-hidden="true">#</a> 04-附：Maven Assembly 插件</h1><h1 id="附-maven-assembly-插件" tabindex="-1"><a class="header-anchor" href="#附-maven-assembly-插件" aria-hidden="true">#</a> 附：Maven Assembly 插件</h1><h2 id="本节视频-3" tabindex="-1"><a class="header-anchor" href="#本节视频-3" aria-hidden="true">#</a> 本节视频</h2>`,42),x={href:"https://www.bilibili.com/video/av40798002/",target:"_blank",rel:"noopener noreferrer"},_=l(`<h2 id="什么是-assembly-plugin" tabindex="-1"><a class="header-anchor" href="#什么是-assembly-plugin" aria-hidden="true">#</a> 什么是 Assembly Plugin</h2><p>Assembly 插件目的是提供一个把工程依赖元素、模块、网站文档等其他文件存放到单个归档文件里。</p><h2 id="assembly-支持的归档文件类型" tabindex="-1"><a class="header-anchor" href="#assembly-支持的归档文件类型" aria-hidden="true">#</a> Assembly 支持的归档文件类型</h2><ul><li>zip</li><li>tar.gz</li><li>tar.bz2</li><li>jar</li><li>dir</li><li>war</li></ul><h2 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤" aria-hidden="true">#</a> 使用步骤</h2><p>此处以将 SkyWalking 探针打包为 <code>tar.gz</code> 为例，为后期持续集成时构建 Docker 镜像做好准备</p><h3 id="pom" tabindex="-1"><a class="header-anchor" href="#pom" aria-hidden="true">#</a> POM</h3><p>在 <code>pom.xml</code> 中增加插件配置</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
            &lt;executions&gt;
                &lt;!-- 配置执行器 --&gt;
                &lt;execution&gt;
                    &lt;id&gt;make-assembly&lt;/id&gt;
                    &lt;!-- 绑定到 package 生命周期阶段上 --&gt;
                    &lt;phase&gt;package&lt;/phase&gt;
                    &lt;goals&gt;
                        &lt;!-- 只运行一次 --&gt;
                        &lt;goal&gt;single&lt;/goal&gt;
                    &lt;/goals&gt;
                    &lt;configuration&gt;
                        &lt;finalName&gt;skywalking&lt;/finalName&gt;
                        &lt;descriptors&gt;
                            &lt;!-- 配置描述文件路径 --&gt;
                            &lt;descriptor&gt;src/main/resources/assembly.xml&lt;/descriptor&gt;
                        &lt;/descriptors&gt;
                    &lt;/configuration&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="assembly-xml" tabindex="-1"><a class="header-anchor" href="#assembly-xml" aria-hidden="true">#</a> assembly.xml</h3><p>创建 <code>src/main/resources/assembly.xml</code> 配置文件</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>&lt;assembly&gt;
    &lt;id&gt;6.0.0-Beta&lt;/id&gt;
    &lt;formats&gt;
        &lt;!-- 打包的文件格式，支持 zip、tar.gz、tar.bz2、jar、dir、war --&gt;
        &lt;format&gt;tar.gz&lt;/format&gt;
    &lt;/formats&gt;
    &lt;!-- tar.gz 压缩包下是否生成和项目名相同的根目录，有需要请设置成 true --&gt;
    &lt;includeBaseDirectory&gt;false&lt;/includeBaseDirectory&gt;
    &lt;dependencySets&gt;
        &lt;dependencySet&gt;
            &lt;!-- 是否把本项目添加到依赖文件夹下，有需要请设置成 true --&gt;
            &lt;useProjectArtifact&gt;false&lt;/useProjectArtifact&gt;
            &lt;outputDirectory&gt;lib&lt;/outputDirectory&gt;
            &lt;!-- 将 scope 为 runtime 的依赖包打包 --&gt;
            &lt;scope&gt;runtime&lt;/scope&gt;
        &lt;/dependencySet&gt;
    &lt;/dependencySets&gt;
    &lt;fileSets&gt;
        &lt;fileSet&gt;
            &lt;!-- 设置需要打包的文件路径 --&gt;
            &lt;directory&gt;agent&lt;/directory&gt;
            &lt;!-- 打包后的输出路径 --&gt;
            &lt;outputDirectory&gt;&lt;/outputDirectory&gt;
        &lt;/fileSet&gt;
    &lt;/fileSets&gt;
&lt;/assembly&gt;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="打包" tabindex="-1"><a class="header-anchor" href="#打包" aria-hidden="true">#</a> 打包</h3><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>mvn clean package
mvn clean install

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>package：会在 target 目录下创建名为 <code>skywalking-6.0.0-Beta.tar.gz</code> 的压缩包</li><li>install：会在本地仓库目录下创建名为 <code>hello-spring-cloud-external-skywalking-1.0.0-SNAPSHOT-6.0.0-Beta.tar.gz</code> 的压缩包</li></ul>`,15);function S(w,P){const a=r("ExternalLinkIcon");return t(),d("div",null,[o,e("ul",null,[e("li",null,[e("a",g,[i("【视频】Spring Cloud Alibaba-SkyWalking-分布式链路追踪"),n(a)])])]),h,e("ul",null,[e("li",null,[e("a",p,[i("【视频】Spring Cloud Alibaba-SkyWalking-服务端配置"),n(a)])])]),u,e("p",null,[i("官方已经为我们准备好了编译过的服务端版本，下载地址为 "),e("a",v,[i("http://skywalking.apache.org/downloads/"),n(a)]),i("，这里我们需要下载 6.x releases 版本")]),m,e("ul",null,[e("li",null,[e("a",b,[i("【视频】Spring Cloud Alibaba-SkyWalking-客户端配置"),n(a)])])]),k,e("p",null,[i("参考官网给出的帮助 "),e("a",y,[i("Setup java agent"),n(a)]),i("，我们需要使用官方提供的探针为我们达到监控的目的，按照实际情况我们需要实现三种部署方式")]),f,e("ul",null,[e("li",null,[e("a",x,[i("【视频】Spring Cloud Alibaba-SkyWalking-Assembly 打包"),n(a)])])]),_])}const W=s(c,[["render",S],["__file","SpringCloudAlibabalianluzhuizong.html.vue"]]);export{W as default};
