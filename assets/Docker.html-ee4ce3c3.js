import{_ as r,r as d,o as c,c as t,a as e,b as a,d as s,e as i}from"./app-f078eaf8.js";const o={},l={class:"custom-container tip"},p=e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8h.01"}),e("path",{d:"M11 12h1v4h1"})])],-1),h=e("p",{class:"custom-container-title"},"TIP",-1),u={href:"https://www.bilibili.com/video/BV1PE411Z7PH",target:"_blank",rel:"noopener noreferrer"},m=i('<h1 id="_01【熟悉】docker简介" tabindex="-1"><a class="header-anchor" href="#_01【熟悉】docker简介" aria-hidden="true">#</a> 01【熟悉】docker简介</h1><h2 id="_1-什么是docker" tabindex="-1"><a class="header-anchor" href="#_1-什么是docker" aria-hidden="true">#</a> 1，什么是docker</h2><p>Docker是一个开项目，诞生于2013年初，最初是dotCloud公司内部的一个业余项目。它基于Google公司推出的Go语言实现。项目后来加入了Linux基金会，遵从了Apache2.0协议，项目代码在GitHub上进行维护。Docker自开源后受到广范的关注和讨论，以至于dotCloud公司后来都改名为Docker Inc。RedHat已经在其RHEL6.5中集中支持Docker;Google也在其PaaS产品中广泛应用。Docker的目标是实现经量级的操作系统虚拟化解决方案。Docker的基础是Linux容器（LXC）等技术。在LXC的基础上Docker进行了进一步的封装，让用户不需要关心容器的管理，使得操作更加简单。用户操作Docker的容器就像操作一个快速轻量级的虚拟机一样简单。</p><p>下图比较了Docker和传统虚拟化方式的不同之处，可见容器是在操作系统层面上实现的虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层现实现</p><p><img src="https://picgo.xingenhi.cn//typoradaa75e7f-a2ee-437a-8553-e296cc261d59.jpg" alt="image"></p><hr><h2 id="_2-docker的设计思想" tabindex="-1"><a class="header-anchor" href="#_2-docker的设计思想" aria-hidden="true">#</a> 2，docker的设计思想</h2><p>Docker的思想来自于集装箱，集装箱解决了什么问题？在一艘大船上，可以把货物规整的摆放起来。并且各种各样的货物被集装箱标准化了，集装箱和集装箱之间不会互相影响。那么我就不需要专门运送水果的船和专门运送化学品的船了。只要这些货物在集装箱里封装的好好的，那我就可以用一艘大船把他们都运走。docker就是类似的理念。现在都流行云计算了，云计算就好比大货轮。docker就是集装箱。</p><ol><li><p>不同的应用程序可能会有不同的应用环境，比如.net开发的网站和php开发的网站依赖的软件就不一样，如果把他们依赖的软件都安装在一个服务器上就要调试很久，而且很麻烦，还会造成一些冲突。比如IIS和Apache访问端口冲突。这个时候你就要隔离.net开发的网站和php开发的网站。常规来讲，我们可以在服务器上创建不同的虚拟机在不同的虚拟机上放置不同的应用，但是虚拟机开销比较高。docker可以实现虚拟机隔离应用环境的功能，并且开销比虚拟机小，小就意味着省钱了。</p></li><li><p>你开发软件的时候用的是Ubuntu，但是运维管理的都是centos，运维在把你的软件从开发环境转移到生产环境的时候就会遇到一些Ubuntu转centos的问题，比如：有个特殊版本的数据库，只有Ubuntu支持，centos不支持，在转移的过程当中运维就得想办法解决这样的问题。这时候要是有docker你就可以把开发环境直接封装转移给运维，运维直接部署你给他的docker就可以了。而且部署速度快。</p></li><li><p>在服务器负载方面，如果你单独开一个虚拟机，那么虚拟机会占用空闲内存的，docker部署的话，这些内存就会利用起来。</p></li></ol><p>​ 总之docker就是集装箱原理。</p><hr><h2 id="_3-为什么要使用docker" tabindex="-1"><a class="header-anchor" href="#_3-为什么要使用docker" aria-hidden="true">#</a> 3，为什么要使用docker</h2><p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。首先，Docker 容器的启动可以在秒级实现，这相比传统的虚拟机方式要快得多。其次，Docker 对系统资源的利用率很高，一台主机上可以同时运行数千个Docker 容器。</p><p>容器除了运行其中应用外，基本不消耗额外的系统资源，使得应用的性能很高，同时系统的开销尽量小。</p><p>传统虚拟机方式运行10 个不同的应用就要起10 个虚拟机，而Docker 只需要启动10 个隔离的应用即可。具体说来，Docker 在如下几个方面具有较大的优势。</p><h3 id="_1-更快速的交付和部署" tabindex="-1"><a class="header-anchor" href="#_1-更快速的交付和部署" aria-hidden="true">#</a> 1，更快速的交付和部署</h3><p>对开发和运维（devop）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。开发者可以使用一个标准的镜像来构建一套开发容器，开发完成之后，运维人员可以直接使用这个容器来部署代码。Docker 可以快速创建容器，快速迭代应用程序，并让整个过程全程可见，使团队中的其他成员更容易理解应用程序是如何创建和工作的。Docker 容器很轻很快！容器的启动时间是秒级的，大量地节约开发、测试、部署的时间.</p><h3 id="_2-更轻松的迁移和扩展" tabindex="-1"><a class="header-anchor" href="#_2-更轻松的迁移和扩展" aria-hidden="true">#</a> 2，更轻松的迁移和扩展</h3><p>Docker 容器几乎可以在任意的平台上运行，包括物理机、虚拟机、公有云、私有云、个人电脑、服务器</p><p>等。这种兼容性可以让用户把一个应用程序从一个平台直接迁移到另外一个。</p><h3 id="_3-更简单的管理" tabindex="-1"><a class="header-anchor" href="#_3-更简单的管理" aria-hidden="true">#</a> 3，更简单的管理</h3><p>使用Docker，只需要小小的修改，就可以替代以往大量的更新工作。所有的修改都以增量的方式被分发和更新，从而实现自动化并且高效的管理。对比虚拟机</p><p><img src="https://picgo.xingenhi.cn//typora212dc76e-0c2d-493d-af45-3765188d8b96.jpg" alt="image"></p><hr><p>3，docker的局限性</p><ol><li>Docker是基于Linux 64bit的，无法在32bit的linux/Windows/unix环境下使用</li><li>LXC是基于cgroup等linux kernel功能的，因此container的guest系统只能是linux base的</li><li>隔离性相比KVM之类的虚拟化方案还是有些欠缺，所有container公用一部分的运行库</li><li>网络管理相对简单，主要是基于namespace隔离</li><li>cgroup的cpu和cpuset提供的cpu功能相比KVM的等虚拟化方案相比难以度量(所以dotcloud主要是按内存收费)</li><li>Docker对disk的管理比较有限</li><li>container随着用户进程的停止而销毁，container中的log等用户数据不便收集</li></ol><hr><h2 id="_4-docker在开发、测试、部署中的定位" tabindex="-1"><a class="header-anchor" href="#_4-docker在开发、测试、部署中的定位" aria-hidden="true">#</a> 4，docker在开发、测试、部署中的定位</h2><h3 id="_1-尝试新软件" tabindex="-1"><a class="header-anchor" href="#_1-尝试新软件" aria-hidden="true">#</a> 1，尝试新软件</h3><p>对开发者而言，每天会催生出的各式各样的新技术都需要尝试，然而开发者却不太可能为他们一一搭建好环境并进行测试。时间非常宝贵，正是得益于 Docker，让我们有</p><p>可能在一条或者几条命令内就搭建完环境。Docker 有一个傻瓜化的获取软件的方法，Docker 后台会自动获得环境镜像并且运行环境。</p><p>并不仅仅是新技术环境搭建用得到 Docker。如果你想快速在你的笔记本上运行一个 MySQL 数据库，或者一个 Redis 消息队列，那么使用 Docker 便可以非常容易地做到。例如 Docker 只需要一条命令便可以运行 MySQL 数据库：docker run -d -p 3306:3306 tutum/mysql。</p><h3 id="_2-进行演示" tabindex="-1"><a class="header-anchor" href="#_2-进行演示" aria-hidden="true">#</a> 2，进行演示</h3><p>工作中自己开发的成果对客户或者别人做一两个演示。搭建演示环境的过程非常麻烦。Docker是演示这些工具的最合理的方式。同时，对于客户来说，可以直接将 Docker镜像提供给他们，而不必去做任何环境配置的工作，工作的效果也会和在他们演示中所看到的一模一样，同时不必担心他们的环境配置会导致我们的产品无法运行。</p><h3 id="_3-避免-我机器上可以运行" tabindex="-1"><a class="header-anchor" href="#_3-避免-我机器上可以运行" aria-hidden="true">#</a> 3，避免“我机器上可以运行”</h3><p>无论是上一篇介绍的企业部署 Docker 还是本文的个人 Docker 用例，都提到了这个情况。因为环境配置不同，很多人在开发中也会遇到这个情况，甚至开发的软件到了测试人员的机器上便不能运行。但这都不是重点。重点是，如果我们有一个可靠的、可分发的标准开发环境，那么我们的开发将不会像现在这么痛苦。Docker 便可以解决这个问题。Docker 镜像并不会因为环境的变化而不能运行，也不会在不同的电脑上有不同的运行结果。可以给测试人员提交含有应用的 Docker 镜像，这样便不再会发生“在我机器上是可以运行的”这种事情，很大程度上减轻了开发人员测试人员互相检查机器环境设置带来的时间成本。</p><h3 id="_4-更好地利用资源" tabindex="-1"><a class="header-anchor" href="#_4-更好地利用资源" aria-hidden="true">#</a> 4，更好地利用资源</h3><p>虚拟机的粒度是“虚拟出的机器”，而 Docker 的粒度则是“被限制的应用”，相比较而言 Docker 的内存占用更少，更加轻量级。对我来说这是 Docker 的一个优势：因为在如果在电脑中运行多个 Docker 应用，使用 Docker 比使用虚拟机更加简单，方便，粒度更细，也能持续地跟踪容器状态。</p><h3 id="_5-为微服务定制" tabindex="-1"><a class="header-anchor" href="#_5-为微服务定制" aria-hidden="true">#</a> 5，为微服务定制</h3><p>我们一直在讲“微服务（Microservices）”的概念。Docker 可以很好地和微服务结合起来。从概念上来说，一个微服务便是一个提供一整套应用程序的部分功能，Docker 便可以在开发、测试和部署过程中一直充当微服务的容器。甚至生产环境也可以在 Docker 中部署微服务。</p><h3 id="_6-在云服务提供商之间移植" tabindex="-1"><a class="header-anchor" href="#_6-在云服务提供商之间移植" aria-hidden="true">#</a> 6，在云服务提供商之间移植</h3><p>大多数的云主机提供商已经全面支持 Docker。对于开发人员来说，这表示你可以很方便地切换云服务提供商，当然也可以很方便地将你本地的开发环境移动到云主机上，不需要本地上配置一次运行环境、在云主机上还配置一次运行环境。全面部署 Docker (Docker here and Docker there) 作为标准运行环境可以极大地减轻应用上线时的工作量和产生 BUG。</p><h3 id="_7-技术的创新" tabindex="-1"><a class="header-anchor" href="#_7-技术的创新" aria-hidden="true">#</a> 7，技术的创新</h3><p>Docker 正在快速发展，工具也在不断更新，没有人能预见到未来 Docker 会是什么样子的。你在复杂的系统中 Docker 使用的越多，越是可能会发现技术上的空白和未来技术发展的方向。现在还处在 Docker 的发展期，任何你使用 Docker 创建的工具都有可能成为社区关注的热点。这是 Docker 的机会，也是成就你自己的机会。</p><h1 id="_02【掌握】docker和虚拟技术比较" tabindex="-1"><a class="header-anchor" href="#_02【掌握】docker和虚拟技术比较" aria-hidden="true">#</a> 02【掌握】docker和虚拟技术比较</h1><h2 id="_1-之前的虚拟技术" tabindex="-1"><a class="header-anchor" href="#_1-之前的虚拟技术" aria-hidden="true">#</a> 1，之前的虚拟技术</h2><p>虚拟机（virtual machine）就是带环境安装的一种解决方案。</p><p>它可以在一种操作系统里面运行另一种操作系统，比如在Windows 系统里面运行Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。这类虚拟机完美的运行了另一套系统，能够使应用程序，操作系统和硬件三者之间的逻辑不变。</p><p><img src="https://picgo.xingenhi.cn//typora20230704095633.png" alt="下载"></p><p>虚拟机的缺点：</p><ul><li>资源占用多</li><li>冗余步骤多</li><li>启动慢</li></ul><hr><h2 id="_2-docker容器化技术" tabindex="-1"><a class="header-anchor" href="#_2-docker容器化技术" aria-hidden="true">#</a> 2，docker容器化技术</h2><p>由于前面虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。</p><p>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。</p><p><img src="https://picgo.xingenhi.cn//typora20230704100037.png" alt="下载 (1)"></p><p>比较了 Docker 和传统虚拟化方式的不同之处：</p><ul><li><p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；</p></li><li><p>而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p></li><li><p>每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。</p></li></ul><hr><h2 id="_3-开发和运维的春天" tabindex="-1"><a class="header-anchor" href="#_3-开发和运维的春天" aria-hidden="true">#</a> 3，开发和运维的春天</h2><p>容器技术特点：一次构建，到处运行[雷哥教你再也不用纠结环境问题啦]</p><p>**1，更快的应用交付和部署。**传统的应用开发完成后，需要提供一堆安装程序和配置说明文档，安装部署后需根据配置文档进行繁杂的配置才能正常运行。Docker化之后只需要交付少量容器镜像文件，在正式生产环境加载镜像并运行即可，应用安装配置在镜像里已经内置好，大大节省部署配置和测试验证时间。</p><p>2，**更快的和扩缩容。**随着微服务架构和Docker的发展，大量的应用会通过微服务方式架构，应用的开发构建将变成搭乐高积木一样，每个Docker容器将变成一块“积木”，应用的升级将变得非常容易。当现有的容器不足以支撑业务处理时，可通过镜像运行新的容器进行快速扩容，使应用系统的扩容从原先的天级变成分钟级甚至秒级。</p><p>**3，更简单的系统运维。**应用容器化运行后，生产环境运行的应用可与开发、测试环境的应用高度一致，容器会将应用程序相关的环境和状态完全封装起来，不会因为底层基础架构和操作系统的不一致性给应用带来影响，产生新的BUG。当出现程序异常时，也可以通过测试环境的相同容器进行快速定位和修复。</p><p><strong>4，更高效的计算资源利用。</strong>　Docker是内核级虚拟化，其不像传统的虚拟化技术一样需要额外的Hypervisor支持，所以在一台物理机上可以运行很多个容器实例，可大大提升物理服务器的CPU和内存的利用率。</p><hr><h2 id="_4-企业级应用" tabindex="-1"><a class="header-anchor" href="#_4-企业级应用" aria-hidden="true">#</a> 4，企业级应用</h2><p>新浪</p><p><img src="https://picgo.xingenhi.cn//typoratyporaimage-20220330161926989.png" alt="image-20220330161926989"></p><p><img src="https://picgo.xingenhi.cn//typoratyporaimage-20220330161935863.png" alt="image-20220330161935863"></p><p><img src="https://picgo.xingenhi.cn//typoratyporaimage-20220330161940686.png" alt="image-20220330161940686"></p><p><img src="https://picgo.xingenhi.cn//typoratyporaimage-20220330161945483.png" alt="image-20220330161945483"></p><p>美团</p><p><img src="https://picgo.xingenhi.cn//typoratyporaimage-20220330161955651.png" alt="image-20220330161955651"></p><p>等等………………</p><h1 id="_03【掌握】docker下载" tabindex="-1"><a class="header-anchor" href="#_03【掌握】docker下载" aria-hidden="true">#</a> 03【掌握】docker下载</h1><h2 id="_1-docker-下载" tabindex="-1"><a class="header-anchor" href="#_1-docker-下载" aria-hidden="true">#</a> 1，Docker 下载</h2>',77),b={href:"http://www.docker.com/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://docker-cn.com/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},k=i(`<hr><h2 id="_2-docker-安装前提说明" tabindex="-1"><a class="header-anchor" href="#_2-docker-安装前提说明" aria-hidden="true">#</a> 2，Docker 安装前提说明</h2><h3 id="_2-1-centos-docker-安装" tabindex="-1"><a class="header-anchor" href="#_2-1-centos-docker-安装" aria-hidden="true">#</a> 2.1 CentOS Docker 安装</h3><p>Docker支持以下的CentOS版本：</p><p>CentOS 7 (64-bit)</p><p>CentOS 6.5 (64-bit) 或更高的版本</p><h3 id="_2-2-前提条件" tabindex="-1"><a class="header-anchor" href="#_2-2-前提条件" aria-hidden="true">#</a> 2.2 前提条件</h3><p>目前，CentOS 仅发行版本中的内核支持 Docker。</p><p>Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。[我们基于7以上的版本来讲的哦]</p><p>Docker 运行在 CentOS-6.5 或更高的版本的 CentOS 上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本[。</p><h3 id="_2-3-查看自己的内核" tabindex="-1"><a class="header-anchor" href="#_2-3-查看自己的内核" aria-hidden="true">#</a> 2.3 查看自己的内核</h3><p>uname命令用于打印当前系统相关信息（内核版本号、硬件架构、主机名称和操作系统类型等）。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>uname <span class="token operator">-</span>r 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typoraaa0e2e75-fe3c-4d93-8151-c7add4c92a41.png" alt="image"></p><p>版本OK木有问题</p><p>注意在centos6.5下面也可以安装。但是有点麻烦。想装的可以自己去查资源</p><hr><h2 id="_3-docker-的基本组成" tabindex="-1"><a class="header-anchor" href="#_3-docker-的基本组成" aria-hidden="true">#</a> 3，Docker 的基本组成</h2><p><img src="https://picgo.xingenhi.cn//typora0.3072053002081556.png" alt="image"></p><h1 id="_04【掌握】docker安装" tabindex="-1"><a class="header-anchor" href="#_04【掌握】docker安装" aria-hidden="true">#</a> 04【掌握】docker安装</h1><h2 id="_1-centos-下安装docker-文档" tabindex="-1"><a class="header-anchor" href="#_1-centos-下安装docker-文档" aria-hidden="true">#</a> 1，centos 下安装Docker 文档</h2><p>https://docs.docker.com/install/linux/docker-ce/centos/</p><h2 id="_2-docker-安装" tabindex="-1"><a class="header-anchor" href="#_2-docker-安装" aria-hidden="true">#</a> 2，Docker 安装</h2><h3 id="_2-1-确定是centos7的版本" tabindex="-1"><a class="header-anchor" href="#_2-1-确定是centos7的版本" aria-hidden="true">#</a> 2.1，确定是centos7的版本</h3><p><img src="https://picgo.xingenhi.cn//typora7871d434-5599-44c8-a268-bc60127c9fa7.png" alt="image"></p><h3 id="_2-2-yum安装gcc相关" tabindex="-1"><a class="header-anchor" href="#_2-2-yum安装gcc相关" aria-hidden="true">#</a> 2.2，yum安装gcc相关</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">1</span>，确定centos7能上外网
<span class="token number">2</span>，yum <span class="token operator">-</span>y install gcc
<span class="token number">3</span>，yum <span class="token operator">-</span>y install gcc<span class="token operator">-</span>c<span class="token operator">+</span><span class="token operator">+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-卸载旧版本" tabindex="-1"><a class="header-anchor" href="#_2-3-卸载旧版本" aria-hidden="true">#</a> 2.3，卸载旧版本</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>$ sudo yum remove docker \\
         docker<span class="token operator">-</span>client \\
         docker<span class="token operator">-</span>client<span class="token operator">-</span>latest \\
         docker<span class="token operator">-</span>common \\
         docker<span class="token operator">-</span>latest \\
         docker<span class="token operator">-</span>latest<span class="token operator">-</span>logrotate \\
         docker<span class="token operator">-</span>logrotate \\
         docker<span class="token operator">-</span>engine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-安装方法" tabindex="-1"><a class="header-anchor" href="#_2-4-安装方法" aria-hidden="true">#</a> 2.4，安装方法</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>yum install docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-5-启动docker" tabindex="-1"><a class="header-anchor" href="#_2-5-启动docker" aria-hidden="true">#</a> 2.5，启动docker</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>systemctl start docker
systemctl enable docker <span class="token comment"># 自启</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-查看版本" tabindex="-1"><a class="header-anchor" href="#_2-6-查看版本" aria-hidden="true">#</a> 2.6，查看版本</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>docker version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-7-测试运行-hello-world" tabindex="-1"><a class="header-anchor" href="#_2-7-测试运行-hello-world" aria-hidden="true">#</a> 2.7，测试运行 hello-world</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>docker run hello<span class="token operator">-</span>world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于本地没有hello-world这个镜像，所以会下载一个hello-world的镜像，并在容器内运行。</p><p><img src="https://picgo.xingenhi.cn//typoracf799e19-cee3-49e8-b2d2-a39d9f02dac7.png" alt="image"></p><h3 id="_2-8-测试运行nginx" tabindex="-1"><a class="header-anchor" href="#_2-8-测试运行nginx" aria-hidden="true">#</a> 2.8，测试运行nginx</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 <span class="token parameter variable">-d</span> docker.io/nginx  //将80端口映射为8080，或者80:80还是原先的80端口，不可以不写。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora2a58ba0e-f688-448d-bf07-e977a14d9045.png" alt="image"></p><p>测试</p>`,43),f={href:"http://192.168.15.134:8080/",target:"_blank",rel:"noopener noreferrer"},x=i(`<p><img src="https://picgo.xingenhi.cn//typorac0ccab13-911b-4496-bdf4-9c259d6162fa.png" alt="image"></p><p>是不是很爽呀</p><h3 id="_2-9-卸载docker" tabindex="-1"><a class="header-anchor" href="#_2-9-卸载docker" aria-hidden="true">#</a> 2.9，卸载docker</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl stop <span class="token function">docker</span>
yum <span class="token parameter variable">-y</span> remover <span class="token function">docker</span>
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><hr><h1 id="_05【掌握】docker加速配置和run" tabindex="-1"><a class="header-anchor" href="#_05【掌握】docker加速配置和run" aria-hidden="true">#</a> 05【掌握】docker加速配置和run</h1><h2 id="_1-说明" tabindex="-1"><a class="header-anchor" href="#_1-说明" aria-hidden="true">#</a> 1，说明</h2><p>Docker 运行容器前需要本地存在对应的镜像，如果镜像不存在本地，Docker 会从镜像仓库下载（默认是Docker Hub 公共注册服务器中的仓库）。</p><hr><h2 id="_2-获取镜像" tabindex="-1"><a class="header-anchor" href="#_2-获取镜像" aria-hidden="true">#</a> 2， 获取镜像</h2>`,11),_={href:"https://hub.docker.com/explore/",target:"_blank",rel:"noopener noreferrer"},y=i(`<p><img src="https://picgo.xingenhi.cn//typoraimage-20220330162213583.png" alt="image-20220330162213583"></p><p>可以使用docker pull 命令来从仓库获取所需要的镜像。</p><p>下面的例子将从Docker Hub 仓库下载一个Ubuntu 18.04 操作系统的镜像。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker pull ubuntu:18.04
该命令实际上相当于sudo docker pull registry.hub.docker.com/ubuntu:18.04
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330162234669.png" alt="image-20220330162234669"></p><p>从上面可以看出下载的很慢，因为docker默认是从docker Hub上下载的，而这个镜像地址在国外，所有很慢，我们可要其它镜像地址，如国内的</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>sudo docker pull registry<span class="token punctuation">.</span>docker<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>library<span class="token operator">/</span>ubuntu<span class="token punctuation">:</span><span class="token number">18.04</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样下载就很比刚才快很多了哦</p><hr><h2 id="_3-阿里云镜像加速" tabindex="-1"><a class="header-anchor" href="#_3-阿里云镜像加速" aria-hidden="true">#</a> 3，阿里云镜像加速</h2>`,10),D={href:"https://dev.aliyun.com/search.html",target:"_blank",rel:"noopener noreferrer"},q=i(`<p>2.登录阿里云 搜索 容器镜像服务 找到后如下图</p><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330162252646.png" alt="image-20220330162252646"></p><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330162257265.png" alt="image-20220330162257265"></p><p>可以看到加速器地址哦</p><p>编辑配置文件</p><p>vi /etc/docker/daemon.json</p><p>拷贝下面的内容/etc/docker/daemon.json中</p><p>{ &quot;registry-mirrors&quot;: [&quot;https://32xw0apq.mirror.aliyuncs.com&quot;] }</p><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330162307703.png" alt="image-20220330162307703"></p><p>执行下面两条命令 刷新docker的配置</p><p>systemctl daemon-reload</p><p>sudosystemctl restart docker</p><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330162315236.png" alt="image-20220330162315236"></p><p><strong>不指定版本会默认下载最新版</strong></p><p>已经编辑好的命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. 安装／升级Docker客户端
推荐安装1.10.0以上版本的Docker客户端，参考文档 docker-ce

2. 配置镜像加速器
针对Docker客户端版本大于 1.10.0 的用户
您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器
{
  &quot;registry-mirrors&quot;: [&quot;https://h8vcychj.mirror.aliyuncs.com&quot;]
}
然后运行：
systemctl daemon-reload
systemctl restart docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-下载其它镜像" tabindex="-1"><a class="header-anchor" href="#_4-下载其它镜像" aria-hidden="true">#</a> 4，下载其它镜像</h2><p>如tomcat</p><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330162338485.png" alt="image-20220330162338485"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker pull tomcat:8.5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5-docker镜像的相关常用命令" tabindex="-1"><a class="header-anchor" href="#_5-docker镜像的相关常用命令" aria-hidden="true">#</a> 5，docker镜像的相关常用命令</h2><blockquote><p>5.1列出所有镜像</p></blockquote><blockquote><p>docker images</p></blockquote><blockquote><p>5.2根据镜像id删除镜像</p></blockquote><blockquote><p>docker rmi 镜像id</p></blockquote><hr><h2 id="_6-docker-run了啥" tabindex="-1"><a class="header-anchor" href="#_6-docker-run了啥" aria-hidden="true">#</a> 6，docker run了啥</h2><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330162403360.png" alt="image-20220330162403360"></p><h1 id="_06【掌握】docker底层原理" tabindex="-1"><a class="header-anchor" href="#_06【掌握】docker底层原理" aria-hidden="true">#</a> 06【掌握】docker底层原理</h1><h2 id="_1-docker是如何工作的" tabindex="-1"><a class="header-anchor" href="#_1-docker是如何工作的" aria-hidden="true">#</a> 1，Docker是如何工作的</h2><p>Docker是一个Client-Server结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。 容器，是一个运行时环境，就是我们前面说到的集装箱。</p><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330162443149.png" alt="image-20220330162443149"></p><h2 id="_2-为什么docker比vm快" tabindex="-1"><a class="header-anchor" href="#_2-为什么docker比vm快" aria-hidden="true">#</a> <strong>2，为什么Docker比VM快</strong></h2><p>(1)docker有着比虚拟机更少的抽象层。由亍docker不需要Hypervisor实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</p><p>(2)docker利用的是宿主机的内核,而不需要Guest OS。因此,当新建一个容器时,docker不需要和虚拟机一样重新加载一个操作系统内核。仍而避免引寻、加载操作系统内核返个比较费时费资源的过程,当新建一个虚拟机时,虚拟机软件需要加载Guest OS,返个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了返个过程,因此新建一个docker容器只需要几秒钟。</p><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330162454540.png" alt="image-20220330162454540"></p><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330162500029.png" alt="image-20220330162500029"></p><h1 id="_07【掌握】docker命令-帮助-镜像" tabindex="-1"><a class="header-anchor" href="#_07【掌握】docker命令-帮助-镜像" aria-hidden="true">#</a> 07【掌握】docker命令[帮助+镜像]</h1><h2 id="_1-帮助命令" tabindex="-1"><a class="header-anchor" href="#_1-帮助命令" aria-hidden="true">#</a> 1，帮助命令</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> version 查看docker版本
<span class="token function">docker</span> info 显示全系统信息
<span class="token function">docker</span> <span class="token parameter variable">--help</span> 显示docker相关的所有命令及功能说明
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-镜像命令" tabindex="-1"><a class="header-anchor" href="#_2-镜像命令" aria-hidden="true">#</a> 2，镜像命令</h2><h3 id="_2-1-docker-images-列表本机上的镜像" tabindex="-1"><a class="header-anchor" href="#_2-1-docker-images-列表本机上的镜像" aria-hidden="true">#</a> 2.1 docker images 列表本机上的镜像</h3><p><img src="https://picgo.xingenhi.cn//typora69fe9c56-ac42-4949-8521-7d717386d805.png" alt="image"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>REPOSITORY：表示镜像的仓库源
TAG：镜像的标签
IMAGE ID：镜像ID
CREATED：镜像创建时间
SIZE：镜像大小
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。</p><p>如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest 镜像</p><p>docker images -[options]的说明</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-a</span> 列表本地的所有镜像及子镜像
<span class="token parameter variable">-q</span> 只显示镜像ID
<span class="token parameter variable">--digests</span> 显示镜像的摘要信息
--no-trunc 显示完整的镜像信息

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-2-docker-seach-镜像搜索命令" tabindex="-1"><a class="header-anchor" href="#_2-2-docker-seach-镜像搜索命令" aria-hidden="true">#</a> 2.2 docker seach 镜像搜索命令</h3>`,50),w={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},P=i(`<p>语法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> search 镜像名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>docker search 镜像名称 -[options] 说明</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>--no-trunc 显示完整的镜像描述
<span class="token parameter variable">-s</span> 列出收藏数不少于指定值的镜像
<span class="token parameter variable">--automated</span> 只列出 automated build类型的镜像
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-3-docker-pull-镜像下载命令" tabindex="-1"><a class="header-anchor" href="#_2-3-docker-pull-镜像下载命令" aria-hidden="true">#</a> 2.3 docker pull 镜像下载命令</h3><p>语法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull 镜像名称:<span class="token punctuation">[</span>TAG<span class="token punctuation">]</span>
例如:docker pull tomcat:8.5  下载8.5的镜像版本
   dokcer pull tomcat 默认下载最新的tomcat镜像版本 【latest】   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-4-docker-rim-镜像删除命令" tabindex="-1"><a class="header-anchor" href="#_2-4-docker-rim-镜像删除命令" aria-hidden="true">#</a> 2.4 docker rim 镜像删除命令</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>删除单个  <span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> 镜像ID
删除多个  <span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> 镜像ID1 镜像ID2
      <span class="token function">docker</span> rim <span class="token parameter variable">-f</span> 镜像名:<span class="token punctuation">[</span>tag<span class="token punctuation">]</span>  镜像名:<span class="token punctuation">[</span>tag<span class="token punctuation">]</span>
删除全部
      <span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> images <span class="token parameter variable">-qa</span><span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><hr><h1 id="_08【掌握】docker命令-容器" tabindex="-1"><a class="header-anchor" href="#_08【掌握】docker命令-容器" aria-hidden="true">#</a> 08【掌握】docker命令[容器]</h1><h2 id="_1、什么是容器" tabindex="-1"><a class="header-anchor" href="#_1、什么是容器" aria-hidden="true">#</a> 1、什么是容器</h2><p>容器镜像是一个软件的轻量级独立可执行软件包，包含运行它所需的一切：代码，运行时，系统工具，系统库，设置。不管环境如何，集装箱化软件都可以运行相同的Linux和Windows应用程序。容器将软件与其周围环境隔离开来，例如开发环境和生产环境之间的差异，并有助于减少在同一基础架构上运行不同软件的团队之间的冲突。</p><p><img src="https://picgo.xingenhi.cn//typora5119f7f3-5247-45be-acae-352089f7f2f2.jpg" alt="image"></p><p>1.轻量级</p><p>在一台机器上运行的Docker容器共享该机器的操作系统内核; 他们立即开始并使用更少的计算和内存。图像由文件系统层构建并共享公用文件。这最大限度地减少了磁盘使用量，图像下载速度更快。</p><p>2.标准</p><p>Docker容器基于开放标准，可在所有主要Linux发行版，Microsoft Windows以及任何基础架构（包括虚拟机，裸机和云中）上运行。</p><p>3.安全</p><p>Docker容器将应用程序彼此隔离并从底层基础架构中分离出来。Docker提供了最强大的默认隔离功能，可以将应用程序问题限制在一个容器中，而不是整个机器上。</p><hr><hr><p>2，演示前提</p><p>有镜像才能创建容器，这个是根本要求(下载centos镜像来演示)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull centos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><hr><h2 id="_3-创建并启动容器" tabindex="-1"><a class="header-anchor" href="#_3-创建并启动容器" aria-hidden="true">#</a> 3，创建并启动容器</h2><h3 id="_3-1语法" tabindex="-1"><a class="header-anchor" href="#_3-1语法" aria-hidden="true">#</a> 3.1语法</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">[</span>options<span class="token punctuation">]</span> images <span class="token punctuation">[</span>command<span class="token punctuation">]</span><span class="token punctuation">[</span>args<span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-2options说明" tabindex="-1"><a class="header-anchor" href="#_3-2options说明" aria-hidden="true">#</a> 3.2options说明</h3><p>有些是一个减号，有些是两个减号</p><p>--name=&quot;容器新名字&quot;: 为容器指定一个名称；</p><p>-d: 后台运行容器，并返回容器ID，也即启动守护式容器；</p><p>-i：以交互模式运行容器，通常与 -t 同时使用；</p><p>-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p><p>-P: 随机端口映射；</p><p>-p: 指定端口映射，有以下四种格式</p><p>ip:hostPort:containerPort</p><p>ip::containerPort</p><p>hostPort:containerPort</p><p>containerPort</p><h3 id="_3-3交互式运行" tabindex="-1"><a class="header-anchor" href="#_3-3交互式运行" aria-hidden="true">#</a> 3.3交互式运行</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#使用镜像centos:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> centos /bin/bash 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><hr><h2 id="_4-列出当前所有正在运行的容器" tabindex="-1"><a class="header-anchor" href="#_4-列出当前所有正在运行的容器" aria-hidden="true">#</a> 4，列出当前所有正在运行的容器</h2><h3 id="_4-1语法" tabindex="-1"><a class="header-anchor" href="#_4-1语法" aria-hidden="true">#</a> 4.1语法</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-2-options语法说明" tabindex="-1"><a class="header-anchor" href="#_4-2-options语法说明" aria-hidden="true">#</a> 4.2 options语法说明</h3><p>-a :列出当前所有正在运行的容器+历史上运行过的</p><p>-l :显示最近创建的容器。</p><p>-n：显示最近n个创建的容器。</p><p>-q :静默模式，只显示容器编号。</p><p>--no-trunc :不截断输出。</p><hr><hr><h2 id="_5-退出容器" tabindex="-1"><a class="header-anchor" href="#_5-退出容器" aria-hidden="true">#</a> 5，退出容器</h2><p>1，exit:停止容器并退出</p><p>2，ctrl+P+Q 容器不停止退出</p><hr><hr><h2 id="_6-启动容器" tabindex="-1"><a class="header-anchor" href="#_6-启动容器" aria-hidden="true">#</a> 6，启动容器</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> start 容器ID或容器名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><hr><h2 id="_7-重启容器" tabindex="-1"><a class="header-anchor" href="#_7-重启容器" aria-hidden="true">#</a> 7，重启容器</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart 容器ID或容器名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><hr><h2 id="_8-停止容器" tabindex="-1"><a class="header-anchor" href="#_8-停止容器" aria-hidden="true">#</a> 8，停止容器</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop 容器ID或容器名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><hr><h2 id="_9-强制停止容器" tabindex="-1"><a class="header-anchor" href="#_9-强制停止容器" aria-hidden="true">#</a> 9，强制停止容器</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">kill</span> 容器ID或容器名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><hr><h2 id="_10-删除已停止的容器" tabindex="-1"><a class="header-anchor" href="#_10-删除已停止的容器" aria-hidden="true">#</a> 10，删除已停止的容器</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#单个删除</span>
<span class="token function">docker</span> <span class="token function">rm</span> 容器ID
<span class="token comment">#多个删除</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-aq</span><span class="token variable">)</span></span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-aq</span> <span class="token function">xargs</span> <span class="token function">docker</span> <span class="token function">rm</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><hr><h2 id="_11-其它重点内容" tabindex="-1"><a class="header-anchor" href="#_11-其它重点内容" aria-hidden="true">#</a> 11，其它重点内容</h2><h3 id="_1-启用守护式容器" tabindex="-1"><a class="header-anchor" href="#_1-启用守护式容器" aria-hidden="true">#</a> 1，启用守护式容器</h3><p>#使用镜像centos:latest以后台模式启动一个容器</p><p>docker run -d centos</p><p>问题：docker ps -a 进行查看, 会发现容器已经退出</p><p>很重要的要说明的一点: Docker容器后台运行,就必须有一个前台进程.</p><p>容器运行的命令如果不是那些一直挂起的命令（比如运行top，tail），就是会自动退出的。</p><p>这个是docker的机制问题,比如你的web容器,我们以nginx为例，正常情况下,我们配置启动服务只需要启动是应的service即可。例如 service nginx start</p><p>但是,这样做,nginx为后台进程模式运行,就导致docker前台没有运行的应用,</p><p>这样的容器后台启动后,会立即自杀因为他觉得他没事可做了.</p><p>所以，最佳的解决方案是,将你要运行的程序以前台进程的形式运行</p><h3 id="_2-查看容器日志" tabindex="-1"><a class="header-anchor" href="#_2-查看容器日志" aria-hidden="true">#</a> 2，查看容器日志</h3><p>如果是后台运行的程序，那么如何查看运行的日志呢？</p><p>1，先运行一个程序 在后台被隔两秒输出[hello laolei]</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> centos /bin/sh <span class="token parameter variable">-c</span> <span class="token string">&quot;while true;do echo hello laolei;sleep 2;done&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2，查看日志</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token parameter variable">-tf</span> <span class="token parameter variable">--tail</span> <span class="token number">10</span> 容器ID

*   <span class="token parameter variable">-t</span> 是加入时间戳
*   <span class="token parameter variable">-f</span> 跟随最新的日志打印
*   <span class="token parameter variable">--tail</span> 数字 显示最后多少条
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3，查看容器运行进程</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">top</span> 容器ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-查询容器内部细节" tabindex="-1"><a class="header-anchor" href="#_4-查询容器内部细节" aria-hidden="true">#</a> 4，查询容器内部细节</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect 容器ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-进入正在进行的容器并以命令行交互" tabindex="-1"><a class="header-anchor" href="#_5-进入正在进行的容器并以命令行交互" aria-hidden="true">#</a> 5，进入正在进行的容器并以命令行交互</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#方式1</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 容器ID /bin/bash
<span class="token comment">#方式2</span>
<span class="token function">docker</span> attach 容器ID
<span class="token comment">#两种方式的区别</span>
<span class="token builtin class-name">exec</span> 在容器中打开新的终端 并且可以启动新的进程

attch 直接进行容器终端，不会启动新的进程
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-进入容器内拷贝文件到主机" tabindex="-1"><a class="header-anchor" href="#_6-进入容器内拷贝文件到主机" aria-hidden="true">#</a> 6，进入容器内拷贝文件到主机</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> 容器ID:容器内的路径  主机目录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="_09【掌握】docker命令总结" tabindex="-1"><a class="header-anchor" href="#_09【掌握】docker命令总结" aria-hidden="true">#</a> 09【掌握】docker命令总结</h1><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330162848139.png" alt="image-20220330162848139"></p><h1 id="_10【掌握】docker镜像" tabindex="-1"><a class="header-anchor" href="#_10【掌握】docker镜像" aria-hidden="true">#</a> 10【掌握】docker镜像</h1><h2 id="_1-什么是镜像" tabindex="-1"><a class="header-anchor" href="#_1-什么是镜像" aria-hidden="true">#</a> 1，什么是镜像</h2><h3 id="_1-1-unionfs-联合文件系统" tabindex="-1"><a class="header-anchor" href="#_1-1-unionfs-联合文件系统" aria-hidden="true">#</a> 1.1 UnionFS（联合文件系统）</h3><p>UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330162910253.png" alt="image-20220330162910253"></p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p><h3 id="_1-2-docker镜像加载原理" tabindex="-1"><a class="header-anchor" href="#_1-2-docker镜像加载原理" aria-hidden="true">#</a> 1.2 Docker镜像加载原理</h3><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p><p>bootfs(boot file system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs (root file system) ，在bootfs之上。包含的就是典型 Linux 系统中的 /dev, /proc, /bin, /etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。</p><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330162922180.png" alt="image-20220330162922180"></p><p>平时我们安装进虚拟机的CentOS都是好几个G，为什么docker这里才200M？？</p><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330162933396.png" alt="image-20220330162933396"></p><p>对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的linux发行版, bootfs基本是一致的, rootfs会有差别, 因此不同的发行版可以公用bootfs。</p><h3 id="_1-3-分层的镜像" tabindex="-1"><a class="header-anchor" href="#_1-3-分层的镜像" aria-hidden="true">#</a> 1.3 分层的镜像</h3><p>以我们的pull为例，在下载的过程中我们可以看到docker的镜像好像是在一层一层的在下载</p><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330162945324.png" alt="image-20220330162945324"></p><h3 id="_1-4-为什么docker要使用上面的这种分层结构" tabindex="-1"><a class="header-anchor" href="#_1-4-为什么docker要使用上面的这种分层结构" aria-hidden="true">#</a> 1.4 为什么docker要使用上面的这种分层结构</h3><p>最大的一个好处就是 - 共享资源</p><p>比如：有多个镜像都从相同的 base 镜像构建而来，那么宿主机只需在磁盘上保存一份base镜像，</p><p>同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p><h2 id="_2-镜像的特点" tabindex="-1"><a class="header-anchor" href="#_2-镜像的特点" aria-hidden="true">#</a> 2，镜像的特点</h2><p>Docker镜像都是只读的</p><p>当容器启动时，一个新的可写的镜像被加载到镜像层的顶部。</p><p>这一层通常被叫做容器层，容器层之下的都叫镜像层</p><p>3，镜像的commit操作</p><h3 id="_3-1-作用" tabindex="-1"><a class="header-anchor" href="#_3-1-作用" aria-hidden="true">#</a> 3.1 作用</h3><p>当镜像运行之后可以修改容器里面的内容，再提交成一个新的镜像</p><h3 id="_3-2-命令语法" tabindex="-1"><a class="header-anchor" href="#_3-2-命令语法" aria-hidden="true">#</a> 3.2 命令语法</h3><p>docker commit -m=&#39;新的镜像的描述信息&#39; -a=&#39;作者&#39; 容器ID 要创建的目标镜像名:[标签名]</p><p>3.3 案例演示</p><h5 id="_1-从hub上拉一下tomcat镜像当运行" tabindex="-1"><a class="header-anchor" href="#_1-从hub上拉一下tomcat镜像当运行" aria-hidden="true">#</a> 1，从hub上拉一下tomcat镜像当运行</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -it -p 8080:8080 tomcat 
p 主机端口:容器端口
P 随机分配端口
i 交互
t 终端
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330163012238.png" alt="image-20220330163012238"></p><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330163016552.png" alt="image-20220330163016552"></p><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330163022962.png" alt="image-20220330163022962"></p><p>从上面可以看出docs是可以访问的哦</p><h5 id="_2-删除tomcat里面webapps-里面的docs项目" tabindex="-1"><a class="header-anchor" href="#_2-删除tomcat里面webapps-里面的docs项目" aria-hidden="true">#</a> 2，删除tomcat里面webapps 里面的docs项目</h5><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330163033265.png" alt="image-20220330163033265"></p><p>刷新页面docs不存在了哦</p><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330163041423.png" alt="image-20220330163041423"></p><h5 id="_3-把当前运行的这个没有docs的容器生成一个新的镜像" tabindex="-1"><a class="header-anchor" href="#_3-把当前运行的这个没有docs的容器生成一个新的镜像" aria-hidden="true">#</a> 3，把当前运行的这个没有docs的容器生成一个新的镜像</h5><p>语法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker commit -a=&#39;作者&#39; -m=&#39;镜像描述&#39; 容器ID 新的镜像名/名称:版本
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>案列</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker commit -a=&#39;laolei&#39; -m=&#39;del tomcat docs&#39; dbebc1893880  laolei/tomcatnodocs:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330163140081.png" alt="image-20220330163140081"></p><h5 id="_4-启动自己创建的镜像和之前的对比" tabindex="-1"><a class="header-anchor" href="#_4-启动自己创建的镜像和之前的对比" aria-hidden="true">#</a> 4，启动自己创建的镜像和之前的对比</h5><p>1 ，删除所有容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-aq</span><span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2，启动之前的镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8888</span>:8080 镜像ID或仓库ID+版本
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3，启动自己的镜像</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -d -p 9999:8080 镜像ID 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="_11【掌握】docker容器数据卷" tabindex="-1"><a class="header-anchor" href="#_11【掌握】docker容器数据卷" aria-hidden="true">#</a> 11【掌握】docker容器数据卷</h1><h2 id="_1-什么是容器数据卷" tabindex="-1"><a class="header-anchor" href="#_1-什么是容器数据卷" aria-hidden="true">#</a> 1，什么是容器数据卷</h2><p>先来看看Docker的理念：</p><ul><li><p>将应用与运行的环境打包形成容器运行 ，运行可以伴随着容器，但是我们对数据的要求希望是持久化的</p></li><li><p>容器之间希望有可能共享数据</p></li></ul><p>Docker容器产生的数据，如果不通过docker commit生成新的镜像，使得数据做为镜像的一部分保存下来，</p><p>那么当容器删除后，数据自然也就没有了。</p><p>为了能保存数据在docker中我们使用卷。</p><hr><h2 id="_2-容器数据卷能做什么" tabindex="-1"><a class="header-anchor" href="#_2-容器数据卷能做什么" aria-hidden="true">#</a> 2，容器数据卷能做什么</h2><p>1，容器数据的持久化</p><p>2，容器之间继承和共享数据</p><hr><h2 id="_3-添加数据卷的方式" tabindex="-1"><a class="header-anchor" href="#_3-添加数据卷的方式" aria-hidden="true">#</a> 3，添加数据卷的方式</h2><h3 id="_3-1直接使用命令添加" tabindex="-1"><a class="header-anchor" href="#_3-1直接使用命令添加" aria-hidden="true">#</a> 3.1直接使用命令添加</h3><p>①语法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> docker run -it -v /宿主机目录:/容器内目录 centos /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>②查看容器卷是否挂载成功</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker inspect 容器ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typoraccd05137-0cf0-4c67-ae22-641112519973.png" alt="image"></p><p>③查看容器卷和宿主机的数据共享</p><p>在宿主机的mycentos001中创建hello.txt文件并写入数据mycentos001</p><p>进入容器查看container001里面有hello.txt文件数据和mycentos001里面的一样</p><p>注意：在以上的例子中，默认的只能在宿主机里面写数据。</p><p>如果出以下的问题</p><p><img src="https://picgo.xingenhi.cn//typorada8f352e-a6e0-4a48-9dd8-54bf5b7e1e6b.png" alt="image"></p><p>解决办法：在挂载目录后多加一个--privileged=true参数即可</p><p>④查看容器停止后，主机修改数据是否同步</p><p><img src="https://picgo.xingenhi.cn//typora0df70207-d16e-449c-b392-3379ff833bf3.png" alt="image"></p><p>⑤带权限的处理方式</p><p><img src="https://picgo.xingenhi.cn//typora7fd0c032-f467-4e8c-a55b-0ead1283696a.png" alt="image"></p><hr><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> docker run -it -v /宿主机目录:/容器内目录:ro centos /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="_3-2使用dockerfile添加" tabindex="-1"><a class="header-anchor" href="#_3-2使用dockerfile添加" aria-hidden="true">#</a> 3.2使用DockerFile添加</h3><p>①在宿主机的根目录下创建mydocker文件夹并进入</p><p><img src="https://picgo.xingenhi.cn//typora52c68615-0b6b-40f4-94b7-55dd2627a3a9.png" alt="image"></p><p>②在当前目录创建一个DockerFile的文件</p><p><img src="https://picgo.xingenhi.cn//typoraee2fa046-8985-425b-8e86-b659c7757d28.png" alt="image"></p><p>③编写DockerFile</p><p><img src="https://picgo.xingenhi.cn//typora9b3aa538-b861-4c2c-a5b0-455d9cf85135.png" alt="image"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FROM centos
VOLUME <span class="token punctuation">[</span><span class="token string">&quot;/dataContainer1&quot;</span>,<span class="token string">&quot;/dataContainer2&quot;</span><span class="token punctuation">]</span>
CMD <span class="token builtin class-name">echo</span> <span class="token string">&quot;finished,--------success1&quot;</span>
CMD /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④build生成一个新的镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-f</span> /mydocker/DockerFile <span class="token parameter variable">-t</span> laolei/centos <span class="token builtin class-name">.</span>   <span class="token comment">#注意后面有一个点哦</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typorae375d9f6-b2e0-461e-a8ce-30ce105e632a.png" alt="image"></p><p>⑤启动容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span><span class="token operator">=</span><span class="token string">&#39;mycentos&#39;</span> laolei/centos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>⑥查看容器里面有两个容器卷</p><p><img src="https://picgo.xingenhi.cn//typora2256c71f-ab9b-49c7-ae24-708cb3c0c907.png" alt="image"></p><hr><p><img src="https://picgo.xingenhi.cn//typorae7518e0b-7fbb-46ed-945d-bde4193ae9e2.png" alt="image"></p><hr><hr><h2 id="_4-数据卷容器" tabindex="-1"><a class="header-anchor" href="#_4-数据卷容器" aria-hidden="true">#</a> 4，数据卷容器</h2><p>4.1，作用：实现容器之间的数据共享</p><p>4.2，操作思路</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>以上面的laolei/centos为镜像，里面有dataContainer1和dataContailer2
启动一个容器dc1  在dataContailer1里面添加dc1.txt
    <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span><span class="token operator">=</span><span class="token string">&#39;dc1&#39;</span> laolei/centos
    <span class="token builtin class-name">cd</span> /dataContailer1
    <span class="token function">touch</span> dct.txt
启动一个容器dc2 继承dc1  在dataContailer1里面添加dc2.txt
启动一个容器dc3 继承dc2  在dataContailer1里面添加dc3.txt
发现在dc3可以看到dc1.txt dc2.txt dc3.txt
      dc1里面可以看到dc1.txt dc2.txt dc3.txt
删除dc1容器之后在dc2和dc3里面还是可以看到dc1.txt dc2.txt dc3.txt

说明数据卷容器的生命周期一直持续到没有容器使用它为止
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typorabb25d5a0-b947-4cf4-a42a-f025e9e464c4.png" alt="image"></p><h1 id="_12【掌握】dockerfile详解【1】" tabindex="-1"><a class="header-anchor" href="#_12【掌握】dockerfile详解【1】" aria-hidden="true">#</a> 12【掌握】Dockerfile详解【1】</h1><h2 id="_1-什么是dockerfile" tabindex="-1"><a class="header-anchor" href="#_1-什么是dockerfile" aria-hidden="true">#</a> 1，什么是Dockerfile</h2><p>1，Dockerfile是用来构建Docker镜像的构建文件，是由一系列的命令和参数构成的脚本</p><p>2，Dokcerfile的构建步骤</p><p>​ 编写Dokcerfile文件</p><p>​ docker build 生成新的镜像</p><p>​ docker run 运行镜像</p><p>3，以centos的镜像为例来说明 https://hub.docker.com/_/centos</p><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330163255283.png" alt="image-20220330163255283"></p><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330163259947.png" alt="image-20220330163259947"></p><h2 id="_2-dockerfile构建过程解析" tabindex="-1"><a class="header-anchor" href="#_2-dockerfile构建过程解析" aria-hidden="true">#</a> 2，DockerFile构建过程解析</h2><p>2.1基础知识</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1，每条保留字指令都必须为大写字母后面要跟随至少一个参数
2，指令从上到下顺序执行
3，#表示注释
4，每条指令都会创建一个新的镜像层，并对镜像进行提交
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.2大致流程</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1，docker从基础镜像运行一个容器
2，执行一条指令并对容器进行修改
3，执行类似于docker commit的操作提交一个新的镜像
4，docker再基于刚提交的新的镜像运行一个新的容器
5，执行dockerfile的下一个指令再人生第2点直到没有指令
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.3总结</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>从应用软件的角度来看，Dockerfile、Docker镜像与Docker容器分别代表软件的三个不同阶段，
*  Dockerfile是软件的原材料
*  Docker镜像是软件的交付品
*  Docker容器则可以认为是软件的运行态。
Dockerfile面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可，合力充当Docker体系的基石。

1 Dockerfile，需要定义一个Dockerfile，Dockerfile定义了进程需要的一切东西。
    Dockerfile涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、
    服务进程和内核进程(当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制)等等;
2 Docker镜像，在用Dockerfile定义一个文件之后，docker build时会产生一个Docker镜像，
    当运行 Docker镜像时，会真正开始提供服务;
3 Docker容器，容器是直接提供服务的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330163343431.png" alt="image-20220330163343431"></p><h2 id="_3-dockerfile体系结构-关键字-重点啊" tabindex="-1"><a class="header-anchor" href="#_3-dockerfile体系结构-关键字-重点啊" aria-hidden="true">#</a> 3，DockerFile体系结构（关键字---重点啊）</h2><p><strong>FROM</strong> 基础镜像，当前新镜像是基于哪个镜像的</p><p><strong>MAINTAINER</strong> 镜像维护者的姓名和邮箱地址</p><p><strong>RUN</strong> 容器构建时需要运行的命令</p><p><strong>EXPOSE</strong> 当前容器对外暴露的端口</p><p><strong>WORKDIR</strong> 指定在创建容器后，终端默认登陆进来的工作目录</p><p><strong>ENV</strong> 用来在构建镜像过程中设置环境变量</p><p><strong>ADD</strong> 将宿主机目录下的文件拷贝进镜像并且ADD命令会自动处理URL和解压tar包</p><p><strong>COPY</strong> 类似ADD，拷贝文件和目录到镜像中 ，语法COPY src dest COPY [&#39;&#39;src&quot;,&quot;dest&quot;]</p><p><strong>VOLUME</strong> 容器数据卷，用于数据保存和持久化工作</p><p><strong>CMD</strong> 指定一个容器启动时要运行的命令格式</p><p>​ shell: CMD &lt;命令&gt;</p><p>​ exec CMD [&#39;可执行文件&#39;,&quot;参数1&quot;,&quot;参数2&quot;]</p><p>​ DockerFile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换</p><p><strong>ENTEYPONT</strong> 指定一个容器启动时要运行的命令</p><p>​ ENTRYPOINT的目地和CMD一样，都是在指定容器启动程序及参数</p><p><strong>OBBUILD</strong> 当构建一个被继承的Dockerfile时运行命令，父镜像在被子镜像继承后触发父镜像的onbuild</p><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><p><img src="https://picgo.xingenhi.cn//typoraimage-20220330163404120.png" alt="image-20220330163404120"></p><h1 id="_13【掌握】dockerfile详解【2】" tabindex="-1"><a class="header-anchor" href="#_13【掌握】dockerfile详解【2】" aria-hidden="true">#</a> 13【掌握】Dockerfile详解【2】</h1><h2 id="_1-base镜像的说明" tabindex="-1"><a class="header-anchor" href="#_1-base镜像的说明" aria-hidden="true">#</a> 1，Base镜像的说明</h2><p>docker Hub上99%的镜像都是通过base镜像中安装和配置需要的软件构建出来的</p><p><img src="https://picgo.xingenhi.cn//typora14b30bb6-e6f9-4e5b-a16d-273aa4b1376f.png" alt="image"></p><hr><hr><h2 id="_2-自定义mycentos镜像" tabindex="-1"><a class="header-anchor" href="#_2-自定义mycentos镜像" aria-hidden="true">#</a> 2，自定义mycentos镜像</h2><h4 id="_2-1目地" tabindex="-1"><a class="header-anchor" href="#_2-1目地" aria-hidden="true">#</a> 2.1目地</h4><ol><li>登陆后的默认路径</li><li>vim编辑器</li><li>查看网络配置ifconfig支持</li></ol><p><img src="https://picgo.xingenhi.cn//typora27ec6c19-5779-479e-818f-6e0a7e302d2d.png" alt="image"></p><hr><h4 id="_2-2进入mydocker目录创建dockerfile文件编写" tabindex="-1"><a class="header-anchor" href="#_2-2进入mydocker目录创建dockerfile文件编写" aria-hidden="true">#</a> 2.2进入mydocker目录创建DockerFile文件编写</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>cd <span class="token operator">/</span>mydocker
touch Dockerfile
vi Dockerfile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>向Dockerfile里面写入内容</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#继承父镜像</span>
FROM centos
<span class="token comment">#作者和邮箱</span>
MAINTAINER laolei<span class="token operator">&lt;</span><span class="token number">78414842</span>@qq<span class="token punctuation">.</span>com<span class="token operator">&gt;</span>
<span class="token comment">#设置环境变量</span>
ENV MYPATH <span class="token operator">/</span>usr<span class="token operator">/</span>local
WORKDIR $MYPATH
<span class="token comment">#安装vim 和网络工具</span>
RUN yum <span class="token operator">-</span>y install vim
RUN yum <span class="token operator">-</span>y install net<span class="token operator">-</span>tools
<span class="token comment">#对外暴露的端口[提示作用]</span>
EXPOSE <span class="token number">80</span>
<span class="token comment">#输出</span>
CMD echo $MYPATH
CMD echo <span class="token string">&quot;success--------------ok&quot;</span>
CMD <span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3使用docker-build命令构建镜像" tabindex="-1"><a class="header-anchor" href="#_2-3使用docker-build命令构建镜像" aria-hidden="true">#</a> 2.3使用docker build命令构建镜像</h4><p>docker build -t mycentos:1.2 .</p><p><img src="https://picgo.xingenhi.cn//typoraaf0164d1-6719-4163-9563-1128e4e78ca6.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typoraf925468e-0c2b-44f3-b4d0-ff1c91d71861.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typoraad952d8a-00ba-4668-91f6-656fd51818ec.png" alt="image"></p><h4 id="_2-4使用docker-run命令运行" tabindex="-1"><a class="header-anchor" href="#_2-4使用docker-run命令运行" aria-hidden="true">#</a> 2.4使用docker run命令运行</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>docker run <span class="token operator">-</span>it mycentos<span class="token punctuation">:</span><span class="token number">1.2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora3c968fc9-b6e0-489f-ae76-8a5325235cc0.png" alt="image"></p><p>可以看到里面可以使用ipconfig命令了哦</p><h4 id="_2-5列出镜像的变更历史" tabindex="-1"><a class="header-anchor" href="#_2-5列出镜像的变更历史" aria-hidden="true">#</a> 2.5列出镜像的变更历史</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>docker history 镜像名<span class="token punctuation">:</span>TAG
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typoraa9e8d1fb-9750-4381-9c34-7098bed392c1.png" alt="image"></p><hr><hr><h1 id="_14【掌握】dockerfile详解【3】" tabindex="-1"><a class="header-anchor" href="#_14【掌握】dockerfile详解【3】" aria-hidden="true">#</a> 14【掌握】Dockerfile详解【3】</h1><p>1，CMD说明</p><hr><p>Dockerfile 中可以有多个CMD的命令，但只有最后一个生效，CMD会被docker run之后的参数替换掉</p><p>可以使用tomcat的案例演示</p><p>2.1查看tomcat的Dockerfile</p><p><img src="https://picgo.xingenhi.cn//typorae4c89d9a-6c2c-485d-b2dd-a41999834be0.png" alt="image"></p><p>从上面的可以看出最后执行了一个catalina.sh的命令 相当于./bin/catalina.sh<br> 运行如下命令，可以看出下图的效果</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>docker run <span class="token operator">-</span>it <span class="token operator">-</span>p <span class="token number">9999</span><span class="token punctuation">:</span><span class="token number">8080</span> tomcat ls <span class="token operator">-</span>lh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typorabd19bf29-0c3c-41c2-a539-cf8c2180d6d6.png" alt="image"></p><p>发现这个tomcat的容器启动之后就退出了</p><p>那是因为在启动容器的时候后面加了ls -lh那么会覆盖Dockerfile里面的 CMD [&quot;catalina.sh&quot;, &quot;run&quot;]</p><hr><h2 id="_2-entrypoint说明" tabindex="-1"><a class="header-anchor" href="#_2-entrypoint说明" aria-hidden="true">#</a> 2，ENTRYPOINT说明</h2><p>使用ENTRYPOINT来运行命令，在run 运行的参数会追加到新的命令后面</p><hr><h2 id="_3-自定义ls镜像来说明cmd和entrypoint的区别" tabindex="-1"><a class="header-anchor" href="#_3-自定义ls镜像来说明cmd和entrypoint的区别" aria-hidden="true">#</a> 3，自定义ls镜像来说明CMD和ENTRYPOINT的区别</h2><p>目地：讲解CMD和ENTRYOINT的区别</p><p>编写Dockerfile</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>FROM centos
CMD <span class="token punctuation">[</span> <span class="token string">&quot;ls&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-a&quot;</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>构建镜像</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>docker build <span class="token operator">-</span>t myls<span class="token punctuation">:</span><span class="token number">1.2</span> <span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动镜像</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>docker run <span class="token operator">-</span>it myls<span class="token punctuation">:</span><span class="token number">1.2</span> <span class="token operator">-</span>lh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora441b6f1e-11b2-4514-bff9-bdbb6f567a29.png" alt="image"></p><p>出现错误，这是因为Dockerfile里面使用的是CMD [&quot;ls&quot;, &quot;-a&quot;]运行是传一个-lh过去会覆盖</p><p>修改Dockerfile</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>FROM centos
ENTRYPOINT <span class="token punctuation">[</span> <span class="token string">&quot;ls&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-a&quot;</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>构建镜像</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>docker build <span class="token operator">-</span>t myls<span class="token punctuation">:</span><span class="token number">1.3</span> <span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行镜像</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>docker run <span class="token operator">-</span>it myls<span class="token punctuation">:</span><span class="token number">1.3</span> <span class="token operator">-</span>l
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora41fe7d26-ee33-4c74-bfb6-5721720d2c4d.png" alt="image"></p><p>发现 【 -l 】被追加到 ls 后面了哦</p><h1 id="_15【掌握】dockerfile详解【4】" tabindex="-1"><a class="header-anchor" href="#_15【掌握】dockerfile详解【4】" aria-hidden="true">#</a> 15【掌握】Dockerfile详解【4】</h1><h2 id="_1-自定义tomcat镜像" tabindex="-1"><a class="header-anchor" href="#_1-自定义tomcat镜像" aria-hidden="true">#</a> 1，自定义tomcat镜像</h2><h3 id="_1-准备工作" tabindex="-1"><a class="header-anchor" href="#_1-准备工作" aria-hidden="true">#</a> 1，准备工作</h3><p>下载tomca9</p><p>下载jdk8linux</p><p><img src="https://picgo.xingenhi.cn//typora748a32eb-31e9-4a9c-9e7a-f8641532ffd4.png" alt="image"></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#创建目录</span>
mkdir <span class="token operator">-</span>p <span class="token operator">/</span>mydocker<span class="token operator">/</span>tomcat9
<span class="token comment">#进入目录</span>
cd <span class="token operator">/</span>mydocker<span class="token operator">/</span>tomcat9
<span class="token comment">#创建文件</span>
touch README<span class="token punctuation">.</span>txt
<span class="token comment">#随便向README.TXT里面写点内容</span>
vi README<span class="token punctuation">.</span>txt
<span class="token comment">#把下载好的tomcat和jdk放到/mydocker/tomcat9里面</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora1e8cfea4-33e5-4cbb-bfbf-8a8b6be13c9c.png" alt="image"></p><hr><hr><h3 id="_2-编写dockerfile" tabindex="-1"><a class="header-anchor" href="#_2-编写dockerfile" aria-hidden="true">#</a> 2，编写Dockerfile</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#基于centos镜像</span>
FROM     centos
MAINTAINER   laolei<span class="token operator">&lt;</span><span class="token number">78414842</span>@qq.com<span class="token operator">&gt;</span>
<span class="token comment">#把宿主机当前上下文的README.txt拷贝到容器/usr/local/路径下</span>
COPY README.txt /usr/local/README.txt
<span class="token comment">#把java与tomcat添加到容器中 使用ADD 会自动解压，使用COPY要自行手动解压</span>
ADD jdk-8u181-linux-x64.tar.gz  /usr/local/
ADD apache-tomcat-9.0.19.tar.gz /usr/local/
<span class="token comment">#安装vim编辑器</span>
RUN yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">vim</span>
<span class="token comment">#设置工作访问时候的WORKDIR路径，登录落脚点</span>
ENV MYPATH /usr/local
WORKDIR <span class="token variable">$MYPATH</span>
<span class="token comment">#配置java与tomcat环境变量</span>
ENV JAVA_HOME /usr/local/jdk1.8.0_181
ENV CLASSPATH <span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar
ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.19
ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.19
ENV <span class="token environment constant">PATH</span> <span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$CATALINA_HOME</span>/lib:<span class="token variable">$CATALINA_HOME</span>/bin
<span class="token comment">#容器运行时监听的端口(提示作用)</span>
EXPOSE <span class="token number">8080</span>
<span class="token comment">#启动时运行tomcat</span>
<span class="token comment"># ENTRYPOINT [&quot;/usr/local/apache-tomcat-9.0.19/bin/startup.sh&quot; ]</span>
<span class="token comment"># CMD [&quot;/usr/local/apache-tomcat-9.0.19/bin/catalina.sh&quot;,&quot;run&quot;]</span>
<span class="token comment">#启动tomcat并显示出logs/catalina.out下最后的日志</span>
CMD /usr/local/apache-tomcat-9.0.19/bin/startup.sh <span class="token operator">&amp;&amp;</span> <span class="token function">tail</span> <span class="token parameter variable">-F</span> /usr/local/README.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-构建镜像" tabindex="-1"><a class="header-anchor" href="#_3-构建镜像" aria-hidden="true">#</a> 3，构建镜像</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">docker</span> build <span class="token parameter variable">-t</span> mytomcat9:1.0 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-运行镜像测试" tabindex="-1"><a class="header-anchor" href="#_4-运行镜像测试" aria-hidden="true">#</a> 4，运行镜像测试</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> <span class="token string">&#39;mytomcat9-1&#39;</span> <span class="token parameter variable">-p</span> <span class="token number">9999</span>:8080 mytomcat9:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typoradddbe220-c42a-496a-8320-a19fc06107c5.png" alt="image"></p><hr><h1 id="_16【掌握】dockerfile详解【5】" tabindex="-1"><a class="header-anchor" href="#_16【掌握】dockerfile详解【5】" aria-hidden="true">#</a> 16【掌握】Dockerfile详解【5】</h1><h2 id="_1-打jar包镜像" tabindex="-1"><a class="header-anchor" href="#_1-打jar包镜像" aria-hidden="true">#</a> 1，打jar包镜像</h2><h3 id="_1-1准备工作" tabindex="-1"><a class="header-anchor" href="#_1-1准备工作" aria-hidden="true">#</a> 1.1准备工作</h3><p>创建一个springboot项目并打jar包</p><p><img src="https://picgo.xingenhi.cn//typora4d4c6370-6fc1-484e-a707-0b4f35aebbcc.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora4f023751-8628-4beb-b36c-150672db9773.png" alt="image"></p><p>把jar包copy到linux /mydocker/myjarproject</p><p><img src="https://picgo.xingenhi.cn//typorab78a9ba7-3825-42a4-84ea-d49b2df01a4e.png" alt="image"></p><h3 id="_1-2编写dockerfile" tabindex="-1"><a class="header-anchor" href="#_1-2编写dockerfile" aria-hidden="true">#</a> 1.2编写Dockerfile</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FROM openjdk:8u181-jdk-alpine
ARG <span class="token assign-left variable">workdir</span><span class="token operator">=</span>/app
VOLUME <span class="token variable">\${workdir}</span>
WORKDIR <span class="token variable">\${workdir}</span>
ADD bjsxt.jar app.jar
EXPOSE <span class="token number">8080</span>
ENTRYPOINT <span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span>,<span class="token string">&quot;-jar&quot;</span>,<span class="token string">&quot;app.jar&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3构建镜像" tabindex="-1"><a class="header-anchor" href="#_1-3构建镜像" aria-hidden="true">#</a> 1.3构建镜像</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> myapp:1.0 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-4运行镜像" tabindex="-1"><a class="header-anchor" href="#_1-4运行镜像" aria-hidden="true">#</a> 1.4运行镜像</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> <span class="token string">&#39;myapp&#39;</span> <span class="token parameter variable">-p</span> <span class="token number">8888</span>:8080 myapp:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-5-测试" tabindex="-1"><a class="header-anchor" href="#_1-5-测试" aria-hidden="true">#</a> 1.5 测试</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http://192.168.15.134:8888/user/loadAllUser
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora94ec836a-1a1d-4bad-a78d-91051a9c7674.png" alt="image"></p><hr><hr><h2 id="_2-打war包镜像" tabindex="-1"><a class="header-anchor" href="#_2-打war包镜像" aria-hidden="true">#</a> 2，打war包镜像</h2><h3 id="_2-1准备工作" tabindex="-1"><a class="header-anchor" href="#_2-1准备工作" aria-hidden="true">#</a> 2.1准备工作</h3><p>把上面的项目改成war项目打war包放到linux</p><p><img src="https://picgo.xingenhi.cn//typoraa0a986ea-e7ad-4d6b-b527-439c23cec105.png" alt="image"></p><h3 id="_2-2编写dockerfile" tabindex="-1"><a class="header-anchor" href="#_2-2编写dockerfile" aria-hidden="true">#</a> 2.2编写Dockerfile</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#基于tomcat</span>
FROM tomcat:alpine
<span class="token comment">#作者信息</span>
MAINTAINER   laolei<span class="token operator">&lt;</span><span class="token number">78414842</span>@qq.com<span class="token operator">&gt;</span>
<span class="token comment">#声明环境变量</span>
ENV <span class="token assign-left variable">TOMCATPATH</span><span class="token operator">=</span>/usr/local/tomcat
<span class="token comment">#设置工作目录</span>
WORKDIR <span class="token variable">\${TOMCATPATH}</span>/webapps
<span class="token comment">#删除webapps下面的所有项目</span>
RUN <span class="token function">rm</span> <span class="token parameter variable">-rf</span> * 
<span class="token comment">#添加war包到当前的工作目录下的webapps</span>
COPY bjsxt.war ./bjsxt.war
<span class="token comment">#更改war包的名字</span>
RUN <span class="token function">mv</span> ./bjsxt.war ./ROOT.war
<span class="token comment">#显示webapps下面的文件</span>
RUN <span class="token function">ls</span> <span class="token parameter variable">-lh</span> ./
<span class="token comment">#解压war包</span>
RUN <span class="token function">unzip</span> ./ROOT.war <span class="token parameter variable">-d</span> ./
<span class="token comment">#删除ROOT.war包</span>
RUN <span class="token function">rm</span> <span class="token parameter variable">-rf</span> ./ROOT.war
EXPOSE <span class="token number">8080</span>
CMD <span class="token punctuation">[</span><span class="token string">&quot;bin/catalina.sh&quot;</span>, <span class="token string">&quot;run&quot;</span><span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3构建镜像" tabindex="-1"><a class="header-anchor" href="#_2-3构建镜像" aria-hidden="true">#</a> 2.3构建镜像</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> mywarapp:1.0 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-4运行镜像" tabindex="-1"><a class="header-anchor" href="#_2-4运行镜像" aria-hidden="true">#</a> 2.4运行镜像</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-p</span> <span class="token number">8888</span>:8080 mywarapp:1.0 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-5-测试" tabindex="-1"><a class="header-anchor" href="#_2-5-测试" aria-hidden="true">#</a> 2.5 测试</h3><p><img src="https://picgo.xingenhi.cn//typora47eee456-cb8f-41a5-b478-af95f7e57dd8.png" alt="image"></p><hr><hr><h2 id="_3-优化镜像" tabindex="-1"><a class="header-anchor" href="#_3-优化镜像" aria-hidden="true">#</a> 3，优化镜像</h2><p>分析上面的镜像里面有相同的部分，能不能把相同的部分抽出来成为一个镜像呢？(肯定是可以的)</p><h1 id="_17【熟悉】本地镜像发布到阿里云" tabindex="-1"><a class="header-anchor" href="#_17【熟悉】本地镜像发布到阿里云" aria-hidden="true">#</a> 17【熟悉】本地镜像发布到阿里云</h1><p>1，镜像的生成方法</p><hr><p>1，docker commit</p><p>2，Dockerfile</p><hr><h2 id="_2-本地镜像推送到阿里云" tabindex="-1"><a class="header-anchor" href="#_2-本地镜像推送到阿里云" aria-hidden="true">#</a> 2，本地镜像推送到阿里云</h2><h4 id="_2-1以修改的mywar的image为例来说明" tabindex="-1"><a class="header-anchor" href="#_2-1以修改的mywar的image为例来说明" aria-hidden="true">#</a> 2.1以修改的mywar的image为例来说明</h4><p><img src="https://picgo.xingenhi.cn//typora2f82984f-c0fc-47eb-98c7-c74324784d56.png" alt="image"></p><h4 id="_2-2登陆阿里开发平台" tabindex="-1"><a class="header-anchor" href="#_2-2登陆阿里开发平台" aria-hidden="true">#</a> 2.2登陆阿里开发平台</h4>`,386),O={href:"https://dev.aliyun.com/search.html",target:"_blank",rel:"noopener noreferrer"},R={href:"https://cr.console.aliyun.com/cn-hangzhou/instances/repositories",target:"_blank",rel:"noopener noreferrer"},A=i(`<p><img src="https://picgo.xingenhi.cn//typoraa070b8ba-b01a-4b00-9aa1-03ed4e966954.png" alt="image"></p><h4 id="_2-3创建镜像仓库" tabindex="-1"><a class="header-anchor" href="#_2-3创建镜像仓库" aria-hidden="true">#</a> 2.3创建镜像仓库</h4><p><img src="https://picgo.xingenhi.cn//typora2706b810-e04c-4973-ac0a-5dbfc22e100c.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora6333c063-94d2-4044-89e5-42749fcc8c65.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora18a696ba-8b97-4324-a5b4-b623b9a8cae3.png" alt="image"></p><h4 id="_2-4设置镜像仓库的访问密码" tabindex="-1"><a class="header-anchor" href="#_2-4设置镜像仓库的访问密码" aria-hidden="true">#</a> 2.4设置镜像仓库的访问密码</h4><p><img src="https://picgo.xingenhi.cn//typora1d33a3cf-c180-4421-b99f-a8a6186643f5.png" alt="image"></p><h4 id="_2-5-打开阿像页面" tabindex="-1"><a class="header-anchor" href="#_2-5-打开阿像页面" aria-hidden="true">#</a> 2.5 打开阿像页面</h4><p><img src="https://picgo.xingenhi.cn//typorad1f5669b-548f-4609-9f62-9969a0213be7.png" alt="image"></p><p>按里面的操作来就行了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">docker</span> login <span class="token parameter variable">--username</span><span class="token operator">=</span><span class="token number">78414842</span>@qq.com registry.cn-hangzhou.aliyuncs.com
$ <span class="token function">sudo</span> <span class="token function">docker</span> tag <span class="token punctuation">[</span>ImageId<span class="token punctuation">]</span> registry.cn-hangzhou.aliyuncs.com/laolei/mywar:<span class="token punctuation">[</span>镜像版本号<span class="token punctuation">]</span>
$ <span class="token function">sudo</span> <span class="token function">docker</span> push registry.cn-hangzhou.aliyuncs.com/laolei/mywar:<span class="token punctuation">[</span>镜像版本号<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora995b6018-4ec1-4ff3-bea3-efa276537162.png" alt="image"></p><h4 id="_2-6-的阿里的公有仓库里面查询试试" tabindex="-1"><a class="header-anchor" href="#_2-6-的阿里的公有仓库里面查询试试" aria-hidden="true">#</a> 2.6 的阿里的公有仓库里面查询试试</h4><p><img src="https://picgo.xingenhi.cn//typoraab903c86-992f-4f90-9908-ed221c93e631.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora6fa9f7a6-b85f-42b5-82ea-f11e408dc643.png" alt="image"></p><hr><hr><p>4，把阿里云的镜像下载到本地</p><p>4.1语法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull registry.cn-hangzhou.aliyuncs.com/laolei/mywar:<span class="token punctuation">[</span>镜像版本号<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4.2案例</p><p><img src="https://picgo.xingenhi.cn//typora1473b8ef-a733-44ff-87d7-400df74f26e8.png" alt="image"></p><p>4.3运行测试</p><p><img src="https://picgo.xingenhi.cn//typora79b3dd3f-a953-4555-a25e-74d25b65f8de.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0eb95aab-ccf5-4634-97c4-fa923962ae44.png" alt="image"></p><h1 id="_18【掌握】docker常用安装" tabindex="-1"><a class="header-anchor" href="#_18【掌握】docker常用安装" aria-hidden="true">#</a> 18【掌握】docker常用安装</h1><h2 id="_1-安装步骤梳理" tabindex="-1"><a class="header-anchor" href="#_1-安装步骤梳理" aria-hidden="true">#</a> 1，安装步骤梳理</h2><ol><li>搜索镜像</li><li>拉取镜像</li><li>查看镜像</li><li>启动镜像</li><li>停止容器</li><li>移除容器</li></ol><hr><h2 id="_2-安装tomcat" tabindex="-1"><a class="header-anchor" href="#_2-安装tomcat" aria-hidden="true">#</a> 2，安装tomcat</h2><p>docker hub好查找tomcat镜像 docker search tomcat</p><p>从docker hub上拉取tomcat镜像到本地 docker pull tomcat</p><p>使用docker images查看是否有拉取到tomcat</p><p>使用tomcat镜像运行镜像成为容器</p><p>docker run -it -p 8080:8080 tomcat</p><pre><code>    -p 主机端口:容器端口  

    -P 随机分配端口  

    -i 交互

    -t 终端   
</code></pre><hr><h2 id="_3-安装mysql" tabindex="-1"><a class="header-anchor" href="#_3-安装mysql" aria-hidden="true">#</a> 3，安装mysql</h2><p>docker hub上查找mysql镜像 docker search mysql</p><p><img src="https://picgo.xingenhi.cn//typora68031fe8-fb0f-414e-9b3b-439a3a71eac9.png" alt="image"></p><p>docker hub上拉取mysql镜像到本地 docker pull mysql:5.6</p><p><img src="https://picgo.xingenhi.cn//typora7ce92676-46f3-4a9a-a293-d1a883618fab.png" alt="image"></p><p>使用mysql5.6镜像创建容器运行存在问题</p><p><img src="https://picgo.xingenhi.cn//typora8cfe3f03-e492-4a53-b0e9-c6281730a1b3.png" alt="image"></p><p>这是因为mysql镜像一启动中在加设置用户名和密码</p><p>修改成下面的命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mysql <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token parameter variable">-d</span> mysql:5.6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typoraf4d2fb51-f918-4b89-906e-3601a0edbdc9.png" alt="image"></p><p>发现启动起来了</p><p>使用navcat连接一下</p><p><img src="https://picgo.xingenhi.cn//typora1becdce2-c015-4c6c-8251-d61e1e8b83dd.jpg" alt="image"></p><p>发现报错，这是因为docker 的mysql里面的localhost -root 的密码是启动时设置的是123456现%-root的没有设置</p><p>下面是解决方法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span>, 进入mysql的docker 容器
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql /bin/bash
<span class="token number">2</span>，登陆mysql
mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span>
输入密码
<span class="token number">3</span>,使用mysql数据库
use mysql
<span class="token number">4</span>,执行修改密码的命令
update user <span class="token builtin class-name">set</span> <span class="token assign-left variable">password</span><span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span> where <span class="token assign-left variable">host</span><span class="token operator">=</span><span class="token string">&#39;%&#39;</span>
<span class="token number">5</span>,重启mysql的docker 容器
exit退出
exit退出mysql容器
<span class="token function">docker</span> restart mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再就可以进行远程连接了哦</p><p><img src="https://picgo.xingenhi.cn//typoraeccc2326-19ea-4d19-83b2-62bec487ad40.jpg" alt="image"></p><p>如果出现使用宿主机IP无法访问的情况 在宿主机里面执行如下命令</p><p>请顺序运行以下命令：</p><p>nmcli connection modify docker0 connection.zone trusted</p><p>systemctl stop NetworkManager.service</p><p>firewall-cmd --permanent --zone=trusted --change-interface=docker0</p><p>systemctl start NetworkManager.service</p><p>nmcli connection modify docker0 connection.zone trusted</p><p>systemctl restart docker.service</p><p>再重启mysql和tomcat的容器</p><h1 id="_19-docker-安装-redis" tabindex="-1"><a class="header-anchor" href="#_19-docker-安装-redis" aria-hidden="true">#</a> 19-Docker 安装 Redis</h1><h1 id="docker-安装-redis" tabindex="-1"><a class="header-anchor" href="#docker-安装-redis" aria-hidden="true">#</a> Docker 安装 Redis</h1><p>Redis 是一个开源的使用 ANSI C 语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value 的 NoSQL 数据库，并提供多种语言的 API。</p><h3 id="_1、查看可用的-redis-版本" tabindex="-1"><a class="header-anchor" href="#_1、查看可用的-redis-版本" aria-hidden="true">#</a> 1、查看可用的 Redis 版本</h3>`,69),E={href:"https://hub.docker.com/_/redis?tab=tags",target:"_blank",rel:"noopener noreferrer"},I=i(`<p>可以通过 Sort by 查看其他版本的 Redis，默认是最新版本<strong>redis:latest</strong>。</p><p><img src="https://picgo.xingenhi.cn//typora0.35863917952796504.png" alt="image"></p><p>你也可以在下拉列表中找到其他你想要的版本：</p><p><img src="https://picgo.xingenhi.cn//typora0.22007907098842994.png" alt="image"></p><p>此外，我们还可以用docker search redis命令来查看可用版本：</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>$ docker search  redis
NAME                      DESCRIPTION                   STARS  OFFICIAL  AUTOMATED
redis                     Redis is an open source ...   2321   [OK]       
sameersbn/redis                                         32                   [OK]
torusware/speedus-redis   Always updated official ...   29     [OK]
bitnami/redis             Bitnami Redis Docker Image    22                   [OK]
anapsix/redis             11MB Redis server image ...   6                    [OK]
webhippie/redis           Docker images for redis       4                    [OK]
clue/redis-benchmark      A minimal docker image t...   3                    [OK]
williamyeh/redis          Redis image for Docker        3                    [OK]
unblibraries/redis        Leverages phusion/baseim...   2                    [OK]
greytip/redis             redis 3.0.3                   1                    [OK]
servivum/redis            Redis Docker Image            1                    [OK]
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、取最新版的-redis-镜像" tabindex="-1"><a class="header-anchor" href="#_2、取最新版的-redis-镜像" aria-hidden="true">#</a> 2、取最新版的 Redis 镜像</h3><p>这里我们拉取官方的最新版本的镜像：</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>$ docker pull redis:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.24507409726744753.png" alt="image"></p><h3 id="_3、查看本地镜像" tabindex="-1"><a class="header-anchor" href="#_3、查看本地镜像" aria-hidden="true">#</a> 3、查看本地镜像</h3><p>使用以下命令来查看是否已安装了 redis：</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>$ docker images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.1551525120172566.png" alt="image"></p><p>在上图中可以看到我们已经安装了最新版本（latest）的 redis 镜像。</p><h3 id="_4、运行容器" tabindex="-1"><a class="header-anchor" href="#_4、运行容器" aria-hidden="true">#</a> 4、运行容器</h3><p>安装完成后，我们可以使用以下命令来运行 redis 容器：</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>$ docker run -itd --restart=always --name redis -p 6379:6379 redis:4.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明：</p><ul><li><strong>-p 6379:6379</strong>：映射容器服务的 6379 端口到宿主机的 6379 端口。外部可以直接通过宿主机ip:6379 访问到 Redis 的服务。</li></ul><p><img src="https://picgo.xingenhi.cn//typora0.023720384391622638.png" alt="image"></p><h3 id="_5、安装成功" tabindex="-1"><a class="header-anchor" href="#_5、安装成功" aria-hidden="true">#</a> 5、安装成功</h3><p>最后我们可以通过<strong>docker ps</strong>命令查看容器的运行信息：</p><p><img src="https://picgo.xingenhi.cn//typora0.08002451602204692.png" alt="image"></p><p>接着我们通过 redis-cli 连接测试使用 redis 服务。</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>$ docker exec -it redis /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.6412505260124792.png" alt="image"></p>`,27),M={href:"https://www.runoob.com/docker/docker-install-redis.html",target:"_blank",rel:"noopener noreferrer"},C=i(`<hr><p>redis设置密码：</p><p>设置密码有两种方式。</p><h4 id="_1-命令行设置密码。" tabindex="-1"><a class="header-anchor" href="#_1-命令行设置密码。" aria-hidden="true">#</a> 1. 命令行设置密码。</h4><p>运行cmd切换到redis根目录，先启动服务端 <code>&gt;redis-server.exe</code> 另开一个cmd切换到redis根目录，启动客户端 <code>&gt;redis-cli.exe -h 127.0.0.1 -p 6379</code> 客户端使用config get requirepass命令查看密码</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>&gt;config get requirepass
1)&quot;requirepass&quot;
2)&quot;&quot;    //默认空
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端使用config set requirepass yourpassword命令设置密码</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>&gt;config set requirepass 123456
&gt;OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦设置密码，必须先验证通过密码，否则所有操作不可用</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>&gt;config get requirepass
(error)NOAUTH Authentication required
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用auth password验证密码</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>&gt;auth 123456
&gt;OK
&gt;config get requirepass
1)&quot;requirepass&quot;
2)&quot;123456&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以退出重新登录 <code>redis-cli.exe -h 127.0.0.1 -p 6379 -a 123456</code> 命令行设置的密码在服务重启后失效，所以一般不使用这种方式。</p><h4 id="_2-配置文件设置密码" tabindex="-1"><a class="header-anchor" href="#_2-配置文件设置密码" aria-hidden="true">#</a> 2. 配置文件设置密码</h4><p>在redis根目录下找到redis.windows.conf配置文件，搜索requirepass，找到注释密码行，添加密码如下：</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code># requirepass foobared
requirepass tenny     //注意，行前不能有空格
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>重启服务后，客户端重新登录后发现</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>&gt;config get requirepass
1)&quot;requirepass&quot;
2)&quot;&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>密码还是空？</p><p>网上查询后的办法：创建redis-server.exe 的快捷方式， 右键快捷方式属性，在目标后面增加redis.windows.conf， 这里就是关键，你虽然修改了.conf文件，但是exe却没有使用这个conf，所以我们需要<strong>手动指定</strong>一下exe按照<strong>修改后的conf</strong>运行，就OK了。</p><p>所以，这里我再一次重启redis服务(指定配置文件) <code>&gt;redis-server.exe redis.windows.conf</code> 客户端再重新登录，OK了。</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>&gt;redis-cli.exe -h 127.0.0.1 -p 6379 -a 123456
&gt;config get requirepass
1)&quot;requirepass&quot;
2)&quot;123456&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>疑问: redis目录下有两个配置文件redis.windows.conf和redis.windows-server.conf，看到网上有的人用前者有的人用后者，不清楚到底该用哪一个。看了下两个文件又没啥区别，个人就用前者了。</p>`,23),T={href:"https://www.cnblogs.com/tenny-peng/p/11543440.html",target:"_blank",rel:"noopener noreferrer"},N=e("h1",{id:"离线服务器下docker的部署与应用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#离线服务器下docker的部署与应用","aria-hidden":"true"},"#"),a(" 离线服务器下docker的部署与应用")],-1),S={id:"一分钟内形成docker的模糊概念",tabindex:"-1"},j=e("a",{class:"header-anchor",href:"#一分钟内形成docker的模糊概念","aria-hidden":"true"},"#",-1),L={href:"https://so.csdn.net/so/search?q=docker&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},U=i('<p>网上很多文章避免将docker与虚拟机混为一谈，但对于初学者来说，完全可以将docker当做一种虚拟机技术，只需要牢牢记住一点最重要的区别：docker依赖于物理机的内核，所以在linux下“生成的docker”，一般不能直接在windows下运行。（虚拟机是完完全全模拟了一台物理机，这是一个很大的区别）。 当你有了这样的一个模糊概念，接下来只需要快速了解docker的三个基础组成部分，<strong>仓库、镜像、容器</strong>，就可以快速的应用起来。类比虚拟机，<strong>镜像</strong>就相当于安装虚拟机时用的iso文件，<strong>仓库</strong>自然就是一个官方存放<strong>镜像</strong>的地方，方便用户直接“下载”，当你的虚拟机运行起来后，就相当于一个<strong>容器</strong>。</p><p><img src="https://picgo.xingenhi.cn//typora2018060217191255.png" alt="image"></p><h2 id="我为什么使用docker-需求是什么" tabindex="-1"><a class="header-anchor" href="#我为什么使用docker-需求是什么" aria-hidden="true">#</a> 我为什么使用docker，需求是什么</h2>',3),Y={href:"https://blog.csdn.net/u011372108/article/details/80549731",target:"_blank",rel:"noopener noreferrer"},H=i(`<h2 id="离线安装docker-部署yum源或者rpm-deb包安装" tabindex="-1"><a class="header-anchor" href="#离线安装docker-部署yum源或者rpm-deb包安装" aria-hidden="true">#</a> 离线安装docker：部署yum源或者rpm/deb包安装</h2><p>对于某些特定环境，服务器是不允许访问互联网的，因此不能直接从软件源下载docker进行安装，这就造成了很多<strong>依赖包</strong>安装的麻烦。在此可以有几种不同的离线安装方式可供选择： * 对于ubuntu系统，你只需一台联网的同环境的虚拟机就可以得到deb安装包和<strong>所有的依赖包</strong>。 <code>apt-get install --download-only docker</code>这条命令的具体用法可以自行搜索，解决令人头疼的依赖问题简直舒服。 * 对于centos系统，同样可以搜索所有的依赖包，通过rpm包的方法安装。但更加推荐部署本地yum源的方式，简单高效一劳永逸，部署步骤可自行搜索。</p><h2 id="镜像文件的导入导出" tabindex="-1"><a class="header-anchor" href="#镜像文件的导入导出" aria-hidden="true">#</a> 镜像文件的导入导出</h2><p>不能访问互联网，意味着docker提供的官方仓库也不可访问，因此需要我们在本地虚拟机<code>docker pull sitespeed.io</code>相应的镜像，可以简单测试是否可用。</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>[~]$ docker images
REPOSITORY                           TAG                 IMAGE ID            CREATED             SIZE
docker.io/hello-world                latest              e38bc07ac18e        7 weeks ago         1.85 kB
docker.io/sitespeedio/sitespeed.io   latest              38463a656de8        8 weeks ago         1.77 GB
[~]$ docker run hello-world
Hello from Docker!123456
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<code>docker images</code>看到本地存放了两个镜像，<code>docker run *</code>命令可以简单的在某个镜像文件基础上启动一个容器。 接下来要做的就是将镜像文件使用<strong>save</strong>命令导出为tar文件： <code>docker save 38463a656de8&gt; /root/sitespeed.tar</code> 通过物理设备传输至离线服务器上，通过<strong>load</strong>命令导入镜像： <code>docker load &lt; /root/sitespeed.tar</code> 导入完成后，用<strong>docker images</strong>命令查看，惊奇的发现REPOSITORY和TAG列均为，所以<strong>save</strong>命令保存的并不是所有的信息，具体的区别自行搜索即可。不过不影响使用，我们只要修改一下就可以正常使用了。 <code>docker tag 38463a656de8 docker.io/sitespeedio/sitespeed.io:latest</code></p><h2 id="docker镜像是如何制作的" tabindex="-1"><a class="header-anchor" href="#docker镜像是如何制作的" aria-hidden="true">#</a> docker镜像是如何制作的</h2><p>基于docker提供的服务，我们想要制作自己特定功能的docker镜像，只需要按照格式编写一个<strong>Dockerfile</strong>文件即可。一个简单的Dockerfile如下：</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>FROM ubuntu14.04
COPY start.sh /start.sh
RUN apt-get install -y gcc
CMD
ENTRYPOINT [&quot;/start.sh&quot;]12345
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FROM命令用于指定一个基础镜像(当然可以指定一个空镜像<strong>scratch</strong>)，COPY和RUN都是字面意思，CMD和ENTRYPOINT 指定docker启动时的运行命令，关于二者的区别，在此不细说，推荐使用ENTRYPOINT。 编写完成后，运行命令：<code>docker build -t my_name:my_tag</code> 通过<code>docker images</code>命令就可以看到本地已经有了刚刚创建的镜像，通过 <code>docker run my_name:my_tag</code>就可以启动并运行。 不得不提的是，Dockerfile中的每一条命令都会创建一个临时层，(类似于<strong>套娃</strong>的感觉)所以要注意命令的书写方式，比如多条RUN命令合为一条书写。同时，减少不必要的操作。例如，新建一个文件，在后面步骤又删除了，这样两次操作都会存储在最终的docker镜像中，生成镜像的体积也会增大，这就是网上一些不成熟的镜像体积很大的原因。 关于docker启动时的很多参数都可以自己按需查找，个人觉得-v和–entrypoint参数结合使用，会对大家测试一些小东西很有帮助。</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>-v 指定一个本地目录挂载到容器中指定位置
--entrypoint 指定docker运行入口，覆盖Dockerfile中的CMD和ENTRYPOINT12
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>docker run --entrypoint /app/start.sh -v /root/app:/app docker_img.io1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>首先通过**-v<strong>将本地的/root/app目录挂载到镜像中的/app目录，之后再通过</strong>–entryponit**指定运行入口为/app/start.sh。 有了这样的用法，我们可以通过Dockerfile建立一个包含各种运行环境的基础镜像，通过这样的方式，测试我们自己的小程序(虽然应用场景有限)。当然还是要牢记文章开头所说的，docker是需要基于物理机的内核。</p><h2 id="补充-关于docker的垃圾回收问题" tabindex="-1"><a class="header-anchor" href="#补充-关于docker的垃圾回收问题" aria-hidden="true">#</a> 补充：关于docker的垃圾回收问题</h2><p>在某次意外操作后，发现依赖docker的应用无法正常运行，排查原因发现竟然是磁盘空间不足，docker无法启动。发现在/var/lib/docker/目录下存在大量文件，原来docker每次运行时会在/var/lib/docker/containers以及/var/lib/docker/overlay下生成一些相关文件，具体作用可自行查阅。但问题在于docker运行结束并不会自动回收产生的这些记录文件，随着时间的积累，导致历史文件会越来越多。如何解决，docker官方提供了相关的垃圾回收功能，需手动运行，当然也可以自己编写垃圾回收守护进程，或者在github上有许多好的开源程序可供使用。</p><p><strong>本文主要叙述了一些简单的docker使用场景，若果个别地方有错误，请不吝指出。</strong></p>`,17);function $(F,K){const n=d("ExternalLinkIcon");return c(),t("div",null,[e("div",l,[p,h,e("p",null,[e("a",u,[a("课程视频"),s(n)])])]),m,e("p",null,[a("1，官网 "),e("a",b,[a("http://www.docker.com"),s(n)])]),e("p",null,[a("2，中文官网 "),e("a",v,[a("https://docker-cn.com"),s(n)])]),e("p",null,[a("3，仓库 "),e("a",g,[a("https://hub.docker.com"),s(n)])]),k,e("p",null,[e("a",f,[a("http://192.168.15.134:8080/"),s(n)])]),x,e("p",null,[a("通过网址可以找到目标镜像"),e("a",_,[a("https://hub.docker.com/explore/"),s(n)])]),y,e("p",null,[a("1.登录："),e("a",D,[a("https://dev.aliyun.com/search.html"),s(n)])]),q,e("p",null,[a("搜索网站:"),e("a",w,[a("https://hub.docker.com"),s(n)])]),P,e("p",null,[e("a",O,[a("https://dev.aliyun.com/search.html"),s(n)]),a(" 完成登陆")]),e("p",null,[a("打开"),e("a",R,[a("https://cr.console.aliyun.com/cn-hangzhou/instances/repositories"),s(n)])]),A,e("p",null,[a("访问 Redis 镜像库地址："),e("a",E,[a("https://hub.docker.com/_/redis?tab=tags"),s(n)]),a("。")]),I,e("p",null,[a("来源："),e("a",M,[a("https://www.runoob.com/docker/docker-install-redis.html"),s(n)])]),C,e("p",null,[a("来源："),e("a",T,[a("https://www.cnblogs.com/tenny-peng/p/11543440.html"),s(n)])]),N,e("h2",S,[j,a(" 一分钟内形成"),e("a",L,[a("docker"),s(n)]),a("的模糊概念")]),U,e("p",null,[a("在很多项目中，我们需要对一些url进行定时拨测，获取这些url的各种指标，例如响应时间、渲染时间等等，网上有许多开源的工具供我们挑选使用，sitespeed就是其中之一。sitespeed可以对访问过程进行度量，形成各种指标。访问过程进行录相、截图。指标分为浏览（体验）类指标、评分指标、DNS指标等几个维度。关于sitespeed更为详细的介绍可自行搜索。 然后由于其使用图形界面的浏览器，不太适合做为服务端程序运行，同时其各种依赖库的安装配置较为麻烦，故以docker的方式运行是比较合适的。"),e("a",Y,[a("https://www.sitespeed.io/"),s(n)]),a("在sitespeed.io的官方介绍上也指出所提供的docker镜像部署了所有的运行环境，对于用户只需直接使用即可。")]),H])}const G=r(o,[["render",$],["__file","Docker.html.vue"]]);export{G as default};
