import{_ as e,o as t,c as a,e as n}from"./app-f078eaf8.js";const i={},d=n(`<h1 id="docker-dockerfile" tabindex="-1"><a class="header-anchor" href="#docker-dockerfile" aria-hidden="true">#</a> Docker Dockerfile</h1><h3 id="什么是-dockerfile" tabindex="-1"><a class="header-anchor" href="#什么是-dockerfile" aria-hidden="true">#</a> 什么是 Dockerfile？</h3><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p><h3 id="使用-dockerfile-定制镜像" tabindex="-1"><a class="header-anchor" href="#使用-dockerfile-定制镜像" aria-hidden="true">#</a> 使用 Dockerfile 定制镜像</h3><p>这里仅讲解如何运行 Dockerfile 文件来定制一个镜像，具体 Dockerfile 文件内指令详解，将在下一节中介绍，这里你只要知道构建的流程即可。</p><p><strong>1、下面以定制一个 nginx 镜像（构建好的镜像内会有一个 /usr/share/nginx/html/index.html 文件）</strong></p><p>在一个空目录下，新建一个名为 Dockerfile 文件，并在文件内添加以下内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>FROM nginx
RUN echo &#39;这是一个本地构建的nginx镜像&#39; &gt; /usr/share/nginx/html/index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typoradockerfile1.png" alt="img"></p><p><strong>2、FROM 和 RUN 指令的作用</strong></p><p><strong>FROM</strong>：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。</p><p><strong>RUN</strong>：用于执行后面跟着的命令行命令。有以下俩种格式：</p><p>shell 格式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>RUN &lt;命令行命令&gt;
# &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>exec 格式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]
# 例如：
# RUN [&quot;./test.php&quot;, &quot;dev&quot;, &quot;offline&quot;] 等价于 RUN ./test.php dev offline
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。例如：</p><p>FROM centos RUN <strong>yum</strong> -y <strong>install</strong> <strong>wget</strong> RUN <strong>wget</strong> -O redis.tar.gz &quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot; RUN <strong>tar</strong> -xvf redis.tar.gz</p><p>以上执行会创建 3 层镜像。可简化为以下格式：</p><p>FROM centos RUN <strong>yum</strong> -y <strong>install</strong> <strong>wget</strong> <br><strong>&amp;&amp;</strong> <strong>wget</strong> -O redis.tar.gz &quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot; <br><strong>&amp;&amp;</strong> <strong>tar</strong> -xvf redis.tar.gz</p><p>如上，以 <strong>&amp;&amp;</strong> 符号连接命令，这样执行后，只会创建 1 层镜像。</p><h3 id="开始构建镜像" tabindex="-1"><a class="header-anchor" href="#开始构建镜像" aria-hidden="true">#</a> 开始构建镜像</h3><p>在 Dockerfile 文件的存放目录下，执行构建动作。</p><p>以下示例，通过目录下的 Dockerfile 构建一个 nginx:v3（镜像名称:镜像标签）。</p><p><strong>注</strong>：最后的 <strong>.</strong> 代表本次执行的上下文路径，下一节会介绍。</p><p>$ docker build -t nginx:v3 .</p><p><img src="https://picgo.xingenhi.cn//typoradockerfile2.png" alt="img"></p><p>以上显示，说明已经构建成功。</p><h3 id="上下文路径" tabindex="-1"><a class="header-anchor" href="#上下文路径" aria-hidden="true">#</a> 上下文路径</h3><p>上一节中，有提到指令最后一个 <strong>.</strong> 是上下文路径，那么什么是上下文路径呢？</p><p>$ docker build -t nginx:v3 .</p><p>上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。</p><p><strong>解析</strong>：由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。</p><p>如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。</p><p><strong>注意</strong>：上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。</p><hr><h2 id="指令详解" tabindex="-1"><a class="header-anchor" href="#指令详解" aria-hidden="true">#</a> 指令详解</h2><h3 id="copy" tabindex="-1"><a class="header-anchor" href="#copy" aria-hidden="true">#</a> COPY</h3><p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径。</p><p>格式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径1&gt;...  &lt;目标路径&gt;
COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源路径1&gt;&quot;,...  &quot;&lt;目标路径&gt;&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>[--chown=&lt;user&gt;:&lt;group&gt;]</code></strong>：可选参数，用户改变复制到容器内文件的拥有者和属组。</p><p><strong>&lt;源路径&gt;</strong>：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>COPY hom* /mydir/
COPY hom?.txt /mydir/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>&lt;目标路径&gt;</strong>：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。</p><h3 id="add" tabindex="-1"><a class="header-anchor" href="#add" aria-hidden="true">#</a> ADD</h3><p>ADD 指令和 COPY 的使用格类似（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：</p><ul><li>ADD 的优点：在执行 &lt;源文件&gt; 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 &lt;目标路径&gt;。</li><li>ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。</li></ul><h3 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd" aria-hidden="true">#</a> CMD</h3><p>类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:</p><ul><li>CMD 在docker run 时运行。</li><li>RUN 是在 docker build。</li></ul><p><strong>作用</strong>：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。</p><p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。</p><p>格式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CMD &lt;shell 命令&gt; 
CMD [&quot;&lt;可执行文件或命令&gt;&quot;,&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;,...] 
CMD [&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;,...]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推荐使用第二种格式，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是 sh。</p><h3 id="entrypoint" tabindex="-1"><a class="header-anchor" href="#entrypoint" aria-hidden="true">#</a> ENTRYPOINT</h3><p>类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。</p><p>但是, 如果运行 docker run 时使用了 --entrypoint 选项，将覆盖 ENTRYPOINT 指令指定的程序。</p><p><strong>优点</strong>：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。</p><p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。</p><p>格式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ENTRYPOINT [&quot;&lt;executeable&gt;&quot;,&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;,...]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参，以下示例会提到。</p><p>示例：</p><p>假设已通过 Dockerfile 构建了 nginx:test 镜像：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>FROM nginx

ENTRYPOINT [&quot;nginx&quot;, &quot;-c&quot;] # 定参
CMD [&quot;/etc/nginx/nginx.conf&quot;] # 变参 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1、不传参运行</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ docker run  nginx:test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>容器内会默认运行以下命令，启动主进程。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>nginx -c /etc/nginx/nginx.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、传参运行</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ docker run  nginx:test -c /etc/nginx/new.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>容器内会默认运行以下命令，启动主进程(/etc/nginx/new.conf:假设容器内已有此文件)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>nginx -c /etc/nginx/new.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="env" tabindex="-1"><a class="header-anchor" href="#env" aria-hidden="true">#</a> ENV</h3><p>设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。</p><p>格式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ENV &lt;key&gt; &lt;value&gt;
ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以下示例设置 NODE_VERSION = 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ENV NODE_VERSION 7.2.0

RUN curl -SLO &quot;https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz&quot; \\
  &amp;&amp; curl -SLO &quot;https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arg" tabindex="-1"><a class="header-anchor" href="#arg" aria-hidden="true">#</a> ARG</h3><p>构建参数，与 ENV 作用一致。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。</p><p>构建命令 docker build 中可以用 --build-arg &lt;参数名&gt;=&lt;值&gt; 来覆盖。</p><p>格式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="volume" tabindex="-1"><a class="header-anchor" href="#volume" aria-hidden="true">#</a> VOLUME</h3><p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</p><p>作用：</p><ul><li>避免重要的数据，因容器重启而丢失，这是非常致命的。</li><li>避免容器不断变大。</li></ul><p>格式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]
VOLUME &lt;路径&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。</p><h3 id="expose" tabindex="-1"><a class="header-anchor" href="#expose" aria-hidden="true">#</a> EXPOSE</h3><p>仅仅只是声明端口。</p><p>作用：</p><ul><li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。</li><li>在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</li></ul><p>格式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="workdir" tabindex="-1"><a class="header-anchor" href="#workdir" aria-hidden="true">#</a> WORKDIR</h3><p>指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。</p><p>docker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。</p><p>格式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>WORKDIR &lt;工作目录路径&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="user" tabindex="-1"><a class="header-anchor" href="#user" aria-hidden="true">#</a> USER</h3><p>用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。</p><p>格式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>USER &lt;用户名&gt;[:&lt;用户组&gt;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="healthcheck" tabindex="-1"><a class="header-anchor" href="#healthcheck" aria-hidden="true">#</a> HEALTHCHECK</h3><p>用于指定某个程序或者指令来监控 docker 容器服务的运行状态。</p><p>格式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>HEALTHCHECK [选项] CMD &lt;命令&gt;：设置检查容器健康状况的命令
HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令

HEALTHCHECK [选项] CMD &lt;命令&gt; : 这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="onbuild" tabindex="-1"><a class="header-anchor" href="#onbuild" aria-hidden="true">#</a> ONBUILD</h3><p>用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这时执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。</p><p>格式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ONBUILD &lt;其它指令&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="label" tabindex="-1"><a class="header-anchor" href="#label" aria-hidden="true">#</a> LABEL</h3><p>LABEL 指令用来给镜像添加一些元数据（metadata），以键值对的形式，语法格式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如我们可以添加镜像的作者：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>LABEL org.opencontainers.image.authors=&quot;runoob&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,121),r=[d];function l(s,o){return t(),a("div",null,r)}const u=e(i,[["render",l],["__file","Dockerfile.html.vue"]]);export{u as default};
