import{_ as p,r as n,o as d,c as o,a,b as r,d as t,e as i}from"./app-f078eaf8.js";const h={},s={class:"custom-container tip"},c=a("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[a("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[a("circle",{cx:"12",cy:"12",r:"9"}),a("path",{d:"M12 8h.01"}),a("path",{d:"M11 12h1v4h1"})])],-1),l=a("p",{class:"custom-container-title"},"TIP",-1),b={href:"https://ke.qq.com/course/2930572",target:"_blank",rel:"noopener noreferrer"},g=i(`<h1 id="mongodb" tabindex="-1"><a class="header-anchor" href="#mongodb" aria-hidden="true">#</a> Mongodb</h1><h1 id="_01mongodb简介" tabindex="-1"><a class="header-anchor" href="#_01mongodb简介" aria-hidden="true">#</a> 01Mongodb简介</h1><p>点赞、评论这两块可能操作起来比较频繁，并且，这两块的内容不怎么重要，因此可以用MongoDB</p><h2 id="什么是mongodb" tabindex="-1"><a class="header-anchor" href="#什么是mongodb" aria-hidden="true">#</a> 什么是MongoDB</h2><p>MongoDB 是一个跨平台的，面向文档的数据库（solr、Elasticsearch），是当前 NoSQL 数据库产品中最热门的一种。它介于关系数据库和非关系数据库之间，是非关系数据库当中功能最丰富，最像关系数据库的产品。它支持的数据结构非常松散，是类似JSON 的 BSON 格式，因此可以存储比较复杂的数据类型。比如表中表</p><h2 id="mongodb特点" tabindex="-1"><a class="header-anchor" href="#mongodb特点" aria-hidden="true">#</a> MongoDB特点</h2><p>MongoDB 最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库<strong>单表查询的绝大部分功能</strong>，而且还支持对数据建立索引。它是一个面向集合的,模式自由的文档型数据库。具体特点总结如下：</p><p>（1）面向集合存储，易于存储对象类型的数据</p><p>（2）模式自由</p><p>（3）支持动态查询</p><p>（4）支持完全索引，包含内部对象</p><p>（5）支持复制和故障恢复</p><p>（6）使用高效的二进制数据存储，包括大型对象（如视频等）</p><p>（7）自动处理碎片，以支持云计算层次的扩展性</p><p>（8）支持Python，PHP，Ruby，Java，C，C#，Javascript，Perl 及 C++语言的驱动程序，社区中也提供了对Erlang 及.NET 等平台的驱动程序</p><p>（9）文件存储格式为 BSON（一种 JSON 的扩展）</p><h2 id="mongodb体系结构" tabindex="-1"><a class="header-anchor" href="#mongodb体系结构" aria-hidden="true">#</a> MongoDB体系结构</h2><p>MongoDB 的逻辑结构是一种层次结构。主要由：文档(document)、集合(collection)、数据库(database)这三部分组成的。逻辑结构是面向用户的，用户使用MongoDB 开发应用程序使用的就是逻辑结构。</p><p>（1）MongoDB 的文档（document），相当于关系数据库中的一行记录。</p><p>（2）多个文档组成一个集合（collection），相当于关系数据库的表。</p><p>（3）多个集合（collection），逻辑上组织在一起，就是数据库（database）。</p><p>（4）一个MongoDB 实例支持多个数据库（database）</p><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><p>基本数据类型</p><p>null：用于表示空值或者不存在的字段，{“x”:null}</p><p>布尔型：布尔类型有两个值true和false，{“x”:true}</p><p>数值：mongo默认使用64为浮点型数值。{“x”：3.14}或{“x”：3}。对于整型值，可以使用NumberInt（4字节符号整数）或NumberLong（8字节符号整数），</p><p>{“x”:NumberInt(“3”)}{“x”:NumberLong(“3”)}</p><p>字符串：UTF-8字符串都可以表示为字符串类型的数据，{“x”：“呵呵”}</p><p>日期：日期被存储为自新纪元依赖经过的毫秒数，不存储时区，{“x”:new Date()}</p><p>正则表达式：查询时，使用正则表达式作为限定条件，语法与JavaScript的正则表达式相同，{“x”😕[abc]/}</p><p>数组：数据列表或数据集可以表示为数组，{“x”： [“a“，“b”,”c”]}</p><p>内嵌文档：文档可以嵌套其他文档，被嵌套的文档作为值来处理，{“x”:{“y”:3 }} ，表中表</p><p>对象Id：对象id是一个12字节的字符串，是文档的唯一标识，{“_id”: objectId() }</p><p>二进制数据：二进制数据是一个任意字节的字符串。它不能直接在shell中使用。如果要将非utf-字符保存到数据库中，二进制数据是唯一的方式。</p><p>代码：查询和文档中可以包括任何JavaScript代码，{“x”:function(){/…/}}</p><h1 id="_02常用命令" tabindex="-1"><a class="header-anchor" href="#_02常用命令" aria-hidden="true">#</a> 02常用命令</h1><h2 id="选择和创建数据库" tabindex="-1"><a class="header-anchor" href="#选择和创建数据库" aria-hidden="true">#</a> 选择和创建数据库</h2><p>选择和创建数据库的语法格式：</p><p>use 数据库名称</p><p>如果数据库不存在则自动创建</p><h2 id="插入与查询文档" tabindex="-1"><a class="header-anchor" href="#插入与查询文档" aria-hidden="true">#</a> 插入与查询文档</h2><p>插入文档的语法格式：</p><p>db.集合名称.insert({BSON格式的数据})</p><p>查询集合的语法格式：</p><p>db.集合名称.find()</p><p>查询用户id是233的数据</p><p>db.集合名称.find({userId: ‘233’})</p><p>只查询一条</p><p>db.集合名称.findOne({userId: ‘233’})</p><p>返回指定条数的记录</p><p>db.集合名称.find().limit(3)</p><h2 id="修改与删除文档" tabindex="-1"><a class="header-anchor" href="#修改与删除文档" aria-hidden="true">#</a> 修改与删除文档</h2><p>修改文档的语法结构：</p><p>Db.集合名称.update(条件,修改后的数据)</p><p>如果我们想修改_id为1的记录，名称为张三，输入以下语句：</p><p>Db.集合名称.update({_Id:ObjectId(1)}, {name:’张三’})</p><p>执行后，我们会发现，这条文档除了name字段其它字段都不见了，为了解决这个问题，</p><p>我们需要使用修改器$set来实现，命令如下：</p><p>Db.集合名称.update({_Id:1}, {$set:{name:’张三’}})</p><p>删除文档的语法结构：</p><p>Db.集合名称.remove(条件)</p><p>以下语句可以将数据全部删除，请慎用</p><p>Db.集合名称.remove({})</p><h2 id="统计条数" tabindex="-1"><a class="header-anchor" href="#统计条数" aria-hidden="true">#</a> 统计条数</h2><p>统计记录条件使用count()方法</p><p>Db.集合名称.count()</p><p>Db.集合名称.count(条件)</p><h2 id="模糊查询" tabindex="-1"><a class="header-anchor" href="#模糊查询" aria-hidden="true">#</a> 模糊查询</h2><p>MongoDB的模糊查询是通过正则表达式的方式实现的。格式为：</p><p>/字符串/</p><p>比如标题中包含java的帖子</p><p>Db.集合名称.find(title:/java/)</p><p>比如查询以“张”开头的名字</p><p>Db.集合名称.find(name: /^张/)</p><h2 id="大于-小于-不等于-包含-不包含" tabindex="-1"><a class="header-anchor" href="#大于-小于-不等于-包含-不包含" aria-hidden="true">#</a> 大于 小于 不等于 包含 不包含</h2><p>大于：$gt，小于$lt，大于等于$gte，小于等于$lte，不等于$ne，包含$in，不包含$nin</p><p>查询阅读数大于10的帖子</p><p>Db.集合名称.find({readNum:{$gt:10}})</p><p>查询评论集合中userid字段不包含1013和1014的文档</p><p>Db.集合名称.find({userId: {$nin:[‘1013’, ‘1014’]}})</p><h2 id="条件连接" tabindex="-1"><a class="header-anchor" href="#条件连接" aria-hidden="true">#</a> 条件连接</h2><p>我们如果需要查询同时满足两个以上条件，需要使用$and操作符将条件进行关联。（相</p><p>当于SQL的and）</p><p>格式为：</p><p>$and:[ { },{ },{ } ]</p><p>示例：查询帖子集合中readNum大于等于1000 并且小于2000的文档</p><p>Db.集合名称.find( {$and: [ {readNum:{$gte:1000}}, {readNum:{$lte: 2000}} ]} )</p><p>如果两个以上条件之间是或者的关系，我们使用$or 用法和and相同</p><p>$or:[ { },{ },{ } ]</p><p>列值增长</p><p>如果我们想实现对某列值在原有值的基础上进行增加或减少，可以使用$inc运算符来实现</p><p>Db.集合名称.update({_id:1}, {$inc:{readNum:NumberInt(2)}})</p><h1 id="_03java操作mongodb" tabindex="-1"><a class="header-anchor" href="#_03java操作mongodb" aria-hidden="true">#</a> 03Java操作MongoDB</h1><p>SpringDataMongoDB：SpringData家族成员之一，使用jpa语法，非常方便的就可以操作MongoDB。</p><p>环境搭建：</p><p>引入包</p><table><thead><tr><th>org.springframework.boot<br>spring-boot‐starter‐data‐mongodb</th></tr></thead></table><p>配置文件：</p><table><thead><tr><th>Spring:<br>Data:<br>Mongodb:<br> Host:<br> Database:</th></tr></thead></table><p>创建实体类，建议加上_id字段，并且加上@Id注解。</p><p>创建Dao</p><table><thead><tr><th>Public interface XxxDao extends MongoRepository&lt;实体, 主键类型&gt;</th></tr></thead></table><p>JPA语法</p><p><img src="https://picgo.xingenhi.cn//typora0.6194545816232591.png" alt="image"></p><h1 id="_04springdatamongodb提高" tabindex="-1"><a class="header-anchor" href="#_04springdatamongodb提高" aria-hidden="true">#</a> 04SpringDataMongoDB提高</h1><p>SpringDataMongoDB在使用Jpa规范的时候，虽然已经很强大，但是依然有不能做的事情</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>@Data
  public class Comment implements Serializable {
      /***     ** 评论__id*     */*    @Id
    private String id;
    /***     ** 评价帖子     */    private Blog blog;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如上面这个类，现在我需要通过blog的blogTitle进行模糊查询，怎么操作？</p><p>这种场景下，使用jpa规范就显得力不从心。</p><p>这里需要使用@Query</p><p>@Query注解中，value属性可以让我们像直接写mongo语句那样操作mongodb，fields属性，可以指定要查询的列，格式{列名:1,列名:1}</p><p>?数字占位符的作用：使用?0就代表取出参数中第0个位置的参数，同理，使用?1代表取出第1个位置的参数</p><p>注意：如果需要模糊查询，不能使用mongodb中的/xxx/形式的正则表达式，语法如下</p><p>{列名: {$regex: 字符串}}</p><p>如果需要取出参数中指定字段中的某个字段，需要使用SpEl表达式</p><p>格式：#{}，在这里，如果需要根据下标位置取参数，需要用中括号括起来，如下</p><p>?#{[0]}。在这里，取出来的参数如果是对象的话，可以直接用 . 再继续取出它里面的属性。、</p><p>如：?#{[0].blog.blogTitle}</p><p>通过@Query注解加上SpEL表达式，可以让我们更灵活的操作 MongoDB</p>`,120);function u(m,x){const e=n("ExternalLinkIcon");return d(),o("div",null,[a("div",s,[c,l,a("p",null,[a("a",b,[r("视频链接"),t(e)])])]),g])}const f=p(h,[["render",u],["__file","MongoDB.html.vue"]]);export{f as default};
