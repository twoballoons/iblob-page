import{_ as p,r as o,o as c,c as i,a as n,b as s,d as t,e}from"./app-f078eaf8.js";const l={},u={class:"custom-container tip"},r=n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])],-1),k=n("p",{class:"custom-container-title"},"TIP",-1),d={href:"https://www.bilibili.com/video/BV1QJ411e7vN",target:"_blank",rel:"noopener noreferrer"},m=e(`<h1 id="_01【熟悉】activemq概述" tabindex="-1"><a class="header-anchor" href="#_01【熟悉】activemq概述" aria-hidden="true">#</a> 01【熟悉】ActiveMQ概述</h1><h2 id="_1-生活中的案例-生产中的问题-为什么要使用mq" tabindex="-1"><a class="header-anchor" href="#_1-生活中的案例-生产中的问题-为什么要使用mq" aria-hidden="true">#</a> 1，生活中的案例[生产中的问题]为什么要使用MQ</h2><p>1，学生问问题的例子</p><p>2，分布式项目中RPC的调用处理时间过长的问题</p><p><img src="https://picgo.xingenhi.cn//typora0.7091671328605158.png" alt="image"></p><h2 id="_2-为什么要使用mq" tabindex="-1"><a class="header-anchor" href="#_2-为什么要使用mq" aria-hidden="true">#</a> 2，为什么要使用MQ</h2><p>微服务架构后，链式调用是我们在写程序时候的一般流程，为了这完成一个整体功能会把它拆分成多个函数（或子模块）比如模块A调用模块B，模块B调用模块C，模块C调用模块D。但是大型分布式应用中，系统间的RPC交互复杂，一个功能后面要调用上百个接口并非不可能，从单机架构过渡到分布式微服务架构，这样的架构有没有问题呢？有</p><pre><code>根据上面的风个问题，在设置系统时可以明确要克到的目标
</code></pre><p>1，要做到系统解耦，当新的模块进来时，可以做到代码改动最小; <strong>能够解耦</strong></p><p>2，设置流程缓冲池，可以让后端系统按自身吞吐能力进行消费，不被冲垮; <strong>能够削峰</strong></p><p>3，强弱依赖梳理能把非关键调用链路的操作异步化并提升整体系统的吞吐能力;<strong>能够异步</strong></p><h2 id="_3-什么是mq" tabindex="-1"><a class="header-anchor" href="#_3-什么是mq" aria-hidden="true">#</a> 3，什么是MQ</h2><h3 id="_3-1-定义" tabindex="-1"><a class="header-anchor" href="#_3-1-定义" aria-hidden="true">#</a> 3.1，定义</h3><p>面向消息的中间件(message-oriented middleware0) MOM能够很好的解决以上的问题。</p><p>是指利用高效可靠的消息传递机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。</p><p>通过提供消息传递和消息排队模型在分布式环境下提供应用解耦，弹性伸缩，冗余存储，流量削峰，异步通信，数据同步等</p><p>大致流程</p><p>发送者把消息发给消息服务器，消息服务器把消息存放在若干队列/主题中，在合适的时候，消息服务器会把消息转发给接受者。</p><p>在这个过程中，发送和接受是异步的,也就是发送无需等待，发送者和接受者的生命周期也没有必然关系</p><p>在发布pub/订阅sub模式下，也可以完成一对多的通信，可以让一个消息有多个接受者[微信订阅号就是这样的]</p><h3 id="_3-2-特点" tabindex="-1"><a class="header-anchor" href="#_3-2-特点" aria-hidden="true">#</a> 3.2，特点</h3><h4 id="_3-2-1-异步处理模式" tabindex="-1"><a class="header-anchor" href="#_3-2-1-异步处理模式" aria-hidden="true">#</a> 3.2.1，异步处理模式</h4><p>消息发送者可以发送一个消息而无需等待响应。消息发送者把消息发送到一条虚拟的通道(主题或队列)上;</p><p>消息接收者则订阅或监听该通道。一条信息可能最络转发给一个或多个消息接收者，这些接收者都无需对消息发送者做出回应。整个过程都是异步的。</p><p>案例：</p><p>也就是说，一个系统和另一个系统这间进行通信的时候，假如系统A希望发送一个消息给系统B，让它去处理，但是系统A不关注系统B到底怎么处理或者有没有处理好，所以系统A把消息发送给MQ，然后就不管这条消息的“死活” 了，接着系统B从MQ里面消费出来处理即可。至于怎么处理，是否处理完毕，什么时候处理，都是系统B的事，与系统A无关。</p><p>这样的一种通信方式，就是所谓的“异步”通信方式，对于系统A来说，只要把消息发给MQ,然后系统B就会异步处去进行处理了，系统A不能“同步”的等待系统B处理完。这样的好处是什么呢？解耦</p><h4 id="_3-2-2-应用系统的解耦" tabindex="-1"><a class="header-anchor" href="#_3-2-2-应用系统的解耦" aria-hidden="true">#</a> 3.2.2，应用系统的解耦</h4><p>发送者和接收者不必了解对方，只需要确认消息</p><p>发送者和接收者不必同时在线</p><h4 id="_3-2-3-现实中的业务" tabindex="-1"><a class="header-anchor" href="#_3-2-3-现实中的业务" aria-hidden="true">#</a> 3.2.3，现实中的业务</h4><p><img src="https://picgo.xingenhi.cn//typora0.2275095893698076.png" alt="image"></p><h2 id="_4-什么是activemq" tabindex="-1"><a class="header-anchor" href="#_4-什么是activemq" aria-hidden="true">#</a> <strong>4，什么是ActiveMQ</strong></h2><pre><code>     ActiveMQ是Apache出品，最流行的，能力强劲的开源消息总线。ActiveMQ 是一个完全支持JMS1.1和J2EE 1.4规范的 JMS Provider实现,尽管JMS规范出台已经是很久的事情了,但是JMS在当今的J2EE应用中间仍然扮演着特殊的地位。
</code></pre><p>主要特点：</p><p>1. 多种语言和协议编写客户端。语言: Java, C, C++, C#, Ruby, Perl, Python, PHP。应用协议: OpenWire,Stomp REST,WS Notification,XMPP,AMQP</p><p>2. 完全支持JMS1.1和J2EE 1.4规范 (持久化,XA消息,事务)</p><p>3. 对Spring的支持,ActiveMQ可以很容易内嵌到使用Spring的系统里面去,而且也支持Spring2.0的特性</p><p>4. 通过了常见J2EE服务器(如 Geronimo,JBoss 4, GlassFish,WebLogic)的测试,其中通过JCA 1.5 resourceadaptors的配置,可以让ActiveMQ可以自动的部署到任何兼容J2EE1.4 商业服务器上</p><p>5. 支持多种传送协议:in-VM,TCP,SSL,NIO,UDP,JGroups,JXTA</p><p>6. 支持通过JDBC和journal提供高速的消息持久化</p><p>7. 从设计上保证了高性能的集群,客户端-服务器,点对点</p><p>8. 支持Ajax</p><p>9. 支持与Axis（Apache Extensible Interaction System 即阿帕奇可扩展交互系统。Axis本质上就是一个SOAP引擎，提供创建服务器端、客户端和网关SOAP操作的基本框架）的整合</p><p>10. 可以很容易得调用内嵌JMS provider,进行测试</p><p>11.支持集群</p><h2 id="_5-学什么" tabindex="-1"><a class="header-anchor" href="#_5-学什么" aria-hidden="true">#</a> 5，学什么</h2><p>1，异步消息的消费和处理</p><p>2，控制消息的消费顺序</p><p>3，和spring及Springboot的整合</p><p>4，集群容错的配置</p><p>……………………</p><h1 id="_02【了解】activemq在windows下的安装" tabindex="-1"><a class="header-anchor" href="#_02【了解】activemq在windows下的安装" aria-hidden="true">#</a> 02【了解】ActiveMQ在windows下的安装</h1><h2 id="_1-下载" tabindex="-1"><a class="header-anchor" href="#_1-下载" aria-hidden="true">#</a> 1，下载</h2>`,54),v={href:"http://activemq.apache.org/components/classic/download/",target:"_blank",rel:"noopener noreferrer"},g=e('<p><img src="https://picgo.xingenhi.cn//typora0.29372627612942304.png" alt="image"></p><hr><h2 id="_2-安装" tabindex="-1"><a class="header-anchor" href="#_2-安装" aria-hidden="true">#</a> 2， 安装</h2><p>安装步骤：</p><p>第一步：安装jdk，需要jdk1.7以上版本【一定要配置JAVA_HOME】</p><p>第二步：解压缩activeMQ的压缩包。</p><p><img src="https://picgo.xingenhi.cn//typora0.9430584402380384.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.00034071544704534525.png" alt="image"></p><p>目录说明</p><p>①bin 启动和停止的相关文件目录</p><p>②conf配置目录【用户名和密码】</p><p>③data 数据目录</p><p>④docs 文档目录</p><p>⑤examples 官方案例目录</p><p>⑥lib运行时的支持jar包</p><p>⑦webapps官方应用程序目录</p><p>⑧activemq-all.*.jar官方jar包</p><p>第三步：启动和停止。看自己的系统位数进入相关的目录</p><p><img src="https://picgo.xingenhi.cn//typora0.8949824548535333.png" alt="image"></p><p>启动：</p><p><img src="https://picgo.xingenhi.cn//typora0.7329423420366623.png" alt="image"></p><p>停止：关闭窗口就可以啦</p><p>第四步：访问后台管理。</p><p>http://127.0.0.1:8161/index.html</p><p><img src="https://picgo.xingenhi.cn//typora0.1009622917587299.png" alt="image"></p>',25),b={href:"http://IP:8161/admin",target:"_blank",rel:"noopener noreferrer"},h=e(`<p>输入用户名和密码 admin/admin</p><p><img src="https://picgo.xingenhi.cn//typora0.8088029388315301.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.3000415264635825.png" alt="image"></p><h2 id="_3-修改8161端口" tabindex="-1"><a class="header-anchor" href="#_3-修改8161端口" aria-hidden="true">#</a> 3， 修改8161端口</h2><p>conf/jetty.xml</p><p><img src="https://picgo.xingenhi.cn//typora0.7083007539163506.png" alt="image"></p><h2 id="_4-修改登陆用户名和密码" tabindex="-1"><a class="header-anchor" href="#_4-修改登陆用户名和密码" aria-hidden="true">#</a> 4， 修改登陆用户名和密码</h2><p>conf/users.properties</p><p><img src="https://picgo.xingenhi.cn//typora0.20238844318482987.png" alt="image"></p><h1 id="_03【掌握】activemq在linux下的安装" tabindex="-1"><a class="header-anchor" href="#_03【掌握】activemq在linux下的安装" aria-hidden="true">#</a> 03【掌握】ActiveMQ在Linux下的安装</h1><h2 id="_1-下载-1" tabindex="-1"><a class="header-anchor" href="#_1-下载-1" aria-hidden="true">#</a> 1，下载</h2><pre><code>    下载地址[http://activemq.apache.org/activemq-5156-release.html](http://activemq.apache.org/activemq-5156-release.html)
</code></pre><p><img src="https://picgo.xingenhi.cn//typora0.6002290632697614.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.7580403269259061.png" alt="image"></p><h2 id="_2-安装-1" tabindex="-1"><a class="header-anchor" href="#_2-安装-1" aria-hidden="true">#</a> 2，安装</h2><p>1，配置jdk环境变量【不会的回看Linux】</p><p>2，上传mq的压缩包到Linux</p><p><img src="https://picgo.xingenhi.cn//typora0.5514547352854222.png" alt="image"></p><p>3，解压到usr/local/ActiveMQ</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>mkdir /usr/local/ActiveMQ

tar -zxvf apache-activemq-5.15.10-bin.tar.gz -C /usr/local/ActiveMQ/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5，配置用户名和密码[默认为admin/admin]</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>vim conf/users.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.26428473661332946.png" alt="image"></p><p>4，启动和停止重启</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>./bin/activemq start
./bin/activemq stop
./bin/activemq restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-放行端口" tabindex="-1"><a class="header-anchor" href="#_3-放行端口" aria-hidden="true">#</a> 3，放行端口</h2><p>8161</p><p>61616</p><p>访问</p>`,29),y={href:"http://IP:8161/admin",target:"_blank",rel:"noopener noreferrer"},f=e(`<p>输入用户名和密码 admin/admin</p><p><img src="https://picgo.xingenhi.cn//typora0.928928669838061.png" alt="image"></p><h2 id="_4-测试发消息" tabindex="-1"><a class="header-anchor" href="#_4-测试发消息" aria-hidden="true">#</a> 4，测试发消息</h2><p><img src="https://picgo.xingenhi.cn//typora0.7628468973092692.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.8016471078864712.png" alt="image"></p><h2 id="_5-端口说明" tabindex="-1"><a class="header-anchor" href="#_5-端口说明" aria-hidden="true">#</a> 5，端口说明</h2><p>ActiveMQ是使用61616端口提供的JMS服务</p><p>使用8161提供管理控制台的服务</p><h1 id="_04【掌握】消息发送模式和接口说明" tabindex="-1"><a class="header-anchor" href="#_04【掌握】消息发送模式和接口说明" aria-hidden="true">#</a> 04【掌握】消息发送模式和接口说明</h1><h2 id="_1-jms消息发送模式" tabindex="-1"><a class="header-anchor" href="#_1-jms消息发送模式" aria-hidden="true">#</a> 1，JMS消息发送模式</h2><p><img src="https://picgo.xingenhi.cn//typora0.2026569265534725.png" alt="image"></p><pre><code>    在**点对点**或队列模型下，一个生产者向一个特定的队列发布消息，一个消费者从该队列中读取消息。这里，生产者知道消费者的队列，并直接将消息发送到消费者的队列。这种模式被概括为：只有一个消费者将获得消息。生产者不需要在接收者消费该消息期间处于运行状态，接收者也同样不需要在消息发送时处于运行状态。每一个成功处理的消息都由接收者签收。

    **发布者／订阅者**模型支持向一个特定的消息主题发布消息。0或多个订阅者可能对接收来自特定消息主题的消息感兴趣。在这种模型下，发布者和订阅者彼此不知道对方。这种模式好比是匿名公告板。这种模式被概括为：多个消费者可以获得消息.在发布者和订阅者之间存在时间依赖性。发布者需要建立一个订阅（subscription），以便客户能够购订阅。订阅者必须保持持续的活动状态以接收消息，除非订阅者建立了持久的订阅。在那种情况下，在订阅者未连接时发布的消息将在订阅者重新连接时重新发布。
</code></pre><h2 id="_2-jms应用程序接口" tabindex="-1"><a class="header-anchor" href="#_2-jms应用程序接口" aria-hidden="true">#</a> 2，JMS应用程序接口</h2><p><img src="https://picgo.xingenhi.cn//typora0.7529029568074845.png" alt="image"></p><p><strong>1，ConnectionFactory</strong> <strong>接口（连接工厂）</strong></p><p>用户用来创建到JMS提供者的连接的被管对象。JMS客户通过可移植的接口访问连接，这样当下层的实现改变时，代码不需要进行修改。管理员在JNDI名字空间中配置连接工厂，这样，JMS客户才能够查找到它们。根据消息类型的不同，用户将使用队列连接工厂，或者主题连接工厂。</p><p><strong>2，Connection</strong> <strong>接口（连接）</strong></p><p>连接代表了应用程序和消息服务器之间的通信链路。在获得了连接工厂后，就可以创建一个与JMS提供者的连接。根据不同的连接类型，连接允许用户创建会话，以发送和接收队列和主题到目标。</p><p><strong>3，Destination</strong> <strong>接口（目标）</strong></p><p>目标是一个包装了消息目标标识符的被管对象，消息目标是指消息发布和接收的地点，或者是队列，或者是主题。JMS管理员创建这些对象，然后用户通过JNDI发现它们。和连接工厂一样，管理员可以创建两种类型的目标，点对点模型的队列，以及发布者／订阅者模型的主题。</p><p><strong>4，MessageConsumer</strong> <strong>接口（消息消费者）</strong></p><p>由会话创建的对象，用于接收发送到目标的消息。消费者可以同步地（阻塞模式），或异步（非阻塞）接收队列和主题类型的消息。</p><p><strong>5，MessageProducer</strong> <strong>接口（消息生产者）</strong></p><p>由会话创建的对象，用于发送消息到目标。用户可以创建某个目标的发送者，也可以创建一个通用的发送者，在发送消息时指定目标。</p><p><strong>6，Message</strong> <strong>接口（消息）</strong></p><p>是在消费者和生产者之间传送的对象，也就是说从一个应用程序创送到另一个应用程序。一个消息有三个主要部分：</p><p>消息头（必须）：包含用于识别和为消息寻找路由的操作设置。</p><p>一组消息属性（可选）：包含额外的属性，支持其他提供者和用户的兼容。可以创建定制的字段和过滤器（消息选择器）。</p><p>一个消息体（可选）：允许用户创建五种类型的消息（文本消息，映射消息，字节消息，流消息和对象消息）。</p><p>消息接口非常灵活，并提供了许多方式来定制消息的内容。</p><p><strong>7，Session</strong> <strong>接口（会话）</strong></p><p>表示一个单线程的上下文，用于发送和接收消息。由于会话是单线程的，所以消息是连续的，就是说消息是按照发送的顺序一个一个接收的。会话的好处是它支持事务。如果用户选择了事务支持，会话上下文将保存一组消息，直到事务被提交才发送这些消息。在提交事务之前，用户可以使用回滚操作取消这些消息。一个会话允许用户创建消息生产者来发送消息，创建消息消费者来接收消息。</p><p>对比JDBC</p><p><img src="https://picgo.xingenhi.cn//typora0.03893326231697481.png" alt="image"></p><h1 id="_05【掌握】activemq点对点【队列】模式" tabindex="-1"><a class="header-anchor" href="#_05【掌握】activemq点对点【队列】模式" aria-hidden="true">#</a> 05【掌握】ActiveMQ点对点【队列】模式</h1><h2 id="_1-创建项目加入maven依赖" tabindex="-1"><a class="header-anchor" href="#_1-创建项目加入maven依赖" aria-hidden="true">#</a> 1，创建项目加入maven依赖</h2><p><img src="https://picgo.xingenhi.cn//typora0.737890193119704.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.9461965016993991.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.14707318275832676.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.5930315190351884.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.5208617356752047.png" alt="image"></p><h2 id="_2-加入依赖" tabindex="-1"><a class="header-anchor" href="#_2-加入依赖" aria-hidden="true">#</a> 2，加入依赖</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>activemq需要的jar包不是使用最新版本的。有<span class="token constant">BUG</span> <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>activemq<span class="token operator">-</span>all<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">5.15</span><span class="token number">.12</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>下面是log4等通用配置 <span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>slf4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>slf4j<span class="token operator">-</span>api<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">1.7</span><span class="token number">.25</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">1.16</span><span class="token number">.18</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-创建生产者发送消息" tabindex="-1"><a class="header-anchor" href="#_3-创建生产者发送消息" aria-hidden="true">#</a> 3，创建生产者发送消息</h2><p>第一步：创建ConnectionFactory对象，需要指定服务端ip及端口号。</p><p>第二步：使用ConnectionFactory对象创建一个Connection对象。</p><p>第三步：开启连接，调用Connection对象的start方法。</p><p>第四步：使用Connection对象创建一个Session对象。</p><p>第五步：使用Session对象创建一个Destination对象（topic、queue），此处创建一个Queue对象。</p><p>第六步：使用Session对象创建一个Producer对象。</p><p>第七步：创建一个Message对象，创建一个TextMessage对象。</p><p>第八步：使用Producer对象发送消息。</p><p>第九步：关闭资源。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span></span><span class="token class-name">ActiveMQConnectionFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :消息生产者
 * @Author : 辛根
 * @Date : 2020/4/6 13:29
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMessageProducer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">BROKER_URL</span> <span class="token operator">=</span> <span class="token string">&quot;tcp://129.211.39.189:61616&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">QUEUE_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;queue-test&quot;</span><span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JMSException</span> <span class="token punctuation">{</span>
        <span class="token comment">//    第一步：创建ConnectionFactory对象，需要指定服务端ip及端口号。</span>
        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token constant">BROKER_URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//    第二步：使用ConnectionFactory对象创建一个Connection对象。</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//    第三步：开启连接，调用Connection对象的start方法。</span>
        connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//    第四步：使用Connection对象创建一个Session对象。</span>
        <span class="token comment">//第一个参数：是否开启事务。true：开启事务，第二个参数忽略。</span>
        <span class="token comment">//第二个参数：当第一个参数为false时，才有意义。消息的应答模式。1、自动应答2、手动应答。一般是自动应答。</span>
        <span class="token class-name">Session</span> session <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">Session</span><span class="token punctuation">.</span><span class="token constant">AUTO_ACKNOWLEDGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//    第五步：使用Session对象创建一个Destination对象（topic、queue），此处创建一个Queue对象。</span>
        <span class="token class-name">Queue</span> queue <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createQueue</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//    第六步：使用Session对象创建一个Producer对象。</span>
        <span class="token class-name">MessageProducer</span> producer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createProducer</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//    第七步：创建一个Message对象，创建一个TextMessage对象。</span>
        <span class="token class-name">TextMessage</span> textMessage <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createTextMessage</span><span class="token punctuation">(</span><span class="token string">&quot;我是一条测试消息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//    第八步：使用Producer对象发送消息。</span>
        producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>textMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//    第九步：关闭资源。</span>
        producer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费发送成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-发送成功这后查询看" tabindex="-1"><a class="header-anchor" href="#_4-发送成功这后查询看" aria-hidden="true">#</a> 4，发送成功这后查询看</h2><p><img src="https://picgo.xingenhi.cn//typorab1958134-822c-48af-852d-e80900197ca3.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typorae92a16a4-8041-4f85-a13f-7fd565fa3ca8.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typoraa27f42c6-12da-4819-952a-cfbac66c930c.png" alt="image"></p><h2 id="_5-消息消费之同步消费" tabindex="-1"><a class="header-anchor" href="#_5-消息消费之同步消费" aria-hidden="true">#</a> 5，消息消费之同步消费</h2><p>第一步：创建一个连接工厂</p><p>第二步：创建一个连接</p><p>第三步：打开连接</p><p>第四步：创建会话</p><p>第五步：创建目的地</p><p>第六步：创建消费者</p><p>第七步：接收消息</p><p>第八步：关闭资源</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span></span><span class="token class-name">ActiveMQConnectionFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :同步消费
 * @Author : 辛根
 * @Date : 2020/4/6 13:50
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMessageSyncConsumer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">BROKER_URL</span> <span class="token operator">=</span> <span class="token string">&quot;tcp://129.211.39.189:61616&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">QUEUE_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;queue-test&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JMSException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 第一步：创建ConnectionFactory对象，需要指定服务端ip及端口号。</span>
        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token constant">BROKER_URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第二步：使用ConnectionFactory对象创建一个Connection对象。</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第三步：开启连接，调用Connection对象的start方法。</span>
        connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第四步：使用Connection对象创建一个Session对象。</span>
        <span class="token comment">//第一个参数：是否开启事务。true：开启事务，第二个参数忽略。</span>
        <span class="token comment">//第二个参数：当第一个参数为false时，才有意义。消息的应答模式。1、自动应答2、手动应答。一般是自动应答。</span>
        <span class="token class-name">Session</span> session <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">Session</span><span class="token punctuation">.</span><span class="token constant">AUTO_ACKNOWLEDGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第五步：使用Session对象创建一个Destination对象（topic、queue），此处创建一个Queue对象。</span>
        <span class="token class-name">Queue</span> queue <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createQueue</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第六步：使用Session对象创建一个MessageConsumer对象。</span>
        <span class="token class-name">MessageConsumer</span> consumer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createConsumer</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第七步：使用consumer接收消息</span>
        <span class="token doc-comment comment">/**
         * receive的说明默认没参数是一直等待
         * receive(long time)   time代表阻塞时长，时间一过，不等了
         */</span>
        <span class="token class-name">TextMessage</span> message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextMessage</span><span class="token punctuation">)</span> consumer<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//因为前后发送的是TextMesssage</span>
        <span class="token comment">// 第八步：输出消息</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第九步：关闭资源。</span>
        consumer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消息消费成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-消息消费之同步消费-循环消费" tabindex="-1"><a class="header-anchor" href="#_6-消息消费之同步消费-循环消费" aria-hidden="true">#</a> 6，消息消费之同步消费[循环消费]</h2><p><img src="https://picgo.xingenhi.cn//typorab45df350-8be0-4a66-96e0-dcd50d9e205e.jpg" alt="image"></p><h2 id="_7-receive-和receive-long-time-的说明" tabindex="-1"><a class="header-anchor" href="#_7-receive-和receive-long-time-的说明" aria-hidden="true">#</a> 7，receive()和receive(long time)的说明</h2><blockquote><p>receive()一直阻塞</p></blockquote><blockquote><p>receive(10000L)10秒没收到消息就放弃</p></blockquote><h2 id="_8-异步消费者【推荐】" tabindex="-1"><a class="header-anchor" href="#_8-异步消费者【推荐】" aria-hidden="true">#</a> 8，异步消费者【推荐】</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">SneakyThrows</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span></span><span class="token class-name">ActiveMQConnectionFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :异步消费
 * @Author : 辛根
 * @Date : 2020/4/6 14:02
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMessageASyncConsumer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">BROKER_URL</span> <span class="token operator">=</span> <span class="token string">&quot;tcp://129.211.39.189:61616&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">QUEUE_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;queue-test&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JMSException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 第一步：创建ConnectionFactory对象，需要指定服务端ip及端口号。</span>
        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token constant">BROKER_URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第二步：使用ConnectionFactory对象创建一个Connection对象。</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第三步：开启连接，调用Connection对象的start方法。</span>
        connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第四步：使用Connection对象创建一个Session对象。</span>
        <span class="token comment">//第一个参数：是否开启事务。true：开启事务，第二个参数忽略。</span>
        <span class="token comment">//第二个参数：当第一个参数为false时，才有意义。消息的应答模式。1、自动应答2、手动应答。一般是自动应答。</span>
        <span class="token class-name">Session</span> session <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">Session</span><span class="token punctuation">.</span><span class="token constant">AUTO_ACKNOWLEDGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第五步：使用Session对象创建一个Destination对象（topic、queue），此处创建一个Queue对象。</span>
        <span class="token class-name">Queue</span> queue <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createQueue</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第六步：使用Session对象创建一个MessageConsumer对象。</span>
        <span class="token class-name">MessageConsumer</span> consumer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createConsumer</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第七步：使用consumer接收消息</span>
        consumer<span class="token punctuation">.</span><span class="token function">setMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@SneakyThrows</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>message <span class="token keyword">instanceof</span>  <span class="token class-name">TextMessage</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token class-name">TextMessage</span> textMessage<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextMessage</span><span class="token punctuation">)</span> message<span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;接收到消息:&quot;</span><span class="token operator">+</span>textMessage<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消息监听中:-----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 第九步：关闭资源。</span>
        consumer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消息消费成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-1-messagelistener接口说明" tabindex="-1"><a class="header-anchor" href="#_8-1-messagelistener接口说明" aria-hidden="true">#</a> 8.1，MessageListener接口说明</h3><p>一个消费的监听器，当有消息到达时会回调里面的onMessage的方法</p><p>在测试的时候不能让应用程序结束 所以在加System.in.read();</p><h2 id="_9-总结特点" tabindex="-1"><a class="header-anchor" href="#_9-总结特点" aria-hidden="true">#</a> 9，总结特点</h2><p>1，每一个消息只能有一个消费者，类似1对1的关系。好比个人快递自己领取自己的</p><p>2. 消息的生产者和消费者之间没有时间上的相关性。无论消费者在生产者发送消息的时候是否处于运行状态，消费者都可以提取消息，好比我们发短息，发送者发送后不见得接收者会立即接收 如关机</p><p>3，消息被消费后队列中不会再存储，所以消费者不会消费到已经被消费掉的消息</p><p><img src="https://picgo.xingenhi.cn//typora0.23433717252931135.png" alt="image"></p><h1 id="_06【问题】消费者的三大消费情况" tabindex="-1"><a class="header-anchor" href="#_06【问题】消费者的三大消费情况" aria-hidden="true">#</a> 06【问题】消费者的三大消费情况</h1><p>1，消费情况1</p><p>先生产，只启用1号消费者</p><p>问题：1号消费者能消费到消息吗?</p><p>答案：可以</p><h2 id="_2-消费情况2" tabindex="-1"><a class="header-anchor" href="#_2-消费情况2" aria-hidden="true">#</a> 2，消费情况2</h2><p>先生产，先启动1号消费者再启动2号消费者。</p><p>问题：2号消费者还能消费消息吗？</p><p>答案： 不能，因为一个消息只能被一个消费者消费 点对点的情况</p><h2 id="_3-消费情况3" tabindex="-1"><a class="header-anchor" href="#_3-消费情况3" aria-hidden="true">#</a> 3，消费情况3</h2><p>先启动2个消费者，再生产10条消息</p><p>问题：消费情况如何</p><p>答案：? 【做实验验证】</p><pre><code>  A：2个消费者者有10条

  B：先到先得，10条全给一个

  C：一人一半  **依次循环**
</code></pre><h1 id="_07【掌握】activemq发布-订阅模式" tabindex="-1"><a class="header-anchor" href="#_07【掌握】activemq发布-订阅模式" aria-hidden="true">#</a> 07【掌握】ActiveMQ发布/订阅模式</h1><h2 id="_1-创建生成者producer" tabindex="-1"><a class="header-anchor" href="#_1-创建生成者producer" aria-hidden="true">#</a> 1，创建生成者Producer</h2><p>第一步：创建ConnectionFactory对象，需要指定服务端ip及端口号。</p><p>第二步：使用ConnectionFactory对象创建一个Connection对象。</p><p>第三步：开启连接，调用Connection对象的start方法。</p><p>第四步：使用Connection对象创建一个Session对象。</p><p>第五步：使用Session对象创建一个Destination对象（topic、queue），此处创建一个Topic对象。</p><p>第六步：使用Session对象创建一个Producer对象。</p><p>第七步：创建一个Message对象，创建一个TextMessage对象。</p><p>第八步：使用Producer对象发送消息。</p><p>第九步：关闭资源。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>topic</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span></span><span class="token class-name">ActiveMQConnectionFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span>command<span class="token punctuation">.</span></span><span class="token class-name">ActiveMQTextMessage</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :主题的生产者
 * @Author : 辛根
 * @Date : 2020/4/6 14:23
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMessageTopicProducer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">BROKER_URL</span> <span class="token operator">=</span> <span class="token string">&quot;tcp://129.211.39.189:61616&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TOPIC_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;topic-test&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JMSException</span> <span class="token punctuation">{</span>
<span class="token comment">//        第一步：创建ConnectionFactory对象，需要指定服务端ip及端口号。</span>
        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token constant">BROKER_URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        第二步：使用ConnectionFactory对象创建一个Connection对象。</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        第三步：开启连接，调用Connection对象的start方法。</span>
        connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        第四步：使用Connection对象创建一个Session对象。</span>
        <span class="token class-name">Session</span> session <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">Session</span><span class="token punctuation">.</span><span class="token constant">AUTO_ACKNOWLEDGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        第五步：使用Session对象创建一个Destination对象（topic、queue），此处创建一个Topic对象。</span>
        <span class="token class-name">Topic</span> topic <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createTopic</span><span class="token punctuation">(</span><span class="token constant">TOPIC_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        第六步：使用Session对象创建一个Producer对象。</span>
        <span class="token class-name">MessageProducer</span> producer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createProducer</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        第七步：创建一个Message对象，创建一个TextMessage对象。</span>
<span class="token comment">//        TextMessage textMessage = session.createTextMessage(&quot;我数一个主题消息&quot;);</span>
        <span class="token class-name">ActiveMQTextMessage</span> textMessage1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQTextMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        textMessage1<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;我是一个new出来的主题消息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        第八步：使用Producer对象发送消息。</span>
        producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>textMessage1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        第九步：关闭资源。</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;主题消息发送成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        producer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.9457584113663964.png" alt="image"></p><h2 id="_2-创建消费者-consumer" tabindex="-1"><a class="header-anchor" href="#_2-创建消费者-consumer" aria-hidden="true">#</a> 2，创建消费者 Consumer</h2><p>第一步：创建一个ConnectionFactory对象。</p><p>第二步：从ConnectionFactory对象中获得一个Connection对象。</p><p>第三步：开启连接。调用Connection对象的start方法。</p><p>第四步：使用Connection对象创建一个Session对象。</p><p>第五步：使用Session对象创建一个Destination对象。和发送端保持一致topic，并且话题的名称一致。</p><p>第六步：使用Session对象创建一个Consumer对象。</p><p>第七步：接收消息。</p><p>第八步：打印消息。</p><p>第九步：关闭资源</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>topic</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">SneakyThrows</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span></span><span class="token class-name">ActiveMQConnectionFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span>command<span class="token punctuation">.</span></span><span class="token class-name">ActiveMQTextMessage</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :主题的消费者
 * @Author : 辛根
 * @Date : 2020/4/6 14:33
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMessageTopicConsumer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">BROKER_URL</span> <span class="token operator">=</span> <span class="token string">&quot;tcp://129.211.39.189:61616&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TOPIC_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;topic-test&quot;</span><span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

        <span class="token comment">// 第一步：创建ConnectionFactory对象，需要指定服务端ip及端口号。</span>
        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token constant">BROKER_URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第二步：使用ConnectionFactory对象创建一个Connection对象。</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第三步：开启连接，调用Connection对象的start方法。</span>
        connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第四步：使用Connection对象创建一个Session对象。</span>
        <span class="token class-name">Session</span> session <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">Session</span><span class="token punctuation">.</span><span class="token constant">AUTO_ACKNOWLEDGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第五步：使用Session对象创建一个Destination对象（topic、queue），此处创建一个Topic对象。</span>
        <span class="token class-name">Topic</span> topic <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createTopic</span><span class="token punctuation">(</span><span class="token constant">TOPIC_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第六步：使用Session对象创建一个Producer对象。</span>
        <span class="token class-name">MessageConsumer</span> consumer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createConsumer</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第七步：监听消息</span>
        consumer<span class="token punctuation">.</span><span class="token function">setMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@SneakyThrows</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">ActiveMQTextMessage</span> textMessage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ActiveMQTextMessage</span><span class="token punctuation">)</span> message<span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费者接收到消息:&quot;</span> <span class="token operator">+</span> textMessage<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第八步：关闭资源。</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;主题消费者启动成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        consumer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-注意点" tabindex="-1"><a class="header-anchor" href="#_3-注意点" aria-hidden="true">#</a> 3，注意点</h2><p>先启动消费者再启动生产者，要不然发送的废消息</p><p>如你不关注订阅号就接收不到消息</p><h2 id="_4-点对点和发布订阅模式的比较" tabindex="-1"><a class="header-anchor" href="#_4-点对点和发布订阅模式的比较" aria-hidden="true">#</a> 4，点对点和发布订阅模式的比较</h2><p><img src="https://picgo.xingenhi.cn//typora0.009378233555137358.png" alt="image"></p><h1 id="_08【掌握】activemq发布-订阅模式—持久" tabindex="-1"><a class="header-anchor" href="#_08【掌握】activemq发布-订阅模式—持久" aria-hidden="true">#</a> 08【掌握】ActiveMQ发布/订阅模式—持久</h1><h2 id="_1、启动一个消费者、查看" tabindex="-1"><a class="header-anchor" href="#_1、启动一个消费者、查看" aria-hidden="true">#</a> 1、启动一个消费者、查看</h2><p><img src="https://picgo.xingenhi.cn//typora0.5340867037131342.png" alt="image"></p><h2 id="_2、为什么先生产再消费接收不到" tabindex="-1"><a class="header-anchor" href="#_2、为什么先生产再消费接收不到" aria-hidden="true">#</a> 2、为什么先生产再消费接收不到</h2><p>默认情况下。消费者是一个活动的非持久的订阅者</p><p>当我上线之后，只能接收我上线之后消息</p><h2 id="_3、如何设置持久的订阅者" tabindex="-1"><a class="header-anchor" href="#_3、如何设置持久的订阅者" aria-hidden="true">#</a> 3、如何设置持久的订阅者</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>topic</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">SneakyThrows</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span></span><span class="token class-name">ActiveMQConnectionFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span>command<span class="token punctuation">.</span></span><span class="token class-name">ActiveMQTextMessage</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :主题的持久消费者
 * @Author : 辛根
 * @Date : 2020/4/6 14:42
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMessageTopicDurableConsumer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">BROKER_URL</span> <span class="token operator">=</span> <span class="token string">&quot;tcp://129.211.39.189:61616&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TOPIC_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;topic-test&quot;</span><span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token constant">BROKER_URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">setClientID</span><span class="token punctuation">(</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置订阅者的名字</span>
        connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Session</span> session <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">Session</span><span class="token punctuation">.</span><span class="token constant">AUTO_ACKNOWLEDGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Topic</span> topic <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createTopic</span><span class="token punctuation">(</span><span class="token constant">TOPIC_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">TopicSubscriber</span> subscriber <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createDurableSubscriber</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token string">&quot;---&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subscriber<span class="token punctuation">.</span><span class="token function">setMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@SneakyThrows</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">ActiveMQTextMessage</span> textMessage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ActiveMQTextMessage</span><span class="token punctuation">)</span> message<span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费者接收到消息:&quot;</span> <span class="token operator">+</span> textMessage<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;主题消费者启动成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subscriber<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.9262975164951989.png" alt="image"></p><p>停止程序</p><p><img src="https://picgo.xingenhi.cn//typora0.5803820781762107.png" alt="image"></p><h2 id="_4、测试逻辑" tabindex="-1"><a class="header-anchor" href="#_4、测试逻辑" aria-hidden="true">#</a> 4、测试逻辑</h2><p>1， 先启动消费者----关注订阅号</p><p>2， 再下线</p><p>3， 再生产</p><p>4， 消费者再上线</p><h1 id="_09【理解】jms的深入理解" tabindex="-1"><a class="header-anchor" href="#_09【理解】jms的深入理解" aria-hidden="true">#</a> 09【理解】JMS的深入理解</h1><h2 id="_1-jms是什么" tabindex="-1"><a class="header-anchor" href="#_1-jms是什么" aria-hidden="true">#</a> 1，JMS是什么</h2><p>JMS的全称是Java Message Service，即Java消息服务。用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</p><p>它是JAVAEE技术体系中的一个消息传递服务中间件，而MQ是JMS的落地得产品</p><p>以下是JAVAEE技术体系</p><p><img src="https://picgo.xingenhi.cn//typora0.3613461730404295.png" alt="image"></p><h2 id="_2-什么是消息服务【回顾】" tabindex="-1"><a class="header-anchor" href="#_2-什么是消息服务【回顾】" aria-hidden="true">#</a> 2 ，什么是消息服务【回顾】</h2><p>Java消息服务指的是两个应用程序之间进行异步通信的API，它为标准消息协议和消息服务提供了一组通用接口，包括创建，发送，读取消息等等，用于支持JAVA应用程序开发。在JavaEE中，当两个应用程序使用JMS进行通信时，它们之间并不是直接相连的，而是通过一个共同的消息收发服务组件关联起来以达到解耦，异步，削峰的效果</p><p><img src="https://picgo.xingenhi.cn//typora0.287780237305839.png" alt="image"></p><hr><h2 id="_3-jms相关落地的产品及比较" tabindex="-1"><a class="header-anchor" href="#_3-jms相关落地的产品及比较" aria-hidden="true">#</a> 3 ，JMS相关落地的产品及比较</h2><p><img src="https://picgo.xingenhi.cn//typora0.15998453861818018.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.49372631079702295.png" alt="image"></p><h2 id="_4-jms组成的特点" tabindex="-1"><a class="header-anchor" href="#_4-jms组成的特点" aria-hidden="true">#</a> 4 ，JMS组成的特点</h2><p>1，JMS Provier 作用：实现JMS接口规范的消息中间件，也就是我们学习的MQ</p><p>2，JMS Producer 作用：消息生产者，创建与发送JMS消息的客户端应用</p><p>3，JMS Consumer 作用：消息的消费者，接受与处理JMS消息的客户端应用</p><p>4，JMS Messager 作用：消息的载体</p><hr><h2 id="_5-jms-messager详解" tabindex="-1"><a class="header-anchor" href="#_5-jms-messager详解" aria-hidden="true">#</a> 5 ，JMS Messager详解</h2><h3 id="_5-1-消息头" tabindex="-1"><a class="header-anchor" href="#_5-1-消息头" aria-hidden="true">#</a> 5.1，消息头</h3><p><strong>JMSDesination</strong>:消息发送的目地地，主是指Queue和Topic</p><p><strong>JMSDeliveyMode</strong>:消息的持久模式和非持久模式。</p><p>一条持久性的消息应该被传送 “仅仅一次”，这就意味着如果JMS提供者出现故障，该消息并不会丢失，它会在服务器恢复之后再次传递。</p><p>一条非持久的消息：最多会传送一次，这意味着服务器如果出现故障，该消息将永远丢失</p><p><strong>JMSExpiration</strong>:消息的过期设置，默认为永不过期</p><pre><code>    消息过期时间，等于Destination的send方法中的timeToLive值加上发送时间点的GMT时间值

    如果timeToLive的值等于0，则消永不过期。

    如果发送后，在消息过期时间之后消息还没有被发送到目的地，则该消息被清除
</code></pre><p><strong>JMSPriority</strong>:消息优先级，从0-9十个级别，0-4是普通消息，5-9是加急消息。</p><pre><code>    JMS不要求MQ严格按照这十个优先级发送消息，但必须保正加急消息要先于普通消息到达。默认为4级
</code></pre><p><strong>JMSMessageID</strong>:</p><pre><code>    唯一识别每个消息的表示，由MQ产生
</code></pre><h3 id="_5-2-消息体-消息的载体" tabindex="-1"><a class="header-anchor" href="#_5-2-消息体-消息的载体" aria-hidden="true">#</a> 5.2，消息体：消息的载体</h3><p><img src="https://picgo.xingenhi.cn//typora0.6177528565529371.png" alt="image"></p><p>· StreamMessage -- Java原始值的数据流</p><p>· MapMessage--一套名称-值对</p><p>· TextMessage--一个字符串对象</p><p>· ObjectMessage--一个序列化的 Java对象 需要放行所有包的安全检查</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">ActiveMQConnectionFactory</span> factory<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span>brokerURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
 factory<span class="token punctuation">.</span><span class="token function">setTrustAllPackages</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//放行所有包的安全检查</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>· BytesMessage--一个字节的数据流</p><p>注意：发送和接收消息必须是一一对应的</p><h3 id="_5-3-消息属性" tabindex="-1"><a class="header-anchor" href="#_5-3-消息属性" aria-hidden="true">#</a> 5.3，消息属性</h3><p>消息属性是一种加强型的API</p><p>如果需要使用消息头发外的值，那么可以使用消息属性</p><p>用于识别、去重、重点标注等等操作</p><p>它们是属性名属性值对应的形式制定的。可以把属性看着消息头的扩展，属性指定一些消息头没有包括的附加信息，比如可以在属性里指定消息选择器</p><p>消息的属性就像可以分配给一个消息的附加消息头一样，它们允许开发者添加有关消息的不透明的附加信息，它们还用于暴露消息选择器在消息过滤时使用的数据。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TextMessage</span> message<span class="token operator">=</span>session<span class="token punctuation">.</span><span class="token function">createTextMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
message<span class="token punctuation">.</span><span class="token function">setStringProperty</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自定义属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_10【掌握】消息可靠性及持久化" tabindex="-1"><a class="header-anchor" href="#_10【掌握】消息可靠性及持久化" aria-hidden="true">#</a> 10【掌握】消息可靠性及持久化</h1><h2 id="_1-参数配置说明" tabindex="-1"><a class="header-anchor" href="#_1-参数配置说明" aria-hidden="true">#</a> 1，参数配置说明</h2><h3 id="_1-1-持久设置" tabindex="-1"><a class="header-anchor" href="#_1-1-持久设置" aria-hidden="true">#</a> 1.1，持久设置</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>producer<span class="token punctuation">.</span><span class="token function">setDeliveryMode</span><span class="token punctuation">(</span><span class="token class-name">DeliveryMode</span><span class="token punctuation">.</span><span class="token constant">PERSISTENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-2-非持久设置" tabindex="-1"><a class="header-anchor" href="#_1-2-非持久设置" aria-hidden="true">#</a> 1.2，非持久设置</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>producer<span class="token punctuation">.</span><span class="token function">setDeliveryMode</span><span class="token punctuation">(</span><span class="token class-name">DeliveryMode</span><span class="token punctuation">.</span><span class="token constant">NON_PERSISTENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-3-其它说明" tabindex="-1"><a class="header-anchor" href="#_1-3-其它说明" aria-hidden="true">#</a> 1.3，其它说明</h3><p><strong>默认为持久消息</strong></p><h2 id="_2-queue测试逻辑" tabindex="-1"><a class="header-anchor" href="#_2-queue测试逻辑" aria-hidden="true">#</a> 2，Queue测试逻辑</h2><p>1，不设置，发送消息 重启MQ 查看消息是否存在</p><pre><code>   存在  说明默认为持久
</code></pre><p>2，设置持久，发送消息 重启MQ 查看消息是否存在</p><pre><code>   |--存在    
</code></pre><p>3，设置不持久，发送消息 重启MQ 查看消息是否存在</p><pre><code>          |--不存在
</code></pre><h3 id="_2-2-queue测试结论" tabindex="-1"><a class="header-anchor" href="#_2-2-queue测试结论" aria-hidden="true">#</a> 2.2 Queue测试结论</h3><pre><code>    持久化消息，这个队列的默认传递样式，此模式保证这些消息只被传送一次和成功使用一次。对于这些消息，可靠性是优先考虑的因素。可靠性是另一个重要方面是确保持久性消息传递到目标后，消息服务在向消费者传递它们之前不会丢失这些消息。
</code></pre><hr><h2 id="_3-topic测试逻辑【先启动订阅再生产】默认是非持久" tabindex="-1"><a class="header-anchor" href="#_3-topic测试逻辑【先启动订阅再生产】默认是非持久" aria-hidden="true">#</a> 3，Topic测试逻辑【先启动订阅再生产】默认是非持久</h2><p>1，不设置，发送消息 重启MQ 查看消息是否存在</p><pre><code>   |--存在   但是没有意义
</code></pre><p>2，设置持久，发送消息 重启MQ 查看消息是否存在</p><pre><code>   |--存在  但但没有意义
</code></pre><p>3，设置不持久，发送消息 重启MQ 查看消息是否存在</p><pre><code>   |--不存在
</code></pre><h3 id="_3-1-其它说明" tabindex="-1"><a class="header-anchor" href="#_3-1-其它说明" aria-hidden="true">#</a> 3.1，其它说明</h3><p>非持久的topic没有意义，因为发布订阅模式是先启动订阅再启动生产，消息已经被消费了。如果先启动生产者后启动订阅者，消息会被当作废消息</p><h1 id="_11【掌握】生产者消费者事务和签收说明" tabindex="-1"><a class="header-anchor" href="#_11【掌握】生产者消费者事务和签收说明" aria-hidden="true">#</a> 11【掌握】生产者消费者事务和签收说明</h1><h2 id="_1-activemq事务" tabindex="-1"><a class="header-anchor" href="#_1-activemq事务" aria-hidden="true">#</a> 1，ActiveMQ事务</h2><h3 id="_1-1-生产者提交时的事务设置" tabindex="-1"><a class="header-anchor" href="#_1-1-生产者提交时的事务设置" aria-hidden="true">#</a> 1.1，生产者提交时的事务设置</h3><p><img src="https://picgo.xingenhi.cn//typora0.42905365593011924.png" alt="image"></p><h4 id="_1-1-1-false" tabindex="-1"><a class="header-anchor" href="#_1-1-1-false" aria-hidden="true">#</a> 1.1.1，false</h4><p>只要执行send就进入到队列中，没有事务，那么第二个参数签收就有效</p><h4 id="_1-1-2-true" tabindex="-1"><a class="header-anchor" href="#_1-1-2-true" aria-hidden="true">#</a> 1.1.2，true</h4><p>先执行send再执行commit,消息才被真正的提交到队列中</p><h4 id="_1-1-3-何时使用" tabindex="-1"><a class="header-anchor" href="#_1-1-3-何时使用" aria-hidden="true">#</a> 1.1.3，何时使用</h4><p>当消息需要批量发送，要确保所要消息全部发送成功才会全部入队</p><h3 id="_1-2-消费者消费事务的设置" tabindex="-1"><a class="header-anchor" href="#_1-2-消费者消费事务的设置" aria-hidden="true">#</a> 1.2，消费者消费事务的设置</h3><h4 id="_1-2-1-false" tabindex="-1"><a class="header-anchor" href="#_1-2-1-false" aria-hidden="true">#</a> 1.2.1，false</h4><p>消费者接收到消息之后直接消费完成，队列中不再有未消费的消息</p><h4 id="_1-2-2-true" tabindex="-1"><a class="header-anchor" href="#_1-2-2-true" aria-hidden="true">#</a> 1.2.2，true</h4><p>消息者接收到消息之后消费完成。队列中的消费没有被标记为消费，再次启动消费者还可以接收到消息</p><h3 id="_1-3-总结" tabindex="-1"><a class="header-anchor" href="#_1-3-总结" aria-hidden="true">#</a> 1.3，总结</h3><p>事务偏生产者，签收偏消费者，消费者那边不用开户事务，否则出现重复消费</p><h2 id="_2-activemq签收【acknowledge】" tabindex="-1"><a class="header-anchor" href="#_2-activemq签收【acknowledge】" aria-hidden="true">#</a> 2，ActiveMQ签收【Acknowledge】</h2><h3 id="_2-1-非事务模式下签收" tabindex="-1"><a class="header-anchor" href="#_2-1-非事务模式下签收" aria-hidden="true">#</a> 2.1，非事务模式下签收</h3><p>生产者 签收设置为自动，消费者 签收设置为自动，正常</p><p>生产者 签收设置为自动，消费者 签收设置为手动，会出重复消费 【<strong>消费者使用手动签收可以解决message.acknowledge();//签收】</strong></p><p>生产者 签收设置为手动，消费者 签收设置为自动，正常</p><h3 id="_2-2-有事务模式下签收" tabindex="-1"><a class="header-anchor" href="#_2-2-有事务模式下签收" aria-hidden="true">#</a> 2.2，有事务模式下签收</h3><p>生产者 签收设置为自动，消费者 签收设置为自动，已提交，正常</p><p>生产者 签收设置为自动，消费者 签收设置为自动，未提交，会出现重复消费</p><p>生产者 签收设置为自动，消费者 签收设置为手动，未提交，已ACK 会出重复消费</p><p>生产者 签收设置为自动，消费者 签收设置为手动，已提交，未正常</p><p>生产者 签收设置为手动，消费者 签收设置为自动，已提交，正常</p><p>生产者 签收设置为手动，消费者 签收设置为自动，未提交，会出现重复消费</p><p>生产者 签收设置为手动，消费者 签收设置为自动，未提交，未ACK 会出重复消费</p><p>生产者 签收设置为手动，消费者 签收设置为自动，未提交，已ACK 会出重复消费</p><p>生产者 签收设置为手动，消费者 签收设置为手动，已提交，未ACK 正常</p><p>生产者 签收设置为手动，消费者 签收设置为手动，已提交，已ACK 正常</p><h2 id="_3-activemq事务签收总结" tabindex="-1"><a class="header-anchor" href="#_3-activemq事务签收总结" aria-hidden="true">#</a> 3，ActiveMQ事务签收总结</h2><p>事务偏向于消息生产方</p><pre><code>   |--如果生产方开启事务，发完消息之后未提交事务，那么消息不会进入队列
</code></pre><p>签收偏向于消息的消费方</p><pre><code>   |--如果消费方未开启事务，设置签收模式为手动，那么必须ack

   |--如果消费方开启事务，设置签收为自动，也要提交事务

   |--如果消费方开启事务，设置签收不手动，可以不用ACK，但是必须提交事务
</code></pre><h1 id="_12【掌握】activemq配置文件和broker" tabindex="-1"><a class="header-anchor" href="#_12【掌握】activemq配置文件和broker" aria-hidden="true">#</a> 12【掌握】ActiveMQ配置文件和Broker</h1><h2 id="_1-activemq多配置文件启动" tabindex="-1"><a class="header-anchor" href="#_1-activemq多配置文件启动" aria-hidden="true">#</a> 1，ActiveMQ多配置文件启动</h2><ul><li>Jetty.xml 这个是activemq的web模块的修改；</li><li>activemq.xml</li></ul><h3 id="_1-1-在哪里" tabindex="-1"><a class="header-anchor" href="#_1-1-在哪里" aria-hidden="true">#</a> 1.1，在哪里</h3><p><img src="https://picgo.xingenhi.cn//typora0.991077333798237.png" alt="image"></p><h3 id="_1-2-copy配置文件" tabindex="-1"><a class="header-anchor" href="#_1-2-copy配置文件" aria-hidden="true">#</a> 1.2，copy配置文件</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>cp activemq<span class="token punctuation">.</span>xml activemq2<span class="token punctuation">.</span>xml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-3-使用activemq2-xml启动【了解】" tabindex="-1"><a class="header-anchor" href="#_1-3-使用activemq2-xml启动【了解】" aria-hidden="true">#</a> 1.3，使用activemq2.xml启动【了解】</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span>/bin<span class="token operator">/</span>activemq start xbean<span class="token operator">:</span>file<span class="token operator">:</span>conf<span class="token operator">/</span>activemq2<span class="token punctuation">.</span>xml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2、内嵌的broker" tabindex="-1"><a class="header-anchor" href="#_2、内嵌的broker" aria-hidden="true">#</a> 2、内嵌的broker</h2><h3 id="_2-1-是什么" tabindex="-1"><a class="header-anchor" href="#_2-1-是什么" aria-hidden="true">#</a> 2.1，是什么</h3><p>相当于一个ActiveMQ服务器实例</p><p>就是实现了用嵌入形式启动ActiveMQ把MQ嵌入到Java代码中，以例随时启动随时启动</p><p>在用的时候再去启动这样能节省资源，也保存证了可靠性。</p><h3 id="_2-2-代码" tabindex="-1"><a class="header-anchor" href="#_2-2-代码" aria-hidden="true">#</a> 2.2，代码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmbedBroker</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">BrokerService</span> brokerService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrokerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        brokerService<span class="token punctuation">.</span><span class="token function">setUseJmx</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        brokerService<span class="token punctuation">.</span><span class="token function">addConnector</span><span class="token punctuation">(</span><span class="token string">&quot;tcp://localhost:61616&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        brokerService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引入jackson</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token operator">/</span>jackson<span class="token operator">-</span>databind <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>jackson<span class="token operator">-</span>databind<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">2.10</span><span class="token number">.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-使用之前的代码连接localhost测试" tabindex="-1"><a class="header-anchor" href="#_2-3-使用之前的代码连接localhost测试" aria-hidden="true">#</a> 2.3，使用之前的代码连接localhost测试</h3><h1 id="_13【掌握】activemq整合spring" tabindex="-1"><a class="header-anchor" href="#_13【掌握】activemq整合spring" aria-hidden="true">#</a> 13【掌握】ActiveMQ整合Spring</h1><h2 id="_1-准备工作" tabindex="-1"><a class="header-anchor" href="#_1-准备工作" aria-hidden="true">#</a> 1，准备工作</h2><h3 id="_1-1-创建项目" tabindex="-1"><a class="header-anchor" href="#_1-1-创建项目" aria-hidden="true">#</a> 1.1 创建项目</h3><p><img src="https://picgo.xingenhi.cn//typora0.3078438821425678.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.3842373127683363.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.1496496845941318.png" alt="image"></p><h3 id="_1-2修改pom加入依赖" tabindex="-1"><a class="header-anchor" href="#_1-2修改pom加入依赖" aria-hidden="true">#</a> 1.2修改pom加入依赖</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">&gt;</span></span>4.3.24.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activemq.version</span><span class="token punctuation">&gt;</span></span>5.15.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activemq.version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--activemq需要的jar包 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>activemq-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${activemq.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>activemq-pool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${activemq.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-jms<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-queue的整合" tabindex="-1"><a class="header-anchor" href="#_2-queue的整合" aria-hidden="true">#</a> 2，Queue的整合</h2><h3 id="_2-1-步骤" tabindex="-1"><a class="header-anchor" href="#_2-1-步骤" aria-hidden="true">#</a> 2.1，步骤</h3><p>第一步：初始化一个spring容器</p><p>第二步：从容器中获得JMSTemplate对象。</p><p>第三步：从容器中获得一个Destination对象</p><p>第四步：使用JMSTemplate对象发送消息，需要知道Destination</p><h3 id="_2-2-创建application-queue-xml" tabindex="-1"><a class="header-anchor" href="#_2-2-创建application-queue-xml" aria-hidden="true">#</a> 2.2，创建application-queue.xml</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>


    <span class="token comment">&lt;!--创建一个连接工厂--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jmsFactory<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.activemq.pool.PooledConnectionFactory<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stop<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>connectionFactory<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.activemq.ActiveMQConnectionFactory<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>brokerURL<span class="token punctuation">&quot;</span></span>
                      <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tcp://www.leige.tech:61616<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>maxConnections<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!--声明消费类型对象 队列或主题--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>destinationQueue<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.activemq.command.ActiveMQQueue<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--因为ActiveMQQueue里面队列名字的get set 方法，所以只能使用构造方法注入队列的名字--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>spring-active-queue<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>



    <span class="token comment">&lt;!-- Spring的JMS模版工具 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jmsTemplate<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.jms.core.JmsTemplate<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>connectionFactory<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jmsFactory<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!--设置默认的Destination--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>defaultDestination<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>destinationQueue<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!-- 消息转化器 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>messageConverter<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.jms.support.converter.SimpleMessageConverter<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-测试发送" tabindex="-1"><a class="header-anchor" href="#_2-3-测试发送" aria-hidden="true">#</a> 2.3，测试发送</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>queue</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JmsTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">MessageCreator</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">JMSException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">Message</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">Session</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">TextMessage</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description : 生产者
 * @Author : 辛根
 * @Date : 2020/4/7 15:26
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestQueueProducer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 加载IOC容器</span>
        <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:application-queue.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JmsTemplate</span> jms <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">JmsTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 设置默认的消息发送目的地，用于覆盖xml里面的配置(destinationQueue)</span>
        <span class="token comment">//jmsTemplate.setDefaultDestination(new ActiveMQQueue(&quot;activemq-queme-spring&quot;));</span>

        <span class="token comment">// 消息发送</span>
        jms<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">public</span> <span class="token class-name">Message</span> <span class="token function">createMessage</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JMSException</span> <span class="token punctuation">{</span>
                <span class="token comment">// 创建消息并发送</span>
                <span class="token class-name">TextMessage</span> textMessage <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createTextMessage</span><span class="token punctuation">(</span><span class="token string">&quot;spring—-hell&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;---------&quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> textMessage<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=======&quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jms<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-测试接收" tabindex="-1"><a class="header-anchor" href="#_2-3-测试接收" aria-hidden="true">#</a> 2.3，测试接收</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>queue</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JmsTemplate</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">JMSException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">TextMessage</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :消费者
 * @Author : 辛根
 * @Date : 2020/4/7 15:39
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestQuenConsumer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JMSException</span> <span class="token punctuation">{</span>
        <span class="token comment">//加载IOC窗口</span>
        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:application-queue.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">)</span> context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">JmsTemplate</span> jmsTemplate <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">JmsTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TextMessage</span> receive <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextMessage</span><span class="token punctuation">)</span> jmsTemplate<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>receive<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jmsTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-topic的整合" tabindex="-1"><a class="header-anchor" href="#_3-topic的整合" aria-hidden="true">#</a> 3，Topic的整合</h2><h3 id="_3-1-创建application-topic-xml" tabindex="-1"><a class="header-anchor" href="#_3-1-创建application-topic-xml" aria-hidden="true">#</a> 3.1，创建application-topic.xml</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!--创建一个连接工厂--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jmsFactory<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.activemq.pool.PooledConnectionFactory<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stop<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>connectionFactory<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.activemq.ActiveMQConnectionFactory<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>brokerURL<span class="token punctuation">&quot;</span></span>
                          <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tcp://www.leige.tech:61616<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>maxConnections<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!--声明消费类型对象 队列或主题--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>destinationTopic<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.activemq.command.ActiveMQTopic<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--因为ActiveMQQueue里面队列名字的get set 方法，所以只能使用构造方法注入队列的名字--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>spring-active-topic<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>


    <span class="token comment">&lt;!-- Spring的JMS模版工具 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jmsTemplate<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.jms.core.JmsTemplate<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>connectionFactory<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jmsFactory<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!--设置默认的Destination--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>defaultDestination<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>destinationTopic<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!-- 消息转化器 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>messageConverter<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.jms.support.converter.SimpleMessageConverter<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-测试发送" tabindex="-1"><a class="header-anchor" href="#_3-2-测试发送" aria-hidden="true">#</a> 3.2，测试发送</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>topic</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JmsTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">MessageCreator</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">JMSException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">Message</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">Session</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">TextMessage</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description : 生产者
 * @Author : 辛根
 * @Date : 2020/4/7 15:26
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTopicProducer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 加载IOC容器</span>
        <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:application-topic.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JmsTemplate</span> jms <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">JmsTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 设置默认的消息发送目的地，用于覆盖xml里面的配置</span>
        <span class="token comment">//jmsTemplate.setDefaultDestination(new ActiveMQQueue(&quot;activemq-queme-spring&quot;));</span>

        <span class="token comment">// 消息发送</span>
        jms<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">public</span> <span class="token class-name">Message</span> <span class="token function">createMessage</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JMSException</span> <span class="token punctuation">{</span>
                <span class="token comment">// 创建消息并发送</span>
                <span class="token class-name">TextMessage</span> textMessage <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createTextMessage</span><span class="token punctuation">(</span><span class="token string">&quot;spring—-hell&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;---------&quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> textMessage<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=======&quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jms<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-测试接收" tabindex="-1"><a class="header-anchor" href="#_3-2-测试接收" aria-hidden="true">#</a> 3.2，测试接收</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>topic</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JmsTemplate</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">JMSException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">TextMessage</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :消费者
 * @Author : 辛根
 * @Date : 2020/4/7 15:39
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTopicConsumer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JMSException</span> <span class="token punctuation">{</span>
        <span class="token comment">//加载IOC窗口</span>
        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:application-topic.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">)</span> context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">JmsTemplate</span> jmsTemplate <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">JmsTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TextMessage</span> receive <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextMessage</span><span class="token punctuation">)</span> jmsTemplate<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>receive<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jmsTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意点：先启动接收（消费者）再发送（生产者）</p><h2 id="_1-jmstemplate-api详解" tabindex="-1"><a class="header-anchor" href="#_1-jmstemplate-api详解" aria-hidden="true">#</a> 1， JMSTemplate API详解</h2><h3 id="_1-1-接收消息的api" tabindex="-1"><a class="header-anchor" href="#_1-1-接收消息的api" aria-hidden="true">#</a> 1.1，接收消息的API</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>jmsTemplate<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//接收一次消息。阻塞状态 和consumer.receive()方法一样</span>
jmsTemplate<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token string">&quot;spring-queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指从哪个队列或主题接收一次消息。阻塞状态</span>
jmsTemplate<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActiveMQQueue</span><span class="token punctuation">(</span><span class="token string">&quot;spring-queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指从哪个队列或主题接收一次消息。阻塞状态</span>


<span class="token class-name">Object</span> convert <span class="token operator">=</span> jmsTemplate<span class="token punctuation">.</span><span class="token function">receiveAndConvert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//接收并转化消费阻塞状态</span>
jmsTemplate<span class="token punctuation">.</span><span class="token function">receiveAndConvert</span><span class="token punctuation">(</span><span class="token string">&quot;spring-queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指从哪个队列或主题接收一次消息。阻塞状态</span>
jmsTemplate<span class="token punctuation">.</span><span class="token function">receiveAndConvert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActiveMQQueue</span><span class="token punctuation">(</span><span class="token string">&quot;spring-queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指从哪个队列或主题接收一次消息。阻塞状态</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-发送消息的api" tabindex="-1"><a class="header-anchor" href="#_1-2-发送消息的api" aria-hidden="true">#</a> 1.2，发送消息的API</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//发送消息</span>
jmsTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Message</span> <span class="token function">createMessage</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JMSException</span> <span class="token punctuation">{</span>
        <span class="token comment">//创建消费并发送</span>
        <span class="token class-name">TextMessage</span> textMessage <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createTextMessage</span><span class="token punctuation">(</span><span class="token string">&quot;hello-spring-topic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-----&quot;</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> textMessage<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 发送消息到某个队列或者主题</span>
jmsTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;mq-spring-queue&quot;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MessageCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Message</span> <span class="token function">createMessage</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JMSException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 发送并转换</span>
jmsTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActiveMQQueue</span><span class="token punctuation">(</span><span class="token string">&quot;mq-spring-queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MessageCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Message</span> <span class="token function">createMessage</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JMSException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 以上的三种要使用jmsTemplate.reveice();去收消息</span>

<span class="token comment">// jmsTemplate.convertAndSend(new User()); 要使用jsmTmelate.receiveAndConvert();</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_14【掌握】activemq整合springboot" tabindex="-1"><a class="header-anchor" href="#_14【掌握】activemq整合springboot" aria-hidden="true">#</a> 14【掌握】ActiveMQ整合Springboot</h1><h2 id="_1、boot整合activemq之队列" tabindex="-1"><a class="header-anchor" href="#_1、boot整合activemq之队列" aria-hidden="true">#</a> 1、Boot整合ActiveMQ之队列</h2><h3 id="_1-1创建项目" tabindex="-1"><a class="header-anchor" href="#_1-1创建项目" aria-hidden="true">#</a> 1.1创建项目</h3><p><img src="https://picgo.xingenhi.cn//typorac0815d9b-f3d1-46c7-a4cc-4e197945aaec.png" alt="image"></p><h3 id="_1-2修改yml" tabindex="-1"><a class="header-anchor" href="#_1-2修改yml" aria-hidden="true">#</a> 1.2修改yml</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>server<span class="token operator">:</span>
  port<span class="token operator">:</span> <span class="token number">8081</span>

#设置activemq
spring<span class="token operator">:</span>
  activemq<span class="token operator">:</span>
    broker<span class="token operator">-</span>url<span class="token operator">:</span> tcp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">129.211</span><span class="token number">.39</span><span class="token number">.189</span><span class="token operator">:</span><span class="token number">61616</span>
    user<span class="token operator">:</span> admin
    password<span class="token operator">:</span> admin
  jms<span class="token operator">:</span>
    # 默认是<span class="token boolean">false</span>。<span class="token boolean">false</span>代表队列、<span class="token boolean">true</span>代表主题
    pub<span class="token operator">-</span>sub<span class="token operator">-</span>domain<span class="token operator">:</span> <span class="token boolean">false</span>

boot<span class="token operator">-</span>queue<span class="token operator">:</span> boot<span class="token operator">-</span>queue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3创建配置类" tabindex="-1"><a class="header-anchor" href="#_1-3创建配置类" aria-hidden="true">#</a> 1.3创建配置类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>conf</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span>command<span class="token punctuation">.</span></span><span class="token class-name">ActiveMQQueue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">ConditionalOnClass</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :配置类
 * @Author : 辛根
 * @Date : 2020/4/7 16:09
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">ActiveMQQueue</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActiveMQConfig</span> <span class="token punctuation">{</span>

    <span class="token comment">// 指定队列的名字</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${boot-queue}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> queueName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQQueue</span><span class="token punctuation">(</span>queueName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4修改启动类" tabindex="-1"><a class="header-anchor" href="#_1-4修改启动类" aria-hidden="true">#</a> <strong>1.4修改启动类</strong></h3><p>启动类上添加注释：@EnableJms</p><p><img src="https://picgo.xingenhi.cn//typoraa457f8d4-8c14-4d9b-8a41-ba8009153c90.jpg" alt="image"></p><p><strong>1.5发送</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JmsMessagingTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description : 发送
 * @Author : 辛根
 * @Date : 2020/4/7 16:14
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">JmsMessagingTemplate</span> jmsMessagingTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">msg</span>
     * @ClassName: MsgController
     * @Description: 发送
     * @Return: java.lang.String
     * @Author: 辛根 2020/4/7 16:21
     */</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;send&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sent</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jmsMessagingTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;发送成功&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5接收" tabindex="-1"><a class="header-anchor" href="#_1-5接收" aria-hidden="true">#</a> <strong>1.5接收</strong></h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>conf</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JmsListener</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description : 接收
 * @Author : 辛根
 * @Date : 2020/4/7 16:22
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Receiver</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> <span class="token string">&quot;\${boot-queue}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监听器触发，调用成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加：为什么是发送消息的时候要注入使用JmsMessagingTemplate</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>1、找到ActiveMQAutoConfiguration 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typoradc862f0d-2134-4b03-92d1-95397a08836f.jpg" alt="image"></p><p>2、JmsAutoConfiguration</p><p><img src="https://picgo.xingenhi.cn//typora500c0de9-2788-48a3-a441-1db5f257e5d1.jpg" alt="image"></p><h2 id="_2、boot整合activemq之主题" tabindex="-1"><a class="header-anchor" href="#_2、boot整合activemq之主题" aria-hidden="true">#</a> 2、Boot整合ActiveMQ之主题</h2><h3 id="_2-1创建项目" tabindex="-1"><a class="header-anchor" href="#_2-1创建项目" aria-hidden="true">#</a> 2.1创建项目</h3><p><img src="https://picgo.xingenhi.cn//typoraclip_image02479026a53-7a0f-4cfb-8b22-e4344d866ecd.jpg" alt="image"></p><h3 id="_2-2修改yml" tabindex="-1"><a class="header-anchor" href="#_2-2修改yml" aria-hidden="true">#</a> 2.2修改yml</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>server<span class="token operator">:</span>
  port<span class="token operator">:</span> <span class="token number">8082</span>

#设置activemq
spring<span class="token operator">:</span>
  activemq<span class="token operator">:</span>
    broker<span class="token operator">-</span>url<span class="token operator">:</span> tcp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">129.211</span><span class="token number">.39</span><span class="token number">.189</span><span class="token operator">:</span><span class="token number">61616</span>
    user<span class="token operator">:</span> admin
    password<span class="token operator">:</span> admin
  jms<span class="token operator">:</span>
    # 默认是<span class="token boolean">false</span>。<span class="token boolean">false</span>代表队列、<span class="token boolean">true</span>代表主题
    pub<span class="token operator">-</span>sub<span class="token operator">-</span>domain<span class="token operator">:</span> <span class="token boolean">true</span>

boot<span class="token operator">-</span>topic<span class="token operator">:</span> boot<span class="token operator">-</span>topic
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3创建配置类" tabindex="-1"><a class="header-anchor" href="#_2-3创建配置类" aria-hidden="true">#</a> 2.3创建配置类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>conf</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span>command<span class="token punctuation">.</span></span><span class="token class-name">ActiveMQQueue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span>command<span class="token punctuation">.</span></span><span class="token class-name">ActiveMQTopic</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">ConditionalOnClass</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">Topic</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :配置类
 * @Author : 辛根
 * @Date : 2020/4/7 16:09
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">ActiveMQTopic</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActiveMQConfig</span> <span class="token punctuation">{</span>

    <span class="token comment">// 指定队列的名字</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${boot-topic}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> topicName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Topic</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQTopic</span><span class="token punctuation">(</span>topicName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4修改启动类" tabindex="-1"><a class="header-anchor" href="#_2-4修改启动类" aria-hidden="true">#</a> 2.4修改启动类</h3><p><img src="https://picgo.xingenhi.cn//typorab6a4d69e-acfd-4dc3-8751-d7617936d054.jpg" alt="image"></p><h3 id="_2-5发送" tabindex="-1"><a class="header-anchor" href="#_2-5发送" aria-hidden="true">#</a> 2.5发送</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JmsMessagingTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">Topic</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description : 发送
 * @Author : 辛根
 * @Date : 2020/4/7 16:14
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">JmsMessagingTemplate</span> jmsMessagingTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Topic</span> topic<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">msg</span>
     * @ClassName: MsgController
     * @Description: 发送
     * @Return: java.lang.String
     * @Author: 辛根 2020/4/7 16:21
     */</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;send&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sent</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jmsMessagingTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;发送成功&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6接收" tabindex="-1"><a class="header-anchor" href="#_2-6接收" aria-hidden="true">#</a> 2.6接收</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>conf</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JmsListener</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description : 接收
 * @Author : 辛根
 * @Date : 2020/4/7 16:22
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Receiver</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> <span class="token string">&quot;\${boot-topic}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监听器触发，调用成功1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> <span class="token string">&quot;\${boot-topic}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监听器触发，调用成功2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-boot整合activemq之队列和主题" tabindex="-1"><a class="header-anchor" href="#_3-boot整合activemq之队列和主题" aria-hidden="true">#</a> 3.Boot整合ActiveMQ之队列和主题</h2><h3 id="_3-1说明" tabindex="-1"><a class="header-anchor" href="#_3-1说明" aria-hidden="true">#</a> 3.1说明</h3><p>上面的两种整合方式都只能要么使用队列，要么使用主题</p><p>那么不能能两个一起上？</p><p>肯定是可以的</p><h3 id="_3-2创建项目" tabindex="-1"><a class="header-anchor" href="#_3-2创建项目" aria-hidden="true">#</a> 3.2创建项目</h3><p><img src="https://picgo.xingenhi.cn//typoraclip_image040c3dfeaea-3a0f-4bc5-9a46-500ab21573f4.jpg" alt="image"></p><h3 id="_3-3修改yml" tabindex="-1"><a class="header-anchor" href="#_3-3修改yml" aria-hidden="true">#</a> ** **3.3修改yml</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>server<span class="token operator">:</span>
  port<span class="token operator">:</span> <span class="token number">8083</span>

#设置activemq
spring<span class="token operator">:</span>
  activemq<span class="token operator">:</span>
    broker<span class="token operator">-</span>url<span class="token operator">:</span> tcp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">129.211</span><span class="token number">.39</span><span class="token number">.189</span><span class="token operator">:</span><span class="token number">61616</span>
    user<span class="token operator">:</span> admin
    password<span class="token operator">:</span> admin

boot<span class="token operator">-</span>queue<span class="token operator">:</span> boot<span class="token operator">-</span>queue
boot<span class="token operator">-</span>topic<span class="token operator">:</span> boot<span class="token operator">-</span>topic
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4创建配置类" tabindex="-1"><a class="header-anchor" href="#_3-4创建配置类" aria-hidden="true">#</a> 3.4创建配置类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>conf</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span></span><span class="token class-name">ActiveMQConnectionFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span>command<span class="token punctuation">.</span></span><span class="token class-name">ActiveMQQueue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span>command<span class="token punctuation">.</span></span><span class="token class-name">ActiveMQTopic</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">ConditionalOnClass</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Primary</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">DefaultJmsListenerContainerFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">JmsListenerContainerFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">Topic</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :配置类
 * @Author : 辛根
 * @Date : 2020/4/7 16:09
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">ActiveMQTopic</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActiveMQConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${boot-topic}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> topicName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${boot-queue}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> queueName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.activemq.user}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.activemq.password}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.activemq.broker-url}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> brokerUrl<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Topic</span> <span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQTopic</span><span class="token punctuation">(</span>topicName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQQueue</span><span class="token punctuation">(</span>queueName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Primary</span>
    <span class="token keyword">public</span> <span class="token class-name">ActiveMQConnectionFactory</span> <span class="token function">activeMQConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> brokerUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//处理队列的监听工厂</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">JmsListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">jmsListenerContainerFactoryQueue</span><span class="token punctuation">(</span><span class="token class-name">ActiveMQConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultJmsListenerContainerFactory</span> defaultJmsListenerContainerFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultJmsListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        defaultJmsListenerContainerFactory<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        defaultJmsListenerContainerFactory<span class="token punctuation">.</span><span class="token function">setPubSubDomain</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//代表队列</span>
        <span class="token keyword">return</span> defaultJmsListenerContainerFactory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//处理主题的监听工厂</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">JmsListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">jmsListenerContainerFactoryTopic</span><span class="token punctuation">(</span><span class="token class-name">ActiveMQConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultJmsListenerContainerFactory</span> defaultJmsListenerContainerFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultJmsListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        defaultJmsListenerContainerFactory<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        defaultJmsListenerContainerFactory<span class="token punctuation">.</span><span class="token function">setPubSubDomain</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//代表主题</span>
        <span class="token keyword">return</span> defaultJmsListenerContainerFactory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5修改启动类" tabindex="-1"><a class="header-anchor" href="#_3-5修改启动类" aria-hidden="true">#</a> 3.5修改启动类</h3><p><img src="https://picgo.xingenhi.cn//typora6ba2459e-4182-437f-bb07-eb5c850eb6c5.jpg" alt="image"></p><h3 id="_3-6发送" tabindex="-1"><a class="header-anchor" href="#_3-6发送" aria-hidden="true">#</a> 3.6发送</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JmsMessagingTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">Topic</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description : 发送
 * @Author : 辛根
 * @Date : 2020/4/7 16:14
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">JmsMessagingTemplate</span> jmsMessagingTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Topic</span> topic<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">msg</span>
     * @ClassName: MsgController
     * @Description: 发送topic
     * @Return: java.lang.String
     * @Author: 辛根 2020/4/7 17:08
     */</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;sendTopic&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendTopic</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jmsMessagingTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;发送成功topic&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">msg</span>
     * @ClassName: MsgController
     * @Description: 发送queue
     * @Return: java.lang.String
     * @Author: 辛根 2020/4/7 17:08
     */</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;sendQueue&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendQueue</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jmsMessagingTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;发送成功queue&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-7接收" tabindex="-1"><a class="header-anchor" href="#_3-7接收" aria-hidden="true">#</a> 3.7接收</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>conf</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JmsListener</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description : 接收
 * @Author : 辛根
 * @Date : 2020/4/7 16:22
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Receiver</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> <span class="token string">&quot;\${boot-queue}&quot;</span><span class="token punctuation">,</span> containerFactory <span class="token operator">=</span> <span class="token string">&quot;jmsListenerContainerFactoryQueue&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监听器触发，调用成功1-queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> <span class="token string">&quot;\${boot-queue}&quot;</span><span class="token punctuation">,</span> containerFactory <span class="token operator">=</span> <span class="token string">&quot;jmsListenerContainerFactoryQueue&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监听器触发，调用成功2-queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> <span class="token string">&quot;\${boot-topic}&quot;</span><span class="token punctuation">,</span> containerFactory <span class="token operator">=</span> <span class="token string">&quot;jmsListenerContainerFactoryTopic&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive3</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监听器触发，调用成功1-topic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> <span class="token string">&quot;\${boot-topic}&quot;</span><span class="token punctuation">,</span> containerFactory <span class="token operator">=</span> <span class="token string">&quot;jmsListenerContainerFactoryTopic&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive4</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监听器触发，调用成功2-topic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_15【掌握】activemq的传输协议" tabindex="-1"><a class="header-anchor" href="#_15【掌握】activemq的传输协议" aria-hidden="true">#</a> 15【掌握】ActiveMQ的传输协议</h1><h2 id="_1-activemq的传输协议简介" tabindex="-1"><a class="header-anchor" href="#_1-activemq的传输协议简介" aria-hidden="true">#</a> 1，ActiveMQ的传输协议简介</h2><p>ActiveMQ允许客户端使用多种协议来连接，配置Transport Connector的文件在activeMQ安装目录的conf/activemq.xml中的标签之内。官方默认提供的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>transportConnectors<span class="token punctuation">&gt;</span></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token class-name">DOS</span> protection<span class="token punctuation">,</span> limit concurrent connections <span class="token keyword">to</span> <span class="token number">1000</span> and frame size <span class="token keyword">to</span> <span class="token number">100</span><span class="token constant">MB</span> <span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>transportConnector name<span class="token operator">=</span><span class="token string">&quot;openwire&quot;</span> uri<span class="token operator">=</span><span class="token string">&quot;tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>transportConnector name<span class="token operator">=</span><span class="token string">&quot;amqp&quot;</span> uri<span class="token operator">=</span><span class="token string">&quot;amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>transportConnector name<span class="token operator">=</span><span class="token string">&quot;stomp&quot;</span> uri<span class="token operator">=</span><span class="token string">&quot;stomp://0.0.0.0:61613?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>transportConnector name<span class="token operator">=</span><span class="token string">&quot;mqtt&quot;</span> uri<span class="token operator">=</span><span class="token string">&quot;mqtt://0.0.0.0:1883?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>transportConnector name<span class="token operator">=</span><span class="token string">&quot;ws&quot;</span> uri<span class="token operator">=</span><span class="token string">&quot;ws://0.0.0.0:61614?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>transportConnectors<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ActiveMQ所有URI配置都基于java.net.URI类，该类不允许使用空格。因此，如果正在使用failover:或 static:URI，请不要在&#39;,&#39;符号周围放置任何空格。</p>`,361),q={href:"https://activemq.apache.org/configuring-version-5-transports",target:"_blank",rel:"noopener noreferrer"},w=e('<p>在更改传输协议之前，必须保证ActiveMQ没有运行！</p><hr><h2 id="_2-activemq的传输协议种类" tabindex="-1"><a class="header-anchor" href="#_2-activemq的传输协议种类" aria-hidden="true">#</a> 2，ActiveMQ的传输协议种类</h2><h3 id="_2-1-tcp传输-the-tcp-transport" tabindex="-1"><a class="header-anchor" href="#_2-1-tcp传输-the-tcp-transport" aria-hidden="true">#</a> 2.1，TCP传输（The TCP Transport）</h3><p>TCP传输允许客户端使用TCP套接字连接到远程ActiveMQ代理。这些配置选项可用于使用JMS客户端的连接URI字符串或在代理的传输连接器URI上调整客户端上的底层TCP传输。</p><p>TCP是默认的Broker配置,TCP的Client监听端口61616</p><p>在网络传输数据前，必须要序列化数据，消息是通过一个叫wire protocol的来序列化成字节流。默认情况下，ActiveMQ把wire protocol叫做OpenWire,它的目的是促使网络上的效率和数据快速交互。</p><p>TCP传输的优点：</p><p>TCP协议传输可靠性高，稳定性强</p><p>高效性：字节流方式传递，效率很高</p><p>有效性、可用性：应用广泛，支持任何平台</p>',11),x={href:"http://activemq.apache.org/configuring-version-5-transports.html",target:"_blank",rel:"noopener noreferrer"},_=e(`<p>例子</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>tcp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">61616</span><span class="token operator">?</span>threadName<span class="token operator">&amp;</span>trace<span class="token operator">=</span><span class="token boolean">false</span><span class="token operator">&amp;</span>soTimeout<span class="token operator">=</span><span class="token number">60000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-2、nio传输-the-nio-transport" tabindex="-1"><a class="header-anchor" href="#_2-2、nio传输-the-nio-transport" aria-hidden="true">#</a> 2.2、NIO传输（The NIO Transport）</h3><p>NIO Transport与常规TCP传输非常相似。不同之处在于它是使用NIO API实现的，它可以帮助提高性能和可扩展性，不用将Java NIO包与IBM的AIO4J包混淆。NIO仅是服务器端传输选项。尝试在客户端使用它将实例化常规TCP传输。要从TCP切换到NIO，只需更改URI的方案部分。这是在代理的XML配置文件中定义的示例。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>broker<span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token generics"><span class="token punctuation">&lt;</span>transportConnectors<span class="token punctuation">&gt;</span></span>
    <span class="token operator">&lt;</span>transportConnector name<span class="token operator">=</span><span class="token string">&quot;nio&quot;</span> uri<span class="token operator">=</span><span class="token string">&quot;nio://0.0.0.0:61616&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>  
  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token generics"><span class="token punctuation">&lt;</span>transportConnectors<span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>broker<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NIO和TCP协议类似，但NIO更侧重于底层的访问操作，允许开发人员对同一资源可有更多的client调用和服务端有更多的负载。</p><p>适合使用NIO协议的场景：</p><p>可能有大量的Client去连接到Broker上，一般情况下，大量的Client去连接Broker是被操作系统的线程所限制的。因此，NIO的实现比TCP需要更少的线程去运行，所以建议使用NIO协议</p><p>可能对于Broker有一个很迟钝的网络传输，NIO比TCP提供更好的性能。</p><p>配置语法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>nio<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>hostname<span class="token operator">:</span>port<span class="token operator">?</span>key<span class="token operator">=</span>value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置选项与TCP传输相同。</p><p>注意：原始NIO传输是使用OpenWire协议的tcp传输的替代品。其他网络协议，如AMQP，MQTT，Stomp等也有自己的NIO传输实现。它通常通过在协议前缀中添加“+ nio”后缀来配置，例如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mqtt<span class="token operator">+</span>nio<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">1883</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所有协议特定配置也应适用于NIO版本的传输。</p><h3 id="_2-3-auto传输" tabindex="-1"><a class="header-anchor" href="#_2-3-auto传输" aria-hidden="true">#</a> 2.3，AUTO传输</h3><p>从5.13.0开始，ActiveMQ支持通过TCP，SSL，NIO和NIO SSL进行自动有线协议检测。支持OpenWire，STOMP，AMQP和MQTT。有关详细信息，请参阅AUTOTransport Reference。</p><h3 id="_2-4-vm传输" tabindex="-1"><a class="header-anchor" href="#_2-4-vm传输" aria-hidden="true">#</a> 2.4，VM传输</h3><p>VM传输允许客户端在VM内相互连接，而无需网络通信的开销。使用的连接不是套接字连接，而是使用直接方法调用来启用高性能嵌入式消息传递系统。第一个使用VM连接的客户端将引导嵌入式代理。后续连接将附加相同的代理。一旦关闭了与代理的所有VM连接，嵌入式代理将自动关闭。有关更多信息，请参阅VM传输参考</p><h3 id="_2-5-amqp传输" tabindex="-1"><a class="header-anchor" href="#_2-5-amqp传输" aria-hidden="true">#</a> 2.5，AMQP传输</h3><p>从5.8.0开始，ActiveMQ支持AMQP。有关详细信息，请参阅AMQP传输参考。</p><h3 id="_2-6-mqtt传输" tabindex="-1"><a class="header-anchor" href="#_2-6-mqtt传输" aria-hidden="true">#</a> 2.6，MQTT传输</h3><p>从5.6.0开始，ActiveMQ也支持MQTT。它是一种轻量级的发布/订阅消息传输。有关详细信息，请参阅MQTT传输参考。</p><h3 id="_2-7-ssl传输" tabindex="-1"><a class="header-anchor" href="#_2-7-ssl传输" aria-hidden="true">#</a> 2.7，SSL传输</h3><p>这允许您使用SSL通过TCP进行通信。有关更多信息，请参阅SSL传输参考</p><h3 id="_2-8-nio-ssl传输" tabindex="-1"><a class="header-anchor" href="#_2-8-nio-ssl传输" aria-hidden="true">#</a> 2.8，NIO SSL传输</h3><p>可用性</p><p>自5.6起可用</p><p>通过NIO实现SSL传输。这允许您将大量SSL客户端连接到单个代理实例。它只是服务器端传输选项</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>broker<span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token generics"><span class="token punctuation">&lt;</span>transportConnectors<span class="token punctuation">&gt;</span></span>
    <span class="token operator">&lt;</span>transportConnector name<span class="token operator">=</span><span class="token string">&quot;nio+ssl&quot;</span> uri<span class="token operator">=</span><span class="token string">&quot;nio+ssl://0.0.0.0:61616&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>  
  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token generics"><span class="token punctuation">&lt;</span>transportConnectors<span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>broker<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尝试nio+ssl在客户端使用传输URL将实例化常规SSL传输。</p><h2 id="_3-activemq的传输协议之nio" tabindex="-1"><a class="header-anchor" href="#_3-activemq的传输协议之nio" aria-hidden="true">#</a> 3，ActiveMQ的传输协议之NIO</h2><p>NIO Transport与常规TCP传输非常相似。不同之处在于它是使用NIO API实现的，它可以帮助提高性能和可扩展性，不用将Java NIO包与IBM的AIO4J包混淆。。NIO仅是服务器端传输选项。尝试在客户端使用它将实例化常规TCP传输。要从TCP切换到NIO，只需更改URI的方案部分。这是在代理的XML配置文件中定义的示例。</p><h3 id="_3-1-配置方式" tabindex="-1"><a class="header-anchor" href="#_3-1-配置方式" aria-hidden="true">#</a> 3.1，配置方式</h3><p><img src="https://picgo.xingenhi.cn//typoraclip_image0026aa44c83-bfdb-4f65-a327-c53dcb9c26ea.png" alt="image"></p><h3 id="_3-2-是否可以和其它协议共存" tabindex="-1"><a class="header-anchor" href="#_3-2-是否可以和其它协议共存" aria-hidden="true">#</a> 3.2，是否可以和其它协议共存？</h3><h3 id="_3-3-使用之前的代码进行验证" tabindex="-1"><a class="header-anchor" href="#_3-3-使用之前的代码进行验证" aria-hidden="true">#</a> 3.3，使用之前的代码进行验证</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">URL</span> <span class="token operator">=</span> <span class="token string">&quot;nio://192.169.3.100:61618&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> queue_name <span class="token operator">=</span> <span class="token string">&quot;Transport&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_4-activemq的传输协议之nio加强" tabindex="-1"><a class="header-anchor" href="#_4-activemq的传输协议之nio加强" aria-hidden="true">#</a> 4，ActiveMQ的传输协议之NIO加强</h2><p>以上的设置NIO只能支持openwire协议，那么能不能让基支持其它协议呢</p><h3 id="_4-1-使用auto来解决" tabindex="-1"><a class="header-anchor" href="#_4-1-使用auto来解决" aria-hidden="true">#</a> 4.1，使用auto来解决</h3><p>使用auto关键字</p><p>使用“+”符号来为端口设置多种特性</p><p>如果我们即需要某一个端口支持NIO网络io模型，又需要它支持多种协议</p><p><img src="https://picgo.xingenhi.cn//typoraclip_image004ef637e54-95d5-406f-a1ca-d64c5df86989.png" alt="image"></p><h1 id="_16【掌握】activemq消息持久化" tabindex="-1"><a class="header-anchor" href="#_16【掌握】activemq消息持久化" aria-hidden="true">#</a> 16【掌握】ActiveMQ消息持久化</h1><p>1，ActiveMQ消息持久化理论简介</p><p>ActiveMQ的持久化机制包含JDBC，KahaDB、LevelDB</p><p><img src="https://picgo.xingenhi.cn//typora0.5079984774527203.png" alt="image"></p><p>在activemq.xml中查看默认的broker持久化机制。</p><p><img src="https://picgo.xingenhi.cn//typora0.022608437561748476.png" alt="image"></p>`,52),M={href:"http://activemq.apache.org/persistence.html",target:"_blank",rel:"noopener noreferrer"},j=e(`<h2 id="_2-activemq消息持久化机制之amq和kahadb" tabindex="-1"><a class="header-anchor" href="#_2-activemq消息持久化机制之amq和kahadb" aria-hidden="true">#</a> 2，ActiveMQ消息持久化机制之AMQ和KahaDB</h2><h3 id="_2-1-amq的优缺点" tabindex="-1"><a class="header-anchor" href="#_2-1-amq的优缺点" aria-hidden="true">#</a> 2.1，AMQ的优缺点</h3><p>1、性能</p><pre><code>AMQ的性能改与JDBC的持久化机制，由于是在文件中追加写入消息，所以性能比较高。并且创建了消息主键索引和缓存机制以提升性能。每个日志文件默认为32M，超出后会创建一个新文件。当消息消费完成后是进行删除还是归档操作，取决于配置。
</code></pre><p>2、缺点</p><pre><code>AMQ会为每一个Destination创建一个索引，若创建了大小的消息队列，则磁盘占用会非常大；所以由于索引文件比较大，当Broker崩溃后，重建所以速度比较慢。
</code></pre><h3 id="_2-2-kahadb的概述" tabindex="-1"><a class="header-anchor" href="#_2-2-kahadb的概述" aria-hidden="true">#</a> 2.2，KahaDB的概述</h3><pre><code>KahaDB是基于文件的本地数据库储存形式，虽然没有AMQ的速度快，但是它具有强扩展性，恢复的时间比AMQ短

KahaDB基于文件系统，其次KahaDB支持事务。在ActiveMQ V5.4版本及后续版本KahaDB都是ActiveMQ的默认持久化存储方案。最后   Apache ActiveMQ官方表示它用来替换之前的AMQ Message Store存储方案。

KahaDB主要元素包括：一个内存Metadata Cache用来在内存中检索消息的存储位置、若干用于记录消息内容的Data log文件、一个在磁盘上检索消息存储位置的Metadata Store、还有一个用于在系统异常关闭后恢复Btree结构的redo文件。如下图所示（官网引用）：
</code></pre><p><img src="https://picgo.xingenhi.cn//typora0.6604182208440779.png" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typora0.41150378823257217.png" alt="image"></p><h3 id="_2-3-kahadb主要特性" tabindex="-1"><a class="header-anchor" href="#_2-3-kahadb主要特性" aria-hidden="true">#</a> 2.3，KahaDB主要特性</h3><pre><code>1、日志形式存储消息；

2、消息索引以B-Tree结构存储，可以快速更新；

3、完全支持JMS事务；

4、支持多种恢复机制；

    消息存储在基于文件的数据日志中。如果消息发送成功，变标记为可删除的。系统会周期性的清除或者归档日志文件。

    消息文件的位置索引存储在内存中，这样能快速定位到。定期将内存中的消息索引保存到metadata store中，避免大量消息未发送时，消息索引占用过多内存空间。
</code></pre><h3 id="_2-4-kahadb的文档结构说明" tabindex="-1"><a class="header-anchor" href="#_2-4-kahadb的文档结构说明" aria-hidden="true">#</a> 2.4，KahaDB的文档结构说明</h3><p>进入activemq/data目录</p><p><img src="https://picgo.xingenhi.cn//typora0.948645140515458.png" alt="image"></p><p>进入bahadb的目录</p><p>以下是KahaDB在磁盘文件上的现实展示。注意，可能您查看自己测试实例中所运行的KahaDB，看到的效果和本文中给出的效果不完全一致。例如您的data log文件可能叫db-1.log，也有可能会多出一个db.free的文件，但是这些都不影响我们对文件结构的分析：</p><p><img src="https://picgo.xingenhi.cn//typora0.14504065713435854.png" alt="image"></p><p>①db.data</p><p>它是消息的<strong>索引</strong>文件。本质上是B-Tree的实现，使用B-Tree作为索引指向db-*.log里面存储的消息。</p><p>②db.redo</p><p>主要用来进行<strong>消息恢复</strong>。</p><p>③db-*.log 存储<strong>消息的内容</strong>。对于一个消息而言，不仅仅有消息本身的数据(message data)，而且还有(Destinations、订阅关系、事务...)</p><p>data log以日志形式存储消息，而且新的数据总是以APPEND的方式追加到日志文件末尾。因此，消息的存储是很快的。比如，对于持久化消息，Producer把消息发送给Broker，Broker先把消息存储到磁盘中(enableJournalDiskSyncs配置选项)，然后再向Producer返回Acknowledge。Append方式在一定程度上减少了Broker向Producer返回Acknowledge的时间。</p><p>④lock文件 锁</p><h3 id="_2-5-kahadb的属性-为重要的" tabindex="-1"><a class="header-anchor" href="#_2-5-kahadb的属性-为重要的" aria-hidden="true">#</a> 2.5，KahaDB的属性(*为重要的)</h3><p><img src="https://picgo.xingenhi.cn//typora0.10736870090058515.png" alt="image"></p><p>5.4之后的版本</p><p><img src="https://picgo.xingenhi.cn//typora0.2587982858865685.png" alt="image"></p><p>5.6版本之后有效的属性：</p><p><img src="https://picgo.xingenhi.cn//typora0.31828156604293906.png" alt="image"></p><p>5.10版本</p><p><img src="https://picgo.xingenhi.cn//typora0.5805752152229444.png" alt="image"></p><hr><h2 id="_3-activemq消息持久化机制之leveldb简介【了解】" tabindex="-1"><a class="header-anchor" href="#_3-activemq消息持久化机制之leveldb简介【了解】" aria-hidden="true">#</a> 3，ActiveMQ消息持久化机制之LevelDB简介【了解】</h2><h3 id="_3-1-概述" tabindex="-1"><a class="header-anchor" href="#_3-1-概述" aria-hidden="true">#</a> 3.1，概述</h3><p>LevelDB：从ActiveMQ 5.6版本之后，又推出了LevelDB的持久化引擎。LevelDB持久化性能高于KahaDB，虽然目前默认的持久化方式仍然是KahaDB，但是LevelDB是将来的趋势。并且，在ActiveMQ 5.9版本提供了基于LevelDB和Zookeeper的数据复制方式，用于Master-slave方式的首选数据复制方案。LevelDB使用自定义的索引代替常用的BTree索引。</p><p><img src="https://picgo.xingenhi.cn//typora0.17053095919600958.png" alt="image"></p><pre><code>    通过上图可以看出LevelDB主要由6部分组成：内存中的MemTable和ImmutableMemTable，还有硬盘上的log文件，manifest文件，current文件和SSTable文件。还有一些其他的辅助文件，暂时不做说明。

    每写入一次数据，需要写入log文件，和MemTable，也就是说，只需要一次硬盘的顺序写入，和一个内存写入，如果系统崩溃，可以通过log文件恢复数据。每次写入会先写log文件，后写MemTable来保证不丢失数据。

    当MemTable到达内存阀值，LevelDB会创建一个新的MemTable和log文件，而旧的MemTable会变成ImmutableMemTable，ImmutableMemTable的内容是只读的。然后系统会定时的异步的把ImmutableMemTable的数据写入新的SSTable文件。

    SSTable文件和MemTable，ImmutableMemTable的数据结构相同，都是key，value的数据，按照key排序。

    manifest文件用于记录每个SSTable的key的起始值和结束值，有点类似于B-tree索引。而manifest同样会生成新文件，旧的文件不再使用。current文件就是指定哪个manifest文件是现在正在使用的。
</code></pre><h3 id="_3-2-官网" tabindex="-1"><a class="header-anchor" href="#_3-2-官网" aria-hidden="true">#</a> 3.2，官网</h3>`,40),S={href:"http://activemq.apache.org/leveldb-store",target:"_blank",rel:"noopener noreferrer"},A=e(`<p><img src="https://picgo.xingenhi.cn//typora0.2192156157154842.png" alt="image"></p><p>官网已经不推荐使用</p><hr><h2 id="_4-activemq消息持久化机制之jdbc配置mysql【了解】" tabindex="-1"><a class="header-anchor" href="#_4-activemq消息持久化机制之jdbc配置mysql【了解】" aria-hidden="true">#</a> 4，ActiveMQ消息持久化机制之JDBC配置mysql【了解】</h2><h3 id="_4-1-概述" tabindex="-1"><a class="header-anchor" href="#_4-1-概述" aria-hidden="true">#</a> 4.1，概述</h3><p>顾名思义，JDBC持久化就是把消息的相关信息存入mysql数据库里面</p><h3 id="_4-2-配置方式" tabindex="-1"><a class="header-anchor" href="#_4-2-配置方式" aria-hidden="true">#</a> 4.2，配置方式</h3><h4 id="_4-2-1-把连接mysql数据库的jar文件-放到activemq的lib目录下" tabindex="-1"><a class="header-anchor" href="#_4-2-1-把连接mysql数据库的jar文件-放到activemq的lib目录下" aria-hidden="true">#</a> 4.2.1，把连接MySQL数据库的jar文件，放到ActiveMQ的lib目录下</h4><p><img src="https://picgo.xingenhi.cn//typora0.2949594448873524.png" alt="image"></p><h4 id="_4-2-2-修改conf目录下的activemq-xml原来的kahadb的持久化数据的方式" tabindex="-1"><a class="header-anchor" href="#_4-2-2-修改conf目录下的activemq-xml原来的kahadb的持久化数据的方式" aria-hidden="true">#</a> 4.2.2， 修改conf目录下的activemq.xml原来的kahadb的持久化数据的方式</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1</span>、注释原有配置
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>
<span class="token generics"><span class="token punctuation">&lt;</span>persistenceAdapter<span class="token punctuation">&gt;</span></span>
      <span class="token operator">&lt;</span>kahaDB directory<span class="token operator">=</span><span class="token string">&quot;\${activemq.data}/kahadb&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>persistenceAdapter<span class="token operator">&gt;</span>
<span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token number">2</span>、修改成新的配置
<span class="token generics"><span class="token punctuation">&lt;</span>persistenceAdapter<span class="token punctuation">&gt;</span></span>
      <span class="token operator">&lt;</span>jdbcPersistenceAdapter dataSource<span class="token operator">=</span><span class="token string">&quot;#mysql-ds&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>persistenceAdapter<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-2-3-连接mysql的配置-注意配置文件放置的位置放在borker下面" tabindex="-1"><a class="header-anchor" href="#_4-2-3-连接mysql的配置-注意配置文件放置的位置放在borker下面" aria-hidden="true">#</a> 4.2.3，连接Mysql的配置(注意配置文件放置的位置放在borker下面)</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;mysql-ds&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;org.apache.commons.dbcp2.BasicDataSource&quot;</span> destroy<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">&quot;close&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;driverClassName&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;com.mysql.jdbc.Driver&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;url&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;jdbc:mysql://localhost:3306/activemq?relaxAutoCommit=true&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;username&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;password&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;123456&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;poolPreparedStatements&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;true&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时，重新启动MQ，就会发现db数据库中多了三张表：activemq_acks，activemq_lock，activemq_msgs，OK，说明activemq已经持久化成功啦！</p><p>如果没有就使用脚本</p><p><img src="https://picgo.xingenhi.cn//typora0.7242028761810905.png" alt="image"></p><h3 id="_4-3-三张表的说明" tabindex="-1"><a class="header-anchor" href="#_4-3-三张表的说明" aria-hidden="true">#</a> 4.3，三张表的说明</h3><h4 id="_4-3-1-activemq-acks" tabindex="-1"><a class="header-anchor" href="#_4-3-1-activemq-acks" aria-hidden="true">#</a> 4.3.1，activemq_acks：</h4><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>用于存储订阅关系。如果是持久化Topic，订阅者和服务器的订阅关系在这个表保存。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>主要的数据库字段如下：
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>container：消息的destination</li><li>sub_dest：如果是使用static集群，这个字段会有集群其他系统的信息</li><li>client_id：每个订阅者都必须有一个唯一的客户端id用以区分</li><li>sub_name：订阅者名称</li><li>selector：选择器，可以选择只消费满足条件的消息。条件可以用自定义属性实现，可支持多属性and和or操作</li><li>last_acked_id：记录消费过的消息的id。</li></ul><h4 id="_4-3-2-activemq-lock" tabindex="-1"><a class="header-anchor" href="#_4-3-2-activemq-lock" aria-hidden="true">#</a> 4.3.2，activemq_lock</h4><p>在集群环境中才有用，只有一个Broker可以获得消息，称为Master Broker，其他的只能作为备份等待Master Broker不可用，才可能成为下一个Master Broker。这个表用于记录哪个Broker是当前的Master Broker。</p><h4 id="_4-3-3-activemq-msgs" tabindex="-1"><a class="header-anchor" href="#_4-3-3-activemq-msgs" aria-hidden="true">#</a> 4.3.3，activemq_msgs：</h4><p>用于存储消息，Queue和Topic都存储在这个表中。</p><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>主要的数据库字段如下：
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>id：自增的数据库主键</li><li>container：消息的destination</li><li>msgid_prod：消息发送者客户端的主键</li><li>msg_seq：是发送消息的顺序，msgid_prod+msg_seq可以组成jms的messageid</li><li>expiration：消息的过期时间，存储的是从1970-01-01到现在的毫秒数</li><li>msg：消息本体的java序列化对象的二进制数据</li><li>priority：优先级，从0-9，数值越大优先级越高</li><li>activemq_acks用于存储订阅关系。如果是持久化topic，订阅者和服务器的订阅关系在这个表保存</li></ul><h3 id="_4-4-运行代码验证" tabindex="-1"><a class="header-anchor" href="#_4-4-运行代码验证" aria-hidden="true">#</a> 4.4，运行代码验证</h3><p>一定要开启持久化 <strong>producer.setDeliveryMode(DeliveryMode.PERSISTENT);</strong></p><h3 id="_4-5-验证结果" tabindex="-1"><a class="header-anchor" href="#_4-5-验证结果" aria-hidden="true">#</a> 4.5，验证结果</h3><p>如果是点对点：在没有消费的情况下会把消息保存到activemq_msgs表中，只要有任意一个消费者已经消费过了，这些消息会立马被清除。</p><p>如果是topic，一般是先启动消费者订阅再生产的情况下会把消息保存到activemq_acks中。</p><h3 id="_4-6-可以遇到的坑" tabindex="-1"><a class="header-anchor" href="#_4-6-可以遇到的坑" aria-hidden="true">#</a> 4.6，可以遇到的坑</h3><p>数据库jar包</p><p>记得需要使用到的相关jar文件放置到Activemq安装路径下的lib目录，连接池的包也要放</p><p>createTableOnStartup属性</p><p>在jdbcPersistenceAdapter标签中设置了createTablesOnStartup属性为true时在第一次启动activeMQ时，ActiveMQ服务节点会自动创建表。启动完成后可以去掉这个属性，或者更改为false</p><p>下划线的问题</p><p>如果出现java.lang.IIlegalStateException:BeanFactory not initalized or already closed</p><p>这是因为操作系统的机器名中有&quot;_&quot;符号，请更改机器名并重启后可以解决</p><h3 id="_4-7-关于主题和队列" tabindex="-1"><a class="header-anchor" href="#_4-7-关于主题和队列" aria-hidden="true">#</a> 4.7，关于主题和队列</h3><ul><li>队列会默认进行存储。</li><li>如果主题没有持久的订阅者，那么主题消息不会被持久化；如果有，即使没有上线，也会持久化。</li></ul><hr><h2 id="_5-activemq消息持久化机制之jdbc-with-journal" tabindex="-1"><a class="header-anchor" href="#_5-activemq消息持久化机制之jdbc-with-journal" aria-hidden="true">#</a> 5，ActiveMQ消息持久化机制之JDBC With Journal</h2><h3 id="_5-1-概述" tabindex="-1"><a class="header-anchor" href="#_5-1-概述" aria-hidden="true">#</a> 5.1，概述</h3><p>为了在ActiveMQ V4.x中实现持久消息传递的高性能，我们强烈建议您使用我们的高性能日志 - 默认情况下已启用。这很像一个数据库消息（以及transcation提交/回滚和消息确认）以尽可能快的速度写入日志 - 然后每隔一段时间我们将日志检查到长期持久性存储（在本例中为JDBC）。</p><p>它在使用队列时很常见，例如消息在发布后很快消耗掉; 因此，您可以发布10,000条消息，并且只有一些未完成的消息 - 因此，当我们检查JDBC数据库时，我们通常只有少量消息可以实际写入JDBC。即使我们必须将所有消息写入JDBC，我们仍然可以通过日志获得性能提升，因为我们可以使用大型事务批处理将消息插入JDBC数据库以提高JDBC端的性能。</p><p>JDBC With Journal方式克服了JDBC Store的不足，使用快速的缓存写入技术，大大提高了性能。</p><p>JDBC With Journal方式，发送出来的消息会在内存中告诉缓存，接收端若在没有接收情况下7~10分钟后再写入数据库，这样接收端就不用等到数据库操作完了之后再接收消息。</p><h3 id="_5-2-jdbc-store和jdbc-message-store-with-activemq-journal的区别" tabindex="-1"><a class="header-anchor" href="#_5-2-jdbc-store和jdbc-message-store-with-activemq-journal的区别" aria-hidden="true">#</a> 5.2，JDBC Store和JDBC Message Store with ActiveMQ Journal的区别</h3><ol><li>Jdbc with journal的性能优于jdbc</li><li>Jdbc用于master/slave模式的数据库分享</li><li>Jdbc with journal不能用于master/slave模式</li><li>一般情况下，推荐使用jdbc with journal</li></ol><p>5.3，配置方式</p><p>1、打开activemq.xml配置文件（在apache-activemq/conf文件夹下），将原来使用的kahaDB消息持久化机制注释掉，添加以下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>persistenceFactory<span class="token punctuation">&gt;</span></span>
    <span class="token operator">&lt;</span>journalPersistenceAdapterFactory 
        journalLogFiles<span class="token operator">=</span><span class="token string">&quot;4&quot;</span>
        journalLogFileSize<span class="token operator">=</span><span class="token string">&quot;32768&quot;</span>
        useJournal<span class="token operator">=</span><span class="token string">&quot;true&quot;</span>
        useQuickJournal<span class="token operator">=</span><span class="token string">&quot;true&quot;</span>
        dataSource<span class="token operator">=</span><span class="token string">&quot;#mysql-ds&quot;</span>
        dataDirectory<span class="token operator">=</span><span class="token string">&quot;activemq-data&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>persistenceFactory<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.9443441612119923.png" alt="image"></p><p>2，也可以配置dbcp的数据连接池，但是必须引入dbcp的相关jar包</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;mysql-ds&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span> destroy<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">&quot;close&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;driverClassName&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;com.mysql.jdbc.Driver&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;url&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;jdbc:mysql://localhost/db?relaxAutoCommit=true&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;username&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;activemq&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;password&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;activemq&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;poolPreparedStatements&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;true&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_6-activemq持久化机制小总结" tabindex="-1"><a class="header-anchor" href="#_6-activemq持久化机制小总结" aria-hidden="true">#</a> 6，ActiveMQ持久化机制小总结</h2><p>1，持久化消息的作用</p><pre><code>MQ所在的服务器down了消息不会丢失的机制
</code></pre><p>2，持久化机制演化过程</p><pre><code>从最初的AMQ Message Store方案到ActiveMQ V4版本中推出的High performance journal(高性能事务支持)附件，并且同步推出数据库的存储方案。ActiveMQ5.3版本中又推出来的KahaDB的支持(5.4版本后为ActiveMQ默认持久化方案)，后来又开始支持LeaveDB,到现在。V5.9+版本提供了标准的zookeeper+LeavelDB集群化方案。
</code></pre><p>3，ActiveMQ的消息持久化机制</p><ul><li>AMQ</li><li>KahaDB</li><li>JDBC</li><li><s>LevelDB</s></li><li>Replicated LevelDB Store 集群模式</li></ul><p>4，其它</p><pre><code>在发送者把消息发送出去后，消息中心首先把消息存储到本地数据文件、内存数据库者或者远程数据库等，然后试图把消息发送给接收者

发送成功则把消息从存储中删除失败则继续尝试。消息中心启动后首先要检查指定存储位置，如果有未发送成功的消息，就需要把消息发送出去
</code></pre><h1 id="_17【掌握】zookeeper和replicated-leveldb" tabindex="-1"><a class="header-anchor" href="#_17【掌握】zookeeper和replicated-leveldb" aria-hidden="true">#</a> 17【掌握】Zookeeper和Replicated LevelDB</h1><h2 id="_1-面试题" tabindex="-1"><a class="header-anchor" href="#_1-面试题" aria-hidden="true">#</a> 1，面试题</h2><p>引入消息队列之后如何保证高可用？</p><p>基于zookeeper和leveldb搭建activemq集群 集群仅提供主备方式的高可用集群功能，避免单点故障</p><h2 id="_2-zookeeper和replicated-leveldb集群概述" tabindex="-1"><a class="header-anchor" href="#_2-zookeeper和replicated-leveldb集群概述" aria-hidden="true">#</a> 2，Zookeeper和Replicated LevelDB集群概述</h2><p>保存高可用</p><p>一台不行，搞多台</p><p>5.9之后推荐使用Replicated LevelDB的集群配置</p>`,77),C={href:"http://activemq.apache.org/persistence",target:"_blank",rel:"noopener noreferrer"},Q=n("p",null,"使用ZooKeeper实现的Master-Slave实现方式，是对ActiveMQ进行高可用的一种有效的解决方案，高可用的原理：使用ZooKeeper（集群）注册所有的ActiveMQ Broker。只有其中的一个Broker可以对外提供服务（也就是Master节点），其他的Broker处于待机状态，被视为Slave。如果Master因故障而不能提供服务，则利用ZooKeeper的内部选举机制会从Slave中选举出一个Broker充当Master节点，继续对外提供服务。",-1),T=n("p",null,"高可用+负载均衡实现",-1),D=n("p",null,"Broker-Cluster 可以解实现载均衡，但当其中一个 Broker 突然宕掉的话，那么存在于该 Broker 上处于 Pending 状态的 message 将会丢失，无法达到高可用的目的。Master-Slave 与 Broker-Cluster 相结合的部署",-1),E=n("p",null,[n("img",{src:"https://picgo.xingenhi.cn//typora0.849235129955798.png",alt:"image"})],-1),P=n("p",null,[n("img",{src:"https://picgo.xingenhi.cn//typora0.8461255172021978.png",alt:"image"})],-1),I=n("h2",{id:"_3-zookeeper和replicated-leveldb集群部署原理说明",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-zookeeper和replicated-leveldb集群部署原理说明","aria-hidden":"true"},"#"),s(" 3，Zookeeper和Replicated LevelDB集群部署原理说明")],-1),L={href:"http://activemq.apache.org/replicated-leveldb-store",target:"_blank",rel:"noopener noreferrer"},B=e(`<p><img src="https://picgo.xingenhi.cn//typora0.345746968959959.png" alt="image"></p><p>使用zk集群注册所有的ActiveMQ Broker但只有其中一个Broker可以提供服务它将被视为Master,其它的Broker处于待机状态人Slave.</p><p>如果Master挂了，Zookeeper会从Slave中选出一个Broker当作Master</p><p>Slave连接Master并同步他们的存储状态，Slave不接受客户端连接。所有的存储操作都会被复制连接到Master的Slave.</p><p>如果Master宕机得到了最新的Slave会成为Master.故障节点在恢复后会重新加入到集群中并连接Master进入Slave模式。</p><p>所有需要同步到磁盘的消息传递操作都将等待更新完成后再复制到法定仲裁节点。因此，如果将存储配置为，replicas=&quot;3&quot;则仲裁大小为(3/2+1)=2。主服务器将更新存储在本地，并等待另外1个从服务器存储更新，然后再报告成功。考虑它的另一种方法是，存储将对复制节点的仲裁进行同步复制，对任何其他节点进行异步复制复制。</p><p>当选出一个新的主节点时，您还至少需要有一定数量的联机节点才能找到更新最新的节点。更新最新的节点将成为新的主节点。因此，<strong>建议您至少使用3个副本节点运行</strong>，以便可以在不造成服务中断的情况下关闭一个副本节点。</p><h2 id="_4-zookeeper和replicated-leveldb集群部署配置" tabindex="-1"><a class="header-anchor" href="#_4-zookeeper和replicated-leveldb集群部署配置" aria-hidden="true">#</a> 4，Zookeeper和Replicated LevelDB集群部署配置</h2><h3 id="_4-1-环境和版本" tabindex="-1"><a class="header-anchor" href="#_4-1-环境和版本" aria-hidden="true">#</a> 4.1.环境和版本</h3><p>centos7+</p><p>jdk1.8+</p><p>zookeeper</p><p><strong>apache-activemq-5.15.9-bin.tar.gz</strong></p><h3 id="_4-2-关闭防火墙并保证win可以ping通过activemq服务器" tabindex="-1"><a class="header-anchor" href="#_4-2-关闭防火墙并保证win可以ping通过activemq服务器" aria-hidden="true">#</a> 4.2.关闭防火墙并保证win可以ping通过activemq服务器</h3><h3 id="_4-3-要求具备zk或zk集群并可以成功启动" tabindex="-1"><a class="header-anchor" href="#_4-3-要求具备zk或zk集群并可以成功启动" aria-hidden="true">#</a> 4.3.要求具备zk或zk集群并可以成功启动</h3><p>参考之前讲解过的zookeeper</p><h4 id="_4-4-集群部署规划列表" tabindex="-1"><a class="header-anchor" href="#_4-4-集群部署规划列表" aria-hidden="true">#</a> 4.4.集群部署规划列表</h4><table><thead><tr><th>主机</th><th>zk端口</th><th>AMQ集群bind的端口</th><th>AMQ消息TCP端口</th><th>管理控制台端口</th><th>AMQ节点安装目录</th></tr></thead><tbody><tr><td>192.168.3.110</td><td>2181</td><td>bind:&quot;tcp://0.0.0.0:63631&quot;</td><td>61616</td><td>8161</td><td>/activemq_cluster/node01</td></tr><tr><td>192.168.3.110</td><td>2181</td><td>bind:&quot;tcp://0.0.0.0:63632&quot;</td><td>61617</td><td>8162</td><td>/activemq_cluster/node02</td></tr><tr><td>192.168.3.110</td><td>2181</td><td>bind:&quot;tcp://0.0.0.0:63633&quot;</td><td>61618</td><td>8163</td><td>/activemq_cluster/node03</td></tr></tbody></table><h4 id="_2-5-创建3台集群目录" tabindex="-1"><a class="header-anchor" href="#_2-5-创建3台集群目录" aria-hidden="true">#</a> 2.5.创建3台集群目录</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mkdir <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>activemq_cluster
cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>activemq_cluster
cp <span class="token operator">-</span>r <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>activemq activemq<span class="token operator">-</span>node01
cp <span class="token operator">-</span>r <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>activemq activemq<span class="token operator">-</span>node02
cp <span class="token operator">-</span>r <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>activemq activemq<span class="token operator">-</span>node03
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.9529995058112273.png" alt="image"></p><h4 id="_2-6-修改管理控制台端口" tabindex="-1"><a class="header-anchor" href="#_2-6-修改管理控制台端口" aria-hidden="true">#</a> 2.6.修改管理控制台端口</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>vim <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>activemq<span class="token operator">-</span>cluster<span class="token operator">/</span>activemq<span class="token operator">-</span>node01<span class="token operator">/</span>conf<span class="token operator">/</span>jetty<span class="token punctuation">.</span>xml     
vim <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>activemq<span class="token operator">-</span>cluster<span class="token operator">/</span>activemq<span class="token operator">-</span>node02<span class="token operator">/</span>conf<span class="token operator">/</span>jetty<span class="token punctuation">.</span>xml     
vim <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>activemq<span class="token operator">-</span>cluster<span class="token operator">/</span>activemq<span class="token operator">-</span>node03<span class="token operator">/</span>conf<span class="token operator">/</span>jetty<span class="token punctuation">.</span>xml     
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.20227980999213296.png" alt="image"></p><p><strong>2.7.hostname名字映射[可以不写，目地是为了防止IP变化之后改的配置比较多]</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>vim <span class="token operator">/</span>etc<span class="token operator">/</span>hosts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.520306786211774.png" alt="image"></p><h4 id="_2-8-activemq集群配置" tabindex="-1"><a class="header-anchor" href="#_2-8-activemq集群配置" aria-hidden="true">#</a> 2.8.activemq集群配置</h4><p>3个节点的BrokerName要求完全一致</p><p><img src="https://picgo.xingenhi.cn//typora0.5248660943941641.png" alt="image"></p><p>3个节点的持久化配置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>persistenceAdapter<span class="token punctuation">&gt;</span></span>
         <span class="token operator">&lt;</span>replicatedLevelDB
           directory<span class="token operator">=</span><span class="token string">&quot;\${activemq.data}/leveldb&quot;</span>
           replicas<span class="token operator">=</span><span class="token string">&quot;3&quot;</span>
           bind<span class="token operator">=</span><span class="token string">&quot;tcp://0.0.0.0:63631&quot;</span>
            zkAddress<span class="token operator">=</span><span class="token string">&quot;127.0.0.1:2181&quot;</span>
               hostname<span class="token operator">=</span><span class="token string">&quot;xingen-server&quot;</span>
           zkPath<span class="token operator">=</span><span class="token string">&quot;/activemq/leveldb-stores&quot;</span>
           <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>persistenceAdapter<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>persistenceAdapter<span class="token punctuation">&gt;</span></span>
            <span class="token operator">&lt;</span>replicatedLevelDB
               directory<span class="token operator">=</span><span class="token string">&quot;\${activemq.data}/leveldb&quot;</span>
               replicas<span class="token operator">=</span><span class="token string">&quot;3&quot;</span>
               bind<span class="token operator">=</span><span class="token string">&quot;tcp://0.0.0.0:63632&quot;</span>
               zkAddress<span class="token operator">=</span><span class="token string">&quot;127.0.0.1:2181&quot;</span>
               hostname<span class="token operator">=</span><span class="token string">&quot;xingen-server&quot;</span>
               zkPath<span class="token operator">=</span><span class="token string">&quot;/activemq/leveldb-stores&quot;</span>
               <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>persistenceAdapter<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>persistenceAdapter<span class="token punctuation">&gt;</span></span>
         <span class="token operator">&lt;</span>replicatedLevelDB
           directory<span class="token operator">=</span><span class="token string">&quot;\${activemq.data}/leveldb&quot;</span>
           replicas<span class="token operator">=</span><span class="token string">&quot;3&quot;</span>
           bind<span class="token operator">=</span><span class="token string">&quot;tcp://0.0.0.0:63633&quot;</span>
           zkAddress<span class="token operator">=</span><span class="token string">&quot;127.0.0.1:2181&quot;</span>
           hostname<span class="token operator">=</span><span class="token string">&quot;xingen-server&quot;</span>
           zkPath<span class="token operator">=</span><span class="token string">&quot;/activemq/leveldb-stores&quot;</span>
           <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>persistenceAdapter<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-9-修改各个节点的消息端口" tabindex="-1"><a class="header-anchor" href="#_2-9-修改各个节点的消息端口" aria-hidden="true">#</a> 2.9.修改各个节点的消息端口</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>vim <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>activemq<span class="token operator">-</span>cluster<span class="token operator">/</span>activemq<span class="token operator">-</span>node01<span class="token operator">/</span>conf<span class="token operator">/</span>activemq<span class="token punctuation">.</span>xml
vim <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>activemq<span class="token operator">-</span>cluster<span class="token operator">/</span>activemq<span class="token operator">-</span>node02<span class="token operator">/</span>conf<span class="token operator">/</span>activemq<span class="token punctuation">.</span>xml
vim <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>activemq<span class="token operator">-</span>cluster<span class="token operator">/</span>activemq<span class="token operator">-</span>node03<span class="token operator">/</span>conf<span class="token operator">/</span>activemq<span class="token punctuation">.</span>xml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora0.4309570197427725.png" alt="image"></p><h4 id="_2-10-按照顺序启动3个activemq节点-到这步前题是zk集群已经成功启动运行2-11-zk集群的节点状态说明" tabindex="-1"><a class="header-anchor" href="#_2-10-按照顺序启动3个activemq节点-到这步前题是zk集群已经成功启动运行2-11-zk集群的节点状态说明" aria-hidden="true">#</a> 2.10.按照顺序启动3个ActiveMQ节点， 到这步前题是zk集群已经成功启动运行2.11.zk集群的节点状态说明</h4><p>连接zk</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span>/usr<span class="token operator">/</span>local<span class="token operator">/</span>zookeeper<span class="token operator">/</span>bin<span class="token operator">/</span>zkCli<span class="token punctuation">.</span>sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看master</p><p><img src="https://picgo.xingenhi.cn//typora0.5284559081496747.png" alt="image"></p><h2 id="_4-replicated-leveldb集群故障迁移和验证" tabindex="-1"><a class="header-anchor" href="#_4-replicated-leveldb集群故障迁移和验证" aria-hidden="true">#</a> 4，Replicated LevelDB集群故障迁移和验证</h2><h3 id="集群可用性测试" tabindex="-1"><a class="header-anchor" href="#集群可用性测试" aria-hidden="true">#</a> 集群可用性测试</h3><p>MQ的客户端只能访问Master的Broker,其它处理Slave的Broker不能访问，所有客户端连接的Broker应该使用failover协议</p><p>当一个MQ节点挂掉或者一个zk节点挂掉，mq服务依然正常运行，如果只剩下一个MQ节点由于不能选举Master,所有MQ不能正常运行</p><p>同样的，如果ZK只剩下一个节点活动，不管MQ节点存活，MQ也不能正常提供服务(MQ集群的高可用依赖于zk集群的高可用)</p><h3 id="干掉一台activemq-它会自动切换到另一个活着的" tabindex="-1"><a class="header-anchor" href="#干掉一台activemq-它会自动切换到另一个活着的" aria-hidden="true">#</a> 干掉一台Activemq，它会自动切换到另一个活着的</h3><p>3如机器中的MQ只会有一个MQ可以被客户端连接使用，在测试时可以把Master关掉，然后再重试客户端消息发送和消费还可以正常使用，则说明集群正常。</p>`,47),J={href:"http://192.168.3.110:8161%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E8%AE%BF%E9%97%AE",target:"_blank",rel:"noopener noreferrer"},O=e(`<p>代码测试更改brokerUrl</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>failover<span class="token operator">:</span><span class="token punctuation">(</span>tcp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>leige<span class="token punctuation">.</span>tech<span class="token operator">:</span><span class="token number">61616</span><span class="token punctuation">,</span>tcp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>leige<span class="token punctuation">.</span>tech<span class="token operator">:</span><span class="token number">61617</span><span class="token punctuation">,</span>tcp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>leige<span class="token punctuation">.</span>tech<span class="token operator">:</span><span class="token number">61618</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5-解决有数据之后主机宕机后无法访问的问题" tabindex="-1"><a class="header-anchor" href="#_5-解决有数据之后主机宕机后无法访问的问题" aria-hidden="true">#</a> 5，解决有数据之后主机宕机后无法访问的问题</h2><p><img src="https://picgo.xingenhi.cn//typora0.26397019554932777.png" alt="image"></p><p>查看日志出现以下错【雷哥没法解决】 ---换MQ的版本apache-activemq-5.15.9-bin.tar.gz</p><p><img src="https://picgo.xingenhi.cn//typora0.6531794310390467.png" alt="image"></p><h1 id="_18【掌握】activemq高级特性" tabindex="-1"><a class="header-anchor" href="#_18【掌握】activemq高级特性" aria-hidden="true">#</a> 18【掌握】ActiveMQ高级特性</h1><h2 id="_1-高级特性之异步投递及确认成功" tabindex="-1"><a class="header-anchor" href="#_1-高级特性之异步投递及确认成功" aria-hidden="true">#</a> 1，高级特性之异步投递及确认成功</h2><h3 id="_1-1-同步发送" tabindex="-1"><a class="header-anchor" href="#_1-1-同步发送" aria-hidden="true">#</a> 1.1，同步发送</h3><pre><code>    ActiveMQ官方说异步发送是很多模式下默认的传输方式，但是在发送非事物持久化消息的时候默认使用的是同步发送模式。同步发送时，Producer.send() 方法会被阻塞，直到 broker 发送一个确认消息给生产者，这个确认消息暗示生产者 broker 已经成功地将它发送的消息路由到目标目的并把消息保存到二级存储中。

    同步发送持久消息能够提供更好的可靠性，但这潜在地影响了程序的响应速度，因为在接受到 broker 的确认消息之前应用程序或线程会被阻塞。如果应用程序能够容忍一些消息的丢失，那么可以使用异步发送。异步发送不会在受到 broker 的确认之前一直阻塞 Producer.send 方法。
</code></pre><h3 id="_1-2-异步发送" tabindex="-1"><a class="header-anchor" href="#_1-2-异步发送" aria-hidden="true">#</a> 1.2，异步发送</h3><pre><code>    使用不同的模式对send 方法的反应时间有巨大的影响，反映时间是衡量ActiveMQ 吞吐量的重要因素，使用异步发送可以提高系统的性能。在默认大多数情况下，AcitveMQ 是以异步模式发送消息。例外的情况：在没有使用事务的情况下，生产者以PERSISTENT 传送模式发送消息。在这种情况下，send 方法都是同步的，并且一直阻塞直到ActiveMQ 发回确认消息：消息已经存储在持久性数据存储中。这种确认机制保证消息不会丢失，但会造成生产者阻塞从而影响反应时间。高性能的程序一般都能容忍在故障情况下丢失少量数据。如果编写这样的程序，可以通过使用异步发送来提高吞吐量（甚至在使用PERSISTENT 传送模式的情况下）。
</code></pre><h3 id="_1-3-设置异步发送" tabindex="-1"><a class="header-anchor" href="#_1-3-设置异步发送" aria-hidden="true">#</a> 1.3，设置异步发送</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ActiveMQConnectionFactory</span> activeMQConnectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token string">&quot;ACTIVEMQ_URL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
activeMQConnectionFactory<span class="token punctuation">.</span><span class="token function">setUseAsyncSend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-异步发送丢失消息的场景" tabindex="-1"><a class="header-anchor" href="#_1-4-异步发送丢失消息的场景" aria-hidden="true">#</a> 1.4，异步发送丢失消息的场景</h3><pre><code>    生产者设置UseAsyncSend=true，使用producer.send(msg)持续发送消息。由于消息不阻塞，生产者会认为所有send的消息均被成功发送至MQ。如果服务端突然宕机，此时生产者端内存中尚未被发送至MQ的消息都会丢失。正确的异步发送方法是需要接收回调的。

    producer.send有带上AsyncCallback的方法。该方法中需要重写onSuccess方法和onException方法。onSuccess方法就是表示这条消息成功发送到MQ上，并接收到了MQ持久化后的回调。onException表示MQ返回一个入队异常的回执。在上面的示例中用的是CountDownLatch类在onSuccess中记录。主要是因为onSuccess方法中只能引用final对象。
</code></pre><h3 id="_1-5-代码测试" tabindex="-1"><a class="header-anchor" href="#_1-5-代码测试" aria-hidden="true">#</a> 1.5，代码测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>advcase</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span></span><span class="token class-name">ActiveMQConnectionFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span></span><span class="token class-name">ActiveMQMessageProducer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span></span><span class="token class-name">AsyncCallback</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :消息生产者——异步发送并回调
 * @Author : 辛根
 * @Date : 2020/4/6 13:29
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMessageProducer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">BROKER_URL</span> <span class="token operator">=</span> <span class="token string">&quot;tcp://129.211.39.189:61617&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">QUEUE_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;queue-test&quot;</span><span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JMSException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token constant">BROKER_URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 开启异步发送</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">)</span> factory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAlwaysSyncSend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Session</span> session <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">Session</span><span class="token punctuation">.</span><span class="token constant">AUTO_ACKNOWLEDGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Queue</span> queue <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createQueue</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ActiveMQMessageProducer</span> producer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ActiveMQMessageProducer</span><span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">createProducer</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置消息类型为持久</span>
        producer<span class="token punctuation">.</span><span class="token function">setDeliveryMode</span><span class="token punctuation">(</span><span class="token class-name">DeliveryMode</span><span class="token punctuation">.</span><span class="token constant">PERSISTENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TextMessage</span> textMessage <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createTextMessage</span><span class="token punctuation">(</span><span class="token string">&quot;我是一条测试消息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 由于消息是持久的，所以这里默认发送的消息是使用的同步模式</span>
        producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> textMessage<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AsyncCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费发送成功，所处线程:&quot;</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onException</span><span class="token punctuation">(</span><span class="token class-name">JMSException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费发送失败，所处线程:&quot;</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;主程序所处线程为:&quot;</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        producer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费发送成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typorabf42a8d2-26c4-4c10-b81c-9516db65c937.jpg" alt="image"></p><h3 id="_1-6-面试题" tabindex="-1"><a class="header-anchor" href="#_1-6-面试题" aria-hidden="true">#</a> 1.6，面试题</h3><p>1，Activemq的消费是否支持异步——<strong>是</strong></p><p>2，Activemq异步消费如何开启及如何时确定投递成功？</p><ul><li>使用setAlwaysSyncSend(true)开启</li><li>发送时使用AsyncCallback方法接收回调</li></ul><p>3、Activemq默认情况下是同步还是异步？</p><pre><code>非事务模式下默认是同步的。  
</code></pre><p><img src="https://picgo.xingenhi.cn//typorad1c8b65d-ef0c-4feb-894b-fa1631eeda24.jpg" alt="image"></p><h2 id="_2-高级特性之延迟投递和定时投递" tabindex="-1"><a class="header-anchor" href="#_2-高级特性之延迟投递和定时投递" aria-hidden="true">#</a> 2，高级特性之延迟投递和定时投递</h2><h3 id="_2-1-概述" tabindex="-1"><a class="header-anchor" href="#_2-1-概述" aria-hidden="true">#</a> 2.1，概述</h3><pre><code>    5.4版的ActiveMQ在ActiveMQ消息代理中内置了一个可选的持久性调度程序。通过在“ Xml配置”中将broker schedulerSupport属性设置为true 可以启用此功能。ActiveMQ客户端可以通过使用以下消息属性来利用延迟传递。
</code></pre>`,29),R={href:"http://activemq.apache.org/delay-and-schedule-message-delivery.html",target:"_blank",rel:"noopener noreferrer"},F=e(`<p><img src="https://picgo.xingenhi.cn//typora0.9850467778519642.png" alt="image"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>schedulerSupport<span class="token operator">=</span><span class="token string">&quot;true&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-2-属性说明" tabindex="-1"><a class="header-anchor" href="#_2-2-属性说明" aria-hidden="true">#</a> 2.2，属性说明</h3><p><img src="https://picgo.xingenhi.cn//typora0.8773038911693348.png" alt="image"></p><h3 id="_2-3-案例说明-延时20秒" tabindex="-1"><a class="header-anchor" href="#_2-3-案例说明-延时20秒" aria-hidden="true">#</a> 2.3，案例说明-延时20秒</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TextMessage</span> message <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createTextMessage</span><span class="token punctuation">(</span><span class="token string">&quot;我是一个消息----helo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
message<span class="token punctuation">.</span><span class="token function">setLongProperty</span><span class="token punctuation">(</span><span class="token class-name">ScheduledMessage</span><span class="token punctuation">.</span><span class="token constant">AMQ_SCHEDULED_DELAY</span><span class="token punctuation">,</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora5804ba94-554b-4ab5-98f2-77b86f18c768.jpg" alt="image"></p><h3 id="_2-4-案例说明-延时10秒-投递10次-间隔5秒" tabindex="-1"><a class="header-anchor" href="#_2-4-案例说明-延时10秒-投递10次-间隔5秒" aria-hidden="true">#</a> 2.4，案例说明-延时10秒，投递10次，间隔5秒</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TextMessage</span> message <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createTextMessage</span><span class="token punctuation">(</span><span class="token string">&quot;我是一个消息----helo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//多少毫秒这后入队</span>
message<span class="token punctuation">.</span><span class="token function">setLongProperty</span><span class="token punctuation">(</span><span class="token class-name">ScheduledMessage</span><span class="token punctuation">.</span><span class="token constant">AMQ_SCHEDULED_DELAY</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//隔多少毫秒再投</span>
message<span class="token punctuation">.</span><span class="token function">setLongProperty</span><span class="token punctuation">(</span><span class="token class-name">ScheduledMessage</span><span class="token punctuation">.</span><span class="token constant">AMQ_SCHEDULED_PERIOD</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//总共投多少次</span>
message<span class="token punctuation">.</span><span class="token function">setIntProperty</span><span class="token punctuation">(</span><span class="token class-name">ScheduledMessage</span><span class="token punctuation">.</span><span class="token constant">AMQ_SCHEDULED_REPEAT</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picgo.xingenhi.cn//typora62201c88-d70d-437b-b676-e08aa56c0d51.jpg" alt="image"></p><h3 id="_2-5-案例说明-使用cron表达式" tabindex="-1"><a class="header-anchor" href="#_2-5-案例说明-使用cron表达式" aria-hidden="true">#</a> 2.5，案例说明-使用CRON表达式</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MessageProducer</span> producer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createProducer</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">TextMessage</span> message <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createTextMessage</span><span class="token punctuation">(</span><span class="token string">&quot;test msg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
message<span class="token punctuation">.</span><span class="token function">setStringProperty</span><span class="token punctuation">(</span><span class="token class-name">ScheduledMessage</span><span class="token punctuation">.</span><span class="token constant">AMQ_SCHEDULED_CRON</span><span class="token punctuation">,</span> <span class="token string">&quot;0 * * * *&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MessageProducer</span> producer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createProducer</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">TextMessage</span> message <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createTextMessage</span><span class="token punctuation">(</span><span class="token string">&quot;test msg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
message<span class="token punctuation">.</span><span class="token function">setStringProperty</span><span class="token punctuation">(</span><span class="token class-name">ScheduledMessage</span><span class="token punctuation">.</span><span class="token constant">AMQ_SCHEDULED_CRON</span><span class="token punctuation">,</span> <span class="token string">&quot;0 * * * *&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
message<span class="token punctuation">.</span><span class="token function">setLongProperty</span><span class="token punctuation">(</span><span class="token class-name">ScheduledMessage</span><span class="token punctuation">.</span><span class="token constant">AMQ_SCHEDULED_DELAY</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
message<span class="token punctuation">.</span><span class="token function">setLongProperty</span><span class="token punctuation">(</span><span class="token class-name">ScheduledMessage</span><span class="token punctuation">.</span><span class="token constant">AMQ_SCHEDULED_PERIOD</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
message<span class="token punctuation">.</span><span class="token function">setIntProperty</span><span class="token punctuation">(</span><span class="token class-name">ScheduledMessage</span><span class="token punctuation">.</span><span class="token constant">AMQ_SCHEDULED_REPEAT</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-其它说明" tabindex="-1"><a class="header-anchor" href="#_2-6-其它说明" aria-hidden="true">#</a> 2.6，其它说明</h3><p>1，CRON表达式的优先级高于另外三个参数，如果在设置了CRON的同时，也有repeat和period参数，则会在每次CRON执行的时候，重复投递repeat次，每次间隔为period。就是说设置是叠加的效果。例如每小时都会发生消息被投递10次，延迟1秒开始，每次间隔1秒</p><p>2，此处Cron是Unix系统中任务调度器,它使用一个字符串来表示一个任务何时需要被执行。而不是quartz里边的那个Cron表达式</p><p><img src="https://picgo.xingenhi.cn//typora0.7717337386583017.png" alt="image"></p><h2 id="_3-高级特性之消费重试机制" tabindex="-1"><a class="header-anchor" href="#_3-高级特性之消费重试机制" aria-hidden="true">#</a> 3，高级特性之消费重试机制</h2><h3 id="_3-1-activemq会在什么情况下重新发送消息" tabindex="-1"><a class="header-anchor" href="#_3-1-activemq会在什么情况下重新发送消息" aria-hidden="true">#</a> 3.1，activeMQ会在什么情况下重新发送消息</h3><pre><code>    activeMQ中的消息重发，指的是消息可以被broker重新分派给消费者，不一定的之前的消费者。重发消息之后，消费者可以重新消费。消息重发的情况有以下几种。
</code></pre><p>1.事务会话中，当还未进行session.commit()时，进行session.rollback()，那么所有还没commit的消息都会进行重发。</p><p>2.使用客户端手动确认的方式时，还未进行确认并且执行Session.recover()，那么所有还没acknowledge的消息都会进行重发。</p><p>3.所有未ack的消息，当进行session.closed()关闭事务，那么所有还没ack的消息broker端都会进行重发，而且是马上重发。</p><p>4.消息被消费者拉取之后，超时没有响应ack，消息会被broker<strong>重发</strong>。</p><pre><code>    重发指的是消息经过broker重新进行转发给消费者，经过测试，1和2的情况消息重发会发送给原来的消费者，3和4可以转发消息给别的消费者。累计次数超过设置的maximumRedeliveries时消息都会都会进入死信队列。
</code></pre><p>消息的重发时间间隔和重发次数</p><p>间隔 1</p><p>次数 6 （6次之后进入死信队列）</p><p><img src="https://picgo.xingenhi.cn//typora0.0935673063662166.png" alt="image"></p><h3 id="_3-2-java配置" tabindex="-1"><a class="header-anchor" href="#_3-2-java配置" aria-hidden="true">#</a> 3.2，java配置</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JMSException</span> <span class="token punctuation">{</span>
    <span class="token class-name">ActiveMQConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token constant">BROKER_URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">RedeliveryPolicy</span> redeliveryPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedeliveryPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 是否在每次尝试重新发送失败后,增长这个等待时间</span>
    redeliveryPolicy<span class="token punctuation">.</span><span class="token function">setUseExponentialBackOff</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 重发次数,默认为6次 这里设置为1次</span>
    redeliveryPolicy<span class="token punctuation">.</span><span class="token function">setMaximumRedeliveries</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 重发时间间隔,默认为1秒</span>
    redeliveryPolicy<span class="token punctuation">.</span><span class="token function">setMaximumRedeliveries</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 第一次失败后重新发送之前等待500毫秒,第二次失败再等待500 * 2毫秒,这里的2就是value</span>
    redeliveryPolicy<span class="token punctuation">.</span><span class="token function">setBackOffMultiplier</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 最大传送延迟，只在useExponentialBackOff为true时有效（V5.5），假设首次重连间隔为10ms，倍数为2，那么第二次重连时间间隔为</span>
    <span class="token comment">// 20ms，</span>
    <span class="token comment">// 第三次重连时间间隔为40ms，当重连时间间隔大的最大重连时间间隔时，以后每次重连时间间隔都为最大重连时间间隔。</span>
    redeliveryPolicy<span class="token punctuation">.</span><span class="token function">setMaximumRedeliveryDelay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    connectionFactory<span class="token punctuation">.</span><span class="token function">setRedeliveryPolicy</span><span class="token punctuation">(</span>redeliveryPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Connection</span> connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Session</span> session <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">Session</span><span class="token punctuation">.</span><span class="token constant">CLIENT_ACKNOWLEDGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Queue</span> queue <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createQueue</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MessageConsumer</span> consumer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createConsumer</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">TextMessage</span> message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextMessage</span><span class="token punctuation">)</span> consumer<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费者接收到消息:&quot;</span><span class="token operator">+</span>message<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    consumer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消息消费成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-spring的配置" tabindex="-1"><a class="header-anchor" href="#_3-3-spring的配置" aria-hidden="true">#</a> 3.3，spring的配置</h3><p><img src="https://picgo.xingenhi.cn//typora0.8191266649803235.png" alt="image"></p><h3 id="_3-4-springboot的配置" tabindex="-1"><a class="header-anchor" href="#_3-4-springboot的配置" aria-hidden="true">#</a> 3.4，springboot的配置</h3><p><img src="https://picgo.xingenhi.cn//typora0.5258080647454998.png" alt="image"></p><h2 id="_4-高级特性之死信队列" tabindex="-1"><a class="header-anchor" href="#_4-高级特性之死信队列" aria-hidden="true">#</a> 4，高级特性之死信队列</h2>`,35),N={href:"http://activemq.apache.org/message-redelivery-and-dlq-handling.html",target:"_blank",rel:"noopener noreferrer"},U=e(`<h3 id="_4-1-简介" tabindex="-1"><a class="header-anchor" href="#_4-1-简介" aria-hidden="true">#</a> 4.1，简介</h3><p>DLQ-死信队列(Dead Letter Queue)用来保存处理失败或者过期的消息。</p><p>就是一条消息现次被重发了多次后(默认6次)，将会被activemq移入&quot;死信队列&quot;。开发人员可以在这个Queue中查看处理出错的消息，进行人工处理。</p><h3 id="_4-2-简介" tabindex="-1"><a class="header-anchor" href="#_4-2-简介" aria-hidden="true">#</a> 4.2，简介</h3><p><img src="https://picgo.xingenhi.cn//typora0.21943883152300409.png" alt="image"></p><p>开发中的情况</p><p>一般生产环境中在使用MQ的时候设计两个队列：一个是核心业务队列，一个是死信队列。</p><p>核心业务队列，就是处理正常的消息，另一个就是处理处理异常情况的。</p><p>由上图中可以看到，在第三方物流系统故障期间，所有的订单消息全部处理失败，全部会转入死信队列。然后你的仓储系统得专门有一个后台线程。监控第三方物流系统是否正常。能否请求。不停的监视。一旦发现对方恢复正常。这个后台线程就从死信队列消费出来处理失败的订单，重新执行发货和配送的通知逻辑。</p><h3 id="_4-3-配置方式" tabindex="-1"><a class="header-anchor" href="#_4-3-配置方式" aria-hidden="true">#</a> 4.3，配置方式</h3><h4 id="_4-3-1-activemq-xml" tabindex="-1"><a class="header-anchor" href="#_4-3-1-activemq-xml" aria-hidden="true">#</a> 4.3.1，activemq.xml</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>destinationPolicy<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>policyMap<span class="token punctuation">&gt;</span></span>
        <span class="token generics"><span class="token punctuation">&lt;</span>policyEntries<span class="token punctuation">&gt;</span></span>
            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>添加内容开始<span class="token operator">--</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>policyEntry queue<span class="token operator">=</span><span class="token string">&quot;&gt;&quot;</span><span class="token operator">&gt;</span>
                <span class="token generics"><span class="token punctuation">&lt;</span>deadLetterStrategy<span class="token punctuation">&gt;</span></span>
                    <span class="token operator">&lt;</span>individualDeadLetterStrategy queuePrefix<span class="token operator">=</span><span class="token string">&quot;DLQ.&quot;</span> useQueueForQueueMessages<span class="token operator">=</span><span class="token string">&quot;true&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>deadLetterStrategy<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>policyEntry<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>添加内容结束<span class="token operator">--</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>policyEntry topic<span class="token operator">=</span><span class="token string">&quot;&gt;&quot;</span> <span class="token operator">&gt;</span>
                <span class="token generics"><span class="token punctuation">&lt;</span>pendingMessageLimitStrategy<span class="token punctuation">&gt;</span></span>
                    <span class="token operator">&lt;</span>constantPendingMessageLimitStrategy limit<span class="token operator">=</span><span class="token string">&quot;1000&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>pendingMessageLimitStrategy<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>policyEntry<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>policyEntries<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>policyMap<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>destinationPolicy<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-2-配置说明" tabindex="-1"><a class="header-anchor" href="#_4-3-2-配置说明" aria-hidden="true">#</a> 4.3.2，配置说明：</h4><p>queuePrefix==代表死信队列的前缀 最后的名字为DLQ.队列名</p><p>userQueueForTopicMessages 表示是否把Topic的DealLetter保存到Queue中，默认为true</p><p>userQueueForQueneMessages 表示是否把Queue的DealLetter保存到Queue中，默认为true</p><p><img src="https://picgo.xingenhi.cn//typora0.5553723430564659.png" alt="image"></p><h3 id="_4-4-重试多次-看失败6次之后进入死信队列的名字" tabindex="-1"><a class="header-anchor" href="#_4-4-重试多次-看失败6次之后进入死信队列的名字" aria-hidden="true">#</a> 4.4，重试多次，看失败6次之后进入死信队列的名字</h3><p><img src="https://picgo.xingenhi.cn//typora0.20009478944780845.png" alt="image"></p><h2 id="_5-高级特性之防止重复调用" tabindex="-1"><a class="header-anchor" href="#_5-高级特性之防止重复调用" aria-hidden="true">#</a> 5，高级特性之防止重复调用</h2>`,20),G={href:"http://activemq.apache.org/redelivery-policy",target:"_blank",rel:"noopener noreferrer"},K=e(`<p>网络延时传输中，会造成进行MQ重试。在重试过程中。可能会有重复消费的问题。</p><p>如果消息是做数据库的插入操作。给这个消息做一个唯一主键，那么就算出理重复消费的情况。就会有主键冲突，避免数据库出现脏数据。</p><p>如果上面两种情况还不行，准备一个第三方服务来做消费记录。如redis，给消息分配一个全局的ID,只要消费过该消息，把&lt;id,Message&gt;发K-V形式写入redis.那消费者开始消费前，先去redis中查询有没有消费记录就可以了。</p><h1 id="_19【熟悉】activemq应用场景" tabindex="-1"><a class="header-anchor" href="#_19【熟悉】activemq应用场景" aria-hidden="true">#</a> 19【熟悉】ActiveMQ应用场景</h1><h2 id="_1-异步处理" tabindex="-1"><a class="header-anchor" href="#_1-异步处理" aria-hidden="true">#</a> 1 ，异步处理</h2><p>场景说明：用户注册后，需要发注册邮件和注册短信。传统的做法有两种 1.串行的方式；2.并行方式</p><p>a、串行方式：将注册信息写入数据库成功后，发送注册邮件，再发送注册短信。以上三个任务全部完成后，返回给客户端。</p><p><img src="https://picgo.xingenhi.cn//typora0.5198473439033614.png" alt="image"></p><p>b、并行方式：将注册信息写入数据库成功后，发送注册邮件的同时，发送注册短信。以上三个任务完成后，返回给客户端。与串行的差别是，并行的方式可以提高处理的时间</p><p><img src="https://picgo.xingenhi.cn//typora0.15586489230247413.png" alt="image"></p><p>假设三个业务节点每个使用50毫秒钟，不考虑网络等其他开销，则串行方式的时间是150毫秒，并行的时间可能是100毫秒。</p><p>因为CPU在单位时间内处理的请求数是一定的，假设CPU1秒内吞吐量是100次。则串行方式1秒内CPU可处理的请求量是7次（1000/150）。并行方式处理的请求量是10次（1000/100）</p><p>小结：如以上案例描述，传统的方式系统的性能（并发量，吞吐量，响应时间）会有瓶颈。如何解决这个问题呢？</p><p>引入消息队列，将不是必须的业务逻辑，异步处理。改造后的架构如下：</p><p><img src="https://picgo.xingenhi.cn//typora0.2919812290806019.png" alt="image"></p><p>按照以上约定，用户的响应时间相当于是注册信息写入数据库的时间，也就是50毫秒。注册邮件，发送短信写入消息队列后，直接返回，因此写入消息队列的速度很快，基本可以忽略，因此用户的响应时间可能是50毫秒。因此架构改变后，系统的吞吐量提高到每秒20 QPS。比串行提高了3倍，比并行提高了两倍。</p><hr><h2 id="_2-应用解耦" tabindex="-1"><a class="header-anchor" href="#_2-应用解耦" aria-hidden="true">#</a> 2，应用解耦</h2><p>场景说明：用户下单后，订单系统需要通知库存系统。传统的做法是，订单系统调用库存系统的接口。如下图：</p><p><img src="https://picgo.xingenhi.cn//typora0.9585466771169423.png" alt="image"></p><p>传统模式的缺点：假如库存系统无法访问，则订单减库存将失败，从而导致订单失败，订单系统与库存系统耦合</p><p>如何解决以上问题呢？引入应用消息队列后的方案，如下图：</p><p><img src="https://picgo.xingenhi.cn//typora0.3283812081893891.png" alt="image"></p><p>订单系统：用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功</p><p>库存系统：订阅下单的消息，采用拉/推的方式，获取下单信息，库存系统根据下单信息，进行库存操作</p><p>假如：在下单时库存系统不能正常使用。也不影响正常下单，因为下单后，订单系统写入消息队列就不再关心其他的后续操作了。实现订单系统与库存系统的应用解耦</p><hr><h2 id="_3-流量削锋" tabindex="-1"><a class="header-anchor" href="#_3-流量削锋" aria-hidden="true">#</a> 3，流量削锋</h2><p>流量削锋也是消息队列中的常用场景，一般在秒杀或团抢活动中使用广泛。</p><p>应用场景：秒杀活动，一般会因为流量过大，导致流量暴增，应用挂掉。为解决这个问题，一般需要在应用前端加入消息队列。</p><p>a、可以控制活动的人数</p><p>b、可以缓解短时间内高流量压垮应用</p><p><img src="https://picgo.xingenhi.cn//typora0.4960394295257037.png" alt="image"></p><p>用户的请求，服务器接收后，首先写入消息队列。假如消息队列长度超过最大数量，则直接抛弃用户请求或跳转到错误页面。</p><p>秒杀业务根据消息队列中的请求信息，再做后续处理</p><hr><h2 id="_4-日志处理" tabindex="-1"><a class="header-anchor" href="#_4-日志处理" aria-hidden="true">#</a> 4，日志处理</h2><p>日志处理是指将消息队列用在日志处理中，比如Kafka的应用，解决大量日志传输的问题。架构简化如下</p><p><img src="https://picgo.xingenhi.cn//typora0.6811467667947021.png" alt="image"></p><p>日志采集客户端，负责日志数据采集，定时写受写入Kafka队列</p><p>Kafka消息队列，负责日志数据的接收，存储和转发</p><p>日志处理应用：订阅并消费kafka队列中的日志数据</p><hr><h2 id="_5-消息通讯" tabindex="-1"><a class="header-anchor" href="#_5-消息通讯" aria-hidden="true">#</a> 5，消息通讯</h2><p>消息通讯是指，消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯。比如实现点对点消息队列，或者聊天室等</p><p>点对点通讯：</p><p><img src="https://picgo.xingenhi.cn//typora0.10730521846180628.png" alt="image"></p><p>客户端A和客户端B使用同一队列，进行消息通讯。</p><p>聊天室通讯：</p><p><img src="https://picgo.xingenhi.cn//typora0.498950540767881.png" alt="image"></p><p>客户端A，客户端B，客户端N订阅同一主题，进行消息发布和接收。实现类似聊天室效果。</p><h1 id="_20【掌握】activemq面试宝典" tabindex="-1"><a class="header-anchor" href="#_20【掌握】activemq面试宝典" aria-hidden="true">#</a> 20【掌握】ActiveMQ面试宝典</h1><h2 id="_1-activemq服务器宕机怎么办" tabindex="-1"><a class="header-anchor" href="#_1-activemq服务器宕机怎么办" aria-hidden="true">#</a> 1. ActiveMQ服务器宕机怎么办？</h2><p>这在得从ActiveMQ的储存机制说起。在通常的情况下，非持久化消息是存储在内存中的，持久化消息是存储文件中的，它们的最大限制在配置文件的节点中配置。但是，在非持久化消息堆积到一定程度，内存告急的时候，ActiveMQ会将内存中的非持久化消息写入临时文件中，以腾出内存。虽然都保存到了文件里，但它和持久化消息的区别是，重启后持久化消息会从文件中恢复，非持久化的临时文件会直接删除。</p><p>那如果文件增大到达了配置中的最大限制的时候会发生什么？</p><p>设置2G左右的持久化文件限制，大量生产持久化消息直到文件达到最大限制，此时生产者阻塞，但消费者可正常连接并消费消息，等消息消费掉一部分，文件删除又腾出空间之后，生产者又可继续发送消息，服务自动恢复正常。</p><p>设置2G左右的临时文件限制，大量生产非持久化消息并写入临时文件，在达到最大限制时，生产者阻塞，消费者可正常连接但不能消费消息，或者原本慢速消费的消费者，消费突然停止。整个系统可连接，但是无法提供服务，就这样挂了。</p><p>解决方案：尽量不要用非持久化消息，非要用的话，将临时文件限制尽可能的调大。</p><hr><h2 id="_2-丢消息怎么办" tabindex="-1"><a class="header-anchor" href="#_2-丢消息怎么办" aria-hidden="true">#</a> 2. 丢消息怎么办？</h2><p>这得从java的java.net.SocketException异常说起。简单点说就是当网络发送方发送一堆数据，然后调用close关闭连接之后。这些发送的数据都在接收者的缓存里，接收者如果调用read方法仍旧能从缓存中读取这些数据，尽管对方已经关闭了连接。但是当接收者尝试发送数据时，由于此时连接已关闭，所以会发生异常，这个很好理解。不过需要注意的是，当发生SocketException后，原本缓存区中数据也作废了，此时接收者再次调用read方法去读取缓存中的数据，就会报Software caused connection abort: recv failed错误。</p><p>通过抓包得知，ActiveMQ会每隔10秒发送一个心跳包，这个心跳包是服务器发送给客户端的，用来判断客户端死没死。如果你看过上面第一条，就会知道非持久化消息堆积到一定程度会写到文件里，这个写的过程会阻塞所有动作，而且会持续20到30秒，并且随着内存的增大而增大。当客户端发完消息调用connection.close()时，会期待服务器对于关闭连接的回答，如果超过15秒没回答就直接调用socket层的close关闭tcp连接了。这时客户端发出的消息其实还在服务器的缓存里等待处理，不过由于服务器心跳包的设置，导致发生了java.net.SocketException异常，把缓存里的数据作废了，没处理的消息全部丢失。</p><p>解决方案：用持久化消息，或者非持久化消息及时处理不要堆积，或者启动事务，启动事务后，commit()方法会负责任的等待服务器的返回，也就不会关闭连接导致消息丢失了。</p><hr><h2 id="_3-持久化消息非常慢。" tabindex="-1"><a class="header-anchor" href="#_3-持久化消息非常慢。" aria-hidden="true">#</a> 3. 持久化消息非常慢。</h2><p>默认的情况下，非持久化的消息是异步发送的，持久化的消息是同步发送的，遇到慢一点的硬盘，发送消息的速度是无法忍受的。但是在开启事务的情况下，消息都是异步发送的，效率会有2个数量级的提升。所以在发送持久化消息时，请务必开启事务模式。其实发送非持久化消息时也建议开启事务，因为根本不会影响性能。</p><h2 id="_4-消息的不均匀消费。" tabindex="-1"><a class="header-anchor" href="#_4-消息的不均匀消费。" aria-hidden="true">#</a> 4. 消息的不均匀消费。</h2><p>有时在发送一些消息之后，开启2个消费者去处理消息。会发现一个消费者处理了所有的消息，另一个消费者根本没收到消息。原因在于ActiveMQ的prefetch机制。当消费者去获取消息时，不会一条一条去获取，而是一次性获取一批，默认是1000条。这些预获取的消息，在还没确认消费之前，在管理控制台还是可以看见这些消息的，但是不会再分配给其他消费者，此时这些消息的状态应该算作“已分配未消费”，如果消息最后被消费，则会在服务器端被删除，如果消费者崩溃，则这些消息会被重新分配给新的消费者。但是如果消费者既不消费确认，又不崩溃，那这些消息就永远躺在消费者的缓存区里无法处理。更通常的情况是，消费这些消息非常耗时，你开了10个消费者去处理，结果发现只有一台机器吭哧吭哧处理，另外9台啥事不干。</p><p>解决方案：将prefetch设为1，每次处理1条消息，处理完再去取，这样也慢不了多少。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>tcp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">61616</span><span class="token operator">?</span>jms<span class="token punctuation">.</span>prefetchPolicy<span class="token punctuation">.</span>queuePrefetch<span class="token operator">=</span><span class="token number">1</span>
<span class="token class-name">ActiveMQConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ActiveMQPrefetchPolicy</span> prefetchPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQPrefetchPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
prefetchPolicy<span class="token punctuation">.</span><span class="token function">setQueuePrefetch</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
factory<span class="token punctuation">.</span><span class="token function">setPrefetchPolicy</span><span class="token punctuation">(</span>prefetchPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_5-死信队列。" tabindex="-1"><a class="header-anchor" href="#_5-死信队列。" aria-hidden="true">#</a> 5. 死信队列。</h2><p>如果你想在消息处理失败后，不被服务器删除，还能被其他消费者处理或重试，可以关闭AUTO_ACKNOWLEDGE，将ack交由程序自己处理。那如果使用了AUTO_ACKNOWLEDGE，消息是什么时候被确认的，还有没有阻止消息确认的方法？有！</p><p>消费消息有2种方法，一种是调用consumer.receive()方法，该方法将阻塞直到获得并返回一条消息。这种情况下，消息返回给方法调用者之后就自动被确认了。另一种方法是采用listener回调函数，在有消息到达时，会调用listener接口的onMessage方法。在这种情况下，在onMessage方法执行完毕后，消息才会被确认，此时只要在方法中抛出异常，该消息就不会被确认。那么问题来了，如果一条消息不能被处理，会被退回服务器重新分配，如果只有一个消费者，该消息又会重新被获取，重新抛异常。就算有多个消费者，往往在一个服务器上不能处理的消息，在另外的服务器上依然不能被处理。难道就这么退回--获取--报错死循环了吗？</p><p>在重试6次后，ActiveMQ认为这条消息是“有毒”的，将会把消息丢到死信队列里。如果你的消息不见了，去ActiveMQ.DLQ里找找，说不定就躺在那里。</p><hr><h2 id="_6-activemq中的消息重发时间间隔和重发次数吗" tabindex="-1"><a class="header-anchor" href="#_6-activemq中的消息重发时间间隔和重发次数吗" aria-hidden="true">#</a> 6. ActiveMQ中的消息重发时间间隔和重发次数吗？</h2><p>ActiveMQ：是Apache出品，最流行的，能力强劲的开源消息总线。是一个完全支持JMS1.1和J2EE 1.4规范的 JMS Provider实现。JMS（Java消息服务）：是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</p><p>首先，我们得大概了解下，在哪些情况下，ActiveMQ服务器会将消息重发给消费者，这里为简单起见，假定采用的消息发送模式为队列（即消息发送者和消息接收者）。</p><p>①　如果消息接收者在处理完一条消息的处理过程后没有对MOM进行应答，则该消息将由MOM重发.</p><p>②　如果我们队某个队列设置了预读参数（consumer.prefetchSize），如果消息接收者在处理第一条消息时（没向MOM发送消息接收确认）就宕机了，则预读数量的所有消息都将被重发!</p><p>③　如果Session是事务的，则只要消息接收者有一条消息没有确认，或发送消息期间MOM或客户端某一方突然宕机了，则该事务范围中的所有消息MOM都将重发。</p><p>④　说到这里，大家可能会有疑问，ActiveMQ消息服务器怎么知道消费者客户端到底是消息正在处理中还没来得急对消息进行应答还是已经处理完成了没有应答或是宕机了根本没机会应答呢？其实在所有的客户端机器上，内存中都运行着一套客户端的ActiveMQ环境，该环境负责缓存发来的消息，负责维持着和ActiveMQ服务器的消息通讯，负责失效转移（fail-over）等，所有的判断和处理都是由这套客户端环境来完成的。</p><p>我们可以来对ActiveMQ的重发策略（Redelivery Policy）来进行自定义配置，其中的配置参数主要有以下几个：</p><p>可用的属性</p><p>属性 默认值 说明</p><p>collisionAvoidanceFactor 默认值0.15 , 设置防止冲突范围的正负百分比，只有启用useCollisionAvoidance参数时才生效。</p><p>maximumRedeliveries 默认值6 , 最大重传次数，达到最大重连次数后抛出异常。为-1时不限制次数，为0时表示不进行重传。</p><p>maximumRedeliveryDelay 默认值-1, 最大传送延迟，只在useExponentialBackOff为true时有效（V5.5），假设首次重连间隔为10ms，倍数为2，那么第二次重连时间间隔为 20ms，第三次重连时间间隔为40ms，当重连时间间隔大的最大重连时间间隔时，以后每次重连时间间隔都为最大重连时间间隔。</p><p>initialRedeliveryDelay 默认值1000L, 初始重发延迟时间</p><p>redeliveryDelay 默认值1000L, 重发延迟时间，当initialRedeliveryDelay=0时生效（v5.4）</p><p>useCollisionAvoidance 默认值false, 启用防止冲突功能，因为消息接收时是可以使用多线程并发处理的，应该是为了重发的安全性，避开所有并发线程都在同一个时间点进行消息接收处理。所有线程在同一个时间点处理时会发生什么问题呢？应该没有问题，只是为了平衡broker处理性能，不会有时很忙，有时很空闲。</p><p>useExponentialBackOff 默认值false, 启用指数倍数递增的方式增加延迟时间。</p><p>backOffMultiplier 默认值5, 重连时间间隔递增倍数，只有值大于1和启用useExponentialBackOff参数时才生效。</p><h1 id="_21【扩展】redis-mq-mysql实现秒杀" tabindex="-1"><a class="header-anchor" href="#_21【扩展】redis-mq-mysql实现秒杀" aria-hidden="true">#</a> 21【扩展】redis+MQ+Mysql实现秒杀</h1><h2 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> 准备工作</h2><h3 id="使用docker启动redis" tabindex="-1"><a class="header-anchor" href="#使用docker启动redis" aria-hidden="true">#</a> 使用docker启动Redis</h3><p>docker run -d --name redis -p 6379:6379 redis --requirepass &quot;123456&quot;</p><h3 id="mq已有" tabindex="-1"><a class="header-anchor" href="#mq已有" aria-hidden="true">#</a> MQ已有</h3><h3 id="准备mysql数据库【本地】" tabindex="-1"><a class="header-anchor" href="#准备mysql数据库【本地】" aria-hidden="true">#</a> 准备mysql数据库【本地】</h3><p><img src="https://picgo.xingenhi.cn//typoraclip_image0020257bf04-7acb-4c54-b90b-eda39221e8fe.jpg" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typoraclip_image00429b021c5-d70a-4e7a-8a23-36a017892821.jpg" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typoraclip_image0069604f5fb-e754-4116-9476-7de7e3a6a019.jpg" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typoraclip_image0083ec2b7ae-5b92-40ed-ab65-8d678251c243.jpg" alt="image"></p><h2 id="架构图" tabindex="-1"><a class="header-anchor" href="#架构图" aria-hidden="true">#</a> 架构图</h2><p><img src="https://picgo.xingenhi.cn//typoraclip_image0104eaefdb7-af46-465b-92a0-302002145508.jpg" alt="image"></p><h2 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目" aria-hidden="true">#</a> 创建项目</h2><p><img src="https://picgo.xingenhi.cn//typoraclip_image012bc1c57c5-ab07-4170-9e88-9f99194ec954.jpg" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typoraclip_image0142e58a8fa-519a-47da-ada1-684b7b7ee771.jpg" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typoraclip_image0164db97a36-3ba0-4bc4-a4d0-bf3aa04eb9e2.jpg" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typoraclip_image018551cd55d-dfff-4f55-b636-3161923dfb5b.jpg" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typoraclip_image020799f3d60-994f-41d3-8d0c-76012eb4ec81.jpg" alt="image"></p><h2 id="修改pom-xml引入druid数据源" tabindex="-1"><a class="header-anchor" href="#修改pom-xml引入druid数据源" aria-hidden="true">#</a> 修改pom.xml引入druid数据源</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>druid<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">1.1</span><span class="token number">.21</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改yml</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>server<span class="token operator">:</span>
  port<span class="token operator">:</span> <span class="token number">8080</span>

  #数据源的配置
  spring<span class="token operator">:</span>
  datasource<span class="token operator">:</span>
    driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span>
    url<span class="token operator">:</span> jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">47.101</span><span class="token number">.217</span><span class="token number">.125</span><span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>miaosha<span class="token operator">?</span>useUnicode<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>characterEncoding<span class="token operator">=</span><span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">8</span><span class="token operator">&amp;</span>serverTimezone<span class="token operator">=</span><span class="token constant">UTC</span>
    username<span class="token operator">:</span> root
    password<span class="token operator">:</span> <span class="token number">123456</span>
    type<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span>DruidDataSource</span>
    druid<span class="token operator">:</span>
      max<span class="token operator">-</span>active<span class="token operator">:</span> <span class="token number">20</span>
      min<span class="token operator">-</span>idle<span class="token operator">:</span> <span class="token number">5</span>
      validation<span class="token operator">-</span>query<span class="token operator">:</span> select x
      initial<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">3</span>
      max<span class="token operator">-</span>wait<span class="token operator">:</span> <span class="token number">5000</span>

  #redis配置
  redis<span class="token operator">:</span>
    host<span class="token operator">:</span> <span class="token number">129.211</span><span class="token number">.39</span><span class="token number">.189</span>
    password<span class="token operator">:</span> <span class="token number">123456</span>
    port<span class="token operator">:</span> <span class="token number">6379</span>

  activemq<span class="token operator">:</span>
    broker<span class="token operator">-</span>url<span class="token operator">:</span> tcp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">129.211</span><span class="token number">.39</span><span class="token number">.189</span><span class="token operator">:</span><span class="token number">61616</span>
    user<span class="token operator">:</span> admin
    password<span class="token operator">:</span> admin
  jms<span class="token operator">:</span>
    pub<span class="token operator">-</span>sub<span class="token operator">-</span>domain<span class="token operator">:</span> <span class="token boolean">false</span>   #<span class="token boolean">false</span>代表队列<span class="token punctuation">[</span>默认<span class="token punctuation">]</span>  <span class="token boolean">true</span>代表主题

#mybatis的配置
mybatis<span class="token operator">:</span>
  mapper<span class="token operator">-</span>locations<span class="token operator">:</span> classpath<span class="token operator">:</span>mapper<span class="token comment">/*Mapper.xml  #配置mapper.xml的扫描
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成Order 和Goods相关</p><p><img src="https://picgo.xingenhi.cn//typoraclip_image022ec2caf79-5a77-4d49-ab61-9c65322d869b.jpg" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typoraclip_image02408872ce6-6ace-48ee-b23c-c57ff25fbc00.jpg" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typoraclip_image026df78ca4e-09d9-407d-9101-68087662707b.jpg" alt="image"></p><p><img src="https://picgo.xingenhi.cn//typoraclip_image0286bc1beb2-040f-482a-a474-37de0ca81ca1.jpg" alt="image"></p><h2 id="创建activemqconfig" tabindex="-1"><a class="header-anchor" href="#创建activemqconfig" aria-hidden="true">#</a> 创建ActiveMQConfig</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span>command<span class="token punctuation">.</span></span><span class="token class-name">ActiveMQQueue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :配置类
 * @Author : 辛根
 * @Date : 2020/4/9 17:00
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActiveMQConfig</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">QUEUE_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;seconds-kill-queue&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQQueue</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建sender发送消息" tabindex="-1"><a class="header-anchor" href="#创建sender发送消息" aria-hidden="true">#</a> 创建Sender发送消息</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">ActiveMQConfig</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">Log4j2</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JmsMessagingTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :生产者
 * @Author : 辛根
 * @Date : 2020/4/9 17:03
 */</span>
<span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@Log4j2</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sender</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">JmsMessagingTemplate</span> jmsMessagingTemplate<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">goodsId</span>
     * <span class="token keyword">@param</span> <span class="token parameter">userId</span>
     * @ClassName: Sender
     * @Description: 如查用户抢到商品就发送到队列，信息包含商品ID和用户ID
     * @Return: void
     * @Author: 辛根 2020/4/9 17:04
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendDirectQueue</span><span class="token punctuation">(</span><span class="token class-name">String</span> goodsId<span class="token punctuation">,</span> <span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;秒杀请求已发送，商品ID为：&quot;</span> <span class="token operator">+</span> goodsId <span class="token operator">+</span> <span class="token string">&quot;--用户ID：&quot;</span> <span class="token operator">+</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;goodsId&quot;</span><span class="token punctuation">,</span> goodsId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//第一个参数是指要发送到哪个队列里面， 第二个参数是指要发送的内容</span>
            jmsMessagingTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token class-name">ActiveMQConfig</span><span class="token punctuation">.</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//此处为了记录并发请求下，请求的次数及消息传递的次数</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;发送请求&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span> <span class="token operator">+</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;请求发送异常：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建Receiver异步接收消息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">ActiveMQConfig</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Goods</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Order</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">GoodsService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">OrderService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">Log4j2</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">StringRedisTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ValueOperations</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JmsListener</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span></span><span class="token class-name">MapMessage</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :消费者
 * @Author : 辛根
 * @Date : 2020/4/9 17:04
 */</span>
<span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@Log4j2</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Receiver</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">GoodsService</span> goodsService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> <span class="token class-name">ActiveMQConfig</span><span class="token punctuation">.</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token class-name">MapMessage</span> mapMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//取到商品ID判断redis里面的该商品库存是否为0</span>
            <span class="token class-name">String</span> goodsId <span class="token operator">=</span> mapMessage<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;goodsId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> opsForValue <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> num <span class="token operator">=</span> opsForValue<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span>goodsId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递减</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token doc-comment comment">/**
                 * 此处不能判断等于0，因为当商品库存为1时，Redis执行递减返回为0
                 * 如果判断为0商品最后不能卖完也就是当库存为1时此处就抛异常了
                 */</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;库存不足啦，不能再抢了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;接收时&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span> <span class="token operator">+</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Goods</span> goods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            goods<span class="token punctuation">.</span><span class="token function">setGoodsId</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>goodsId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//哪果不为0=则减小mysql里面该商品的库存</span>
            goods<span class="token punctuation">.</span><span class="token function">setTotalStocks</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//根据商品的id和库存同步数据到MySQL</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>goodsService<span class="token punctuation">.</span><span class="token function">updateByPrimaryKeySelective</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;同步到商品表异常！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//生成订单</span>
            <span class="token class-name">String</span> uid <span class="token operator">=</span> mapMessage<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;成功了&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span> <span class="token operator">+</span> uid <span class="token operator">+</span> <span class="token string">&quot;  抢到了商品 O(∩_∩)O哈哈~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            order<span class="token punctuation">.</span><span class="token function">setGoodsid</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>goodsId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            order<span class="token punctuation">.</span><span class="token function">setUserid</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            order<span class="token punctuation">.</span><span class="token function">setCreatetime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            orderService<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建GoodsService</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Goods</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :
 * @Author : 辛根  2020/4/9 17:16
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GoodsService</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> <span class="token function">updateByPrimaryKeySelective</span><span class="token punctuation">(</span><span class="token class-name">Goods</span> goods<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建goodsserviceimpl" tabindex="-1"><a class="header-anchor" href="#创建goodsserviceimpl" aria-hidden="true">#</a> 创建GoodsServiceImpl</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Goods</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">GoodsMapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">GoodsService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :
 * @Author : 辛根
 * @Date : 2020/4/9 17:16
 */</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">GoodsService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">GoodsMapper</span> goodsMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">updateByPrimaryKeySelective</span><span class="token punctuation">(</span><span class="token class-name">Goods</span> goods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> goodsMapper<span class="token punctuation">.</span><span class="token function">updateByPrimaryKeySelective</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建orderservice" tabindex="-1"><a class="header-anchor" href="#创建orderservice" aria-hidden="true">#</a> 创建OrderService</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Order</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :
 * @Author : 辛根  2020/4/9 17:16
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建orderserviceimpl" tabindex="-1"><a class="header-anchor" href="#创建orderserviceimpl" aria-hidden="true">#</a> 创建OrderServiceImpl</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Order</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">OrderMapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">OrderService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :
 * @Author : 辛根
 * @Date : 2020/4/9 17:17
 */</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">OrderMapper</span> orderMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        orderMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序启动时加载要加入秒杀的商品到redis</p><h3 id="创建applicationinitlistener" tabindex="-1"><a class="header-anchor" href="#创建applicationinitlistener" aria-hidden="true">#</a> 创建ApplicationInitListener</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>listener</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Goods</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">GoodsService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">Log4j2</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationListener</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Scope</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ContextRefreshedEvent</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">StringRedisTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ValueOperations</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :
 * @Author : 辛根
 * @Date : 2020/4/9 17:26
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">&quot;singleton&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Log4j2</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationInitListener</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">GoodsService</span> goodsService<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ContextRefreshedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> opsForValue <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;项目初始化完成，执行监听器中逻辑&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//mapper中的sql，返回全部上架（支持秒杀）的商品集合</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> goodsService<span class="token punctuation">.</span><span class="token function">selectGoodsToMiaoSha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Goods</span> p <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    opsForValue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getGoodsId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getTotalStocks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;商品放成Redis成功ID：&quot;</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">getGoodsId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;商品库存：&quot;</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">getTotalStocks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;当前商品ID：&quot;</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">getGoodsId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;库存：&quot;</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">getTotalStocks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;放入Redis缓存异常&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改GoodsService</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Goods</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :
 * @Author : 辛根  2020/4/9 17:16
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GoodsService</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> <span class="token function">updateByPrimaryKeySelective</span><span class="token punctuation">(</span><span class="token class-name">Goods</span> goods<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * @Description: 查询所有秒杀的商品
     * @Return:
     * @Author:辛根 2020/4/9 17:27
     */</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectGoodsToMiaoSha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修改goodsserviceimpl" tabindex="-1"><a class="header-anchor" href="#修改goodsserviceimpl" aria-hidden="true">#</a> 修改GoodsServiceImpl</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Goods</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">GoodsExample</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">GoodsMapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">GoodsService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :
 * @Author : 辛根
 * @Date : 2020/4/9 17:16
 */</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">GoodsService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">GoodsMapper</span> goodsMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">updateByPrimaryKeySelective</span><span class="token punctuation">(</span><span class="token class-name">Goods</span> goods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> goodsMapper<span class="token punctuation">.</span><span class="token function">updateByPrimaryKeySelective</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * @ClassName: GoodsServiceImpl
     * @Description: 查询所有秒杀的商品
     * @Return: java.util.List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.xingen.domain.Goods</span><span class="token punctuation">&gt;</span></span>
     * @Author: 辛根 2020/4/9 17:27
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectGoodsToMiaoSha</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">GoodsExample</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoodsExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">GoodsExample<span class="token punctuation">.</span>Criteria</span> criteria <span class="token operator">=</span> example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 只招要秒杀的</span>
        criteria<span class="token punctuation">.</span><span class="token function">andIsmiaoshaEqualTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">&gt;</span></span> goods <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>goodsMapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> goods<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建ActiveController</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@RestController</span>
  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActiveController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">GoodsService</span> goodsService<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 秒杀入口
     * <span class="token keyword">@param</span> <span class="token parameter">pid</span> -商品id，做检查库存使用
     * <span class="token keyword">@param</span> <span class="token parameter">userId</span> -用户id，做订单和用户关联使用（比如生成成功秒杀商品的用户订单表）
     *                我这里没做多余的逻辑，只看了相关情况的返回结果，有需要的可以自己去实现
     */</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;secondsKill&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResultObj</span> <span class="token function">secondsKill</span><span class="token punctuation">(</span><span class="token class-name">String</span> pid<span class="token punctuation">,</span> <span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//模拟发送100次请求，库存设置为少于100查看结果，此100次请求为顺序请求</span>
            <span class="token comment">//for(int i=0; i&lt;100; i++) {</span>
            <span class="token keyword">boolean</span> result <span class="token operator">=</span> goodsService<span class="token punctuation">.</span><span class="token function">secondsKill</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultObj</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;秒杀成功，请稍后去订单查询&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultObj</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;秒杀失败，原因:&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改GoodsService</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xingen<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Goods</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description :
 * @Author : 辛根  2020/4/9 17:16
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GoodsService</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> <span class="token function">updateByPrimaryKeySelective</span><span class="token punctuation">(</span><span class="token class-name">Goods</span> goods<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * @Description: 查询所有秒杀的商品
     * @Return:
     * @Author:辛根 2020/4/9 17:27
     */</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectGoodsToMiaoSha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * @Description: 
     *  
     * @Return: 
     * @Author:辛根 2020/4/9 17:33
    */</span>
    <span class="token keyword">boolean</span> <span class="token function">secondsKill</span><span class="token punctuation">(</span><span class="token class-name">String</span> pid<span class="token punctuation">,</span> <span class="token class-name">String</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="修改goodsserviceimpl-1" tabindex="-1"><a class="header-anchor" href="#修改goodsserviceimpl-1" aria-hidden="true">#</a> 修改GoodsServiceImpl</h2><p><img src="https://picgo.xingenhi.cn//typoraclip_image0440fe73e67-9919-4855-ae3b-6e6222f44abe.jpg" alt="image"></p><h2 id="启动测试" tabindex="-1"><a class="header-anchor" href="#启动测试" aria-hidden="true">#</a> 启动测试</h2><h3 id="redis里面有数据" tabindex="-1"><a class="header-anchor" href="#redis里面有数据" aria-hidden="true">#</a> redis里面有数据</h3><p><img src="https://picgo.xingenhi.cn//typoraclip_image04607694015-a2b1-4d1d-90ac-b517f96660fc.jpg" alt="image"></p>`,151),z={href:"http://127.0.0.1:8080/secondsKill?pid=18&userId=1",target:"_blank",rel:"noopener noreferrer"};function V($,X){const a=o("ExternalLinkIcon");return c(),i("div",null,[n("div",u,[r,k,n("p",null,[n("a",d,[s("视频链接"),t(a)])])]),m,n("p",null,[s("下载地址"),n("a",v,[s("http://activemq.apache.org/components/classic/download/"),t(a)])]),g,n("p",null,[n("a",b,[s("http://127.0.0.1:8161/admin"),t(a)])]),h,n("p",null,[n("a",y,[s("http://192.168.72.139:8161/admin"),t(a)])]),f,n("p",null,[s("ActiveMQ传输配置选项官网链接："),n("a",q,[s("https://activemq.apache.org/configuring-version-5-transports"),t(a)])]),w,n("p",null,[s("关于Transport协议的可配置参数，可以参加官网："),n("a",x,[s("http://activemq.apache.org/configuring-version-5-transports.html"),t(a)])]),_,n("p",null,[s("可以访问"),n("a",M,[s("http://activemq.apache.org/persistence.html"),t(a)]),s("查看详情")]),j,n("p",null,[n("a",S,[s("http://activemq.apache.org/leveldb-store"),t(a)])]),A,n("p",null,[n("a",C,[s("http://activemq.apache.org/persistence"),t(a)])]),Q,T,D,E,P,I,n("p",null,[n("a",L,[s("http://activemq.apache.org/replicated-leveldb-store"),t(a)])]),B,n("p",null,[s("如现在"),n("a",J,[s("http://192.168.3.110:8161可以正常访问"),t(a)]),s("说是这台是master")]),O,n("p",null,[n("a",R,[s("http://activemq.apache.org/delay-and-schedule-message-delivery.html"),t(a)])]),F,n("p",null,[n("a",N,[s("http://activemq.apache.org/message-redelivery-and-dlq-handling.html"),t(a)])]),U,n("p",null,[n("a",G,[s("http://activemq.apache.org/redelivery-policy"),t(a)])]),K,n("p",null,[n("a",z,[s("http://127.0.0.1:8080/secondsKill?pid=18&userId=1"),t(a)])])])}const H=p(l,[["render",V],["__file","ActiveMQ.html.vue"]]);export{H as default};
