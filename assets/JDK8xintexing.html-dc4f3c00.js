const l=JSON.parse('{"key":"v-5f7cf4ce","path":"/docs/java_base/module/JDK8xintexing.html","title":"JDK8新特性","lang":"en-US","frontmatter":{"title":"JDK8新特性","date":"2023/6/28"},"headers":[{"level":2,"title":"接口默认方法","slug":"接口默认方法","link":"#接口默认方法","children":[]},{"level":2,"title":"接口静态方法","slug":"接口静态方法","link":"#接口静态方法","children":[]},{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"格式","slug":"格式","link":"#格式","children":[]},{"level":2,"title":"@FunctionalInterface注解","slug":"functionalinterface注解","link":"#functionalinterface注解","children":[]},{"level":2,"title":"自定义函数式接口","slug":"自定义函数式接口","link":"#自定义函数式接口","children":[]},{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":2,"title":"Lambda 省略规则","slug":"lambda-省略规则","link":"#lambda-省略规则","children":[]},{"level":2,"title":"Lambda的延迟执行","slug":"lambda的延迟执行","link":"#lambda的延迟执行","children":[{"level":3,"title":"性能浪费的案例","slug":"性能浪费的案例","link":"#性能浪费的案例","children":[]},{"level":3,"title":"Lambda的优化写法","slug":"lambda的优化写法","link":"#lambda的优化写法","children":[]},{"level":3,"title":"证明Lambda的延迟","slug":"证明lambda的延迟","link":"#证明lambda的延迟","children":[]}]},{"level":2,"title":"使用Lambda作为参数和返回值","slug":"使用lambda作为参数和返回值","link":"#使用lambda作为参数和返回值","children":[]},{"level":2,"title":"Supplier","slug":"supplier","link":"#supplier","children":[]},{"level":2,"title":"Consumer接口","slug":"consumer接口","link":"#consumer接口","children":[]},{"level":2,"title":"Predicate接口","slug":"predicate接口","link":"#predicate接口","children":[]},{"level":2,"title":"练习：集合信息筛选","slug":"练习-集合信息筛选","link":"#练习-集合信息筛选","children":[]},{"level":2,"title":"Function接口","slug":"function接口","link":"#function接口","children":[]},{"level":2,"title":"练习：自定义函数模型拼接","slug":"练习-自定义函数模型拼接","link":"#练习-自定义函数模型拼接","children":[]},{"level":2,"title":"问题分析","slug":"问题分析","link":"#问题分析","children":[]},{"level":2,"title":"方法引用符","slug":"方法引用符","link":"#方法引用符","children":[]},{"level":2,"title":"通过对象名引用成员方法","slug":"通过对象名引用成员方法","link":"#通过对象名引用成员方法","children":[]},{"level":2,"title":"通过类名称引用静态方法","slug":"通过类名称引用静态方法","link":"#通过类名称引用静态方法","children":[]},{"level":2,"title":"通过super引用成员方法","slug":"通过super引用成员方法","link":"#通过super引用成员方法","children":[]},{"level":2,"title":"通过this引用成员方法","slug":"通过this引用成员方法","link":"#通过this引用成员方法","children":[{"level":3,"title":"传统集合的遍历代码","slug":"传统集合的遍历代码","link":"#传统集合的遍历代码","children":[]},{"level":3,"title":"循环遍历的弊端","slug":"循环遍历的弊端","link":"#循环遍历的弊端","children":[]},{"level":3,"title":"Stream更优写法","slug":"stream更优写法","link":"#stream更优写法","children":[]}]},{"level":2,"title":"获取流","slug":"获取流","link":"#获取流","children":[{"level":3,"title":"根据Collection获取流","slug":"根据collection获取流","link":"#根据collection获取流","children":[]},{"level":3,"title":"根据Map获取流","slug":"根据map获取流","link":"#根据map获取流","children":[]},{"level":3,"title":"根据数组获取流","slug":"根据数组获取流","link":"#根据数组获取流","children":[]}]},{"level":2,"title":"常用方法","slug":"常用方法","link":"#常用方法","children":[{"level":3,"title":"逐一处理：forEach","slug":"逐一处理-foreach","link":"#逐一处理-foreach","children":[]},{"level":3,"title":"过滤：filter","slug":"过滤-filter","link":"#过滤-filter","children":[]},{"level":3,"title":"映射：map","slug":"映射-map","link":"#映射-map","children":[]},{"level":3,"title":"统计个数：count","slug":"统计个数-count","link":"#统计个数-count","children":[]},{"level":3,"title":"取用前几个：limit","slug":"取用前几个-limit","link":"#取用前几个-limit","children":[]},{"level":3,"title":"跳过前几个：skip","slug":"跳过前几个-skip","link":"#跳过前几个-skip","children":[]},{"level":3,"title":"组合：concat","slug":"组合-concat","link":"#组合-concat","children":[]}]},{"level":2,"title":"练习：集合元素处理（传统方式）","slug":"练习-集合元素处理-传统方式","link":"#练习-集合元素处理-传统方式","children":[]},{"level":2,"title":"练习：集合元素处理（Stream方式）","slug":"练习-集合元素处理-stream方式","link":"#练习-集合元素处理-stream方式","children":[]}],"git":{"createdTime":1688020466000,"updatedTime":1688436100000,"contributors":[{"name":"xingenhi","email":"xingenhi@163.com","commits":2}]},"filePathRelative":"docs/java_base/module/JDK8新特性.md"}');export{l as data};
